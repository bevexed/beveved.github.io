<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bev</title>
  
  <subtitle>Daily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.bevexed.top/"/>
  <updated>2019-09-06T03:00:59.283Z</updated>
  <id>http://blog.bevexed.top/</id>
  
  <author>
    <name>bev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端设计模式（状态模式）</title>
    <link href="http://blog.bevexed.top/2019/09/06/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/09/06/前端设计模式（状态模式）/</id>
    <published>2019-09-06T02:08:22.000Z</published>
    <updated>2019-09-06T03:00:59.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>一个对象有状态变化</li><li>每次状态变化都会触发一个逻辑</li><li>不能总是用 if…else 来控制</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handel() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`turn to <span class="subst">$&#123; <span class="keyword">this</span>.color &#125;</span> light`</span>);</span><br><span class="line">    context.setState(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> green = <span class="keyword">new</span> State(<span class="string">'green'</span>);</span><br><span class="line"><span class="keyword">let</span> yellow = <span class="keyword">new</span> State(<span class="string">'yellow'</span>);</span><br><span class="line"><span class="keyword">let</span> red = <span class="keyword">new</span> State(<span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">green.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br><span class="line"></span><br><span class="line">yellow.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br><span class="line"></span><br><span class="line">red.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>ES6 Promise</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个对象有状态变化&lt;/li&gt;
&lt;li&gt;每次状态变化都会触发一个逻辑&lt;/li&gt;
&lt;li&gt;不能总是用 if…else 来控制&lt;/li
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（迭代器模式）</title>
    <link href="http://blog.bevexed.top/2019/09/05/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/09/05/前端设计模式（迭代器模式）/</id>
    <published>2019-09-05T09:52:11.000Z</published>
    <updated>2019-09-06T02:05:06.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>顺序访问一个集合</li><li>使用者无需知道集合的内部结构（封装）</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(container) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = container.list;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.list[<span class="keyword">this</span>.index++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.index &lt; <span class="keyword">this</span>.list.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(list) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = list</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成遍历器</span></span><br><span class="line">  getIterator() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Iterator(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> container = <span class="keyword">new</span> Container(arr);</span><br><span class="line"><span class="keyword">let</span> iterator = container.getIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>jQuery each</li><li><p>ES6 Iterator</p><ul><li>ES6 语法中，有序集合的数据类型已经有很多</li><li><p>Array Map Set String TypedArray arguments NodeList</p><ul><li>都有 <code>[Symbol.iterator]</code> 属性</li><li>属性值是函数，执行函数返回一个迭代器</li><li>迭代器有 <code>next</code> 方法可以顺序迭代子元素</li><li>可运行 <code>Array.prototype[Symbol.iterator]</code> 测试</li><li><p>实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 生成遍历器</span></span><br><span class="line">  <span class="keyword">let</span> iterator = data[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> item;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    item = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (!item.done)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">each(arr);</span><br></pre></td></tr></table></figure></li><li><p>for…of 语法糖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> data)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">each(arr);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>需要有一个统一的遍历接口来遍历所有的数据类型</p></li><li>（Object 不是有序集合，可以用 Map 代替）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;顺序访问一个集合&lt;/li&gt;
&lt;li&gt;使用者无需知道集合的内部结构（封装）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（观察者模式）</title>
    <link href="http://blog.bevexed.top/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/26/前端设计模式（观察者模式）/</id>
    <published>2019-08-26T07:32:01.000Z</published>
    <updated>2019-09-05T09:54:11.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>发布 &amp; 订阅</li><li>一对多</li><li>主题 和 观察者分离，不是主动触发而是被动监听，两者解耦</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getState()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state</span><br><span class="line">    <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notifyAllObservers()&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      observer.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  attach(observer)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, subject)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.subject = subject</span><br><span class="line">    <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> update, state: <span class="subst">$&#123; <span class="keyword">this</span>.subject.getState() &#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">'o1'</span>, s)</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer(<span class="string">'o2'</span>, s)</span><br><span class="line"></span><br><span class="line">s.setState(<span class="number">1</span>)</span><br><span class="line">s.setState(<span class="number">2</span>)</span><br><span class="line">s.setState(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>网页事件绑定</li><li>Promise 的 then</li><li>jQuery callbacks</li><li>vue 和 React 组件声明周期触发</li><li><p>nodejs 自定义事件</p><ul><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter1 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="comment">// 监听 some 事件</span></span><br><span class="line">emitter1.on(<span class="string">'some'</span>, info =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>, info);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听 some 事件</span></span><br><span class="line">emitter1.on(<span class="string">'some'</span>, info =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>, info);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 触发 some 事件</span></span><br><span class="line">emitter1.emit(<span class="string">'some'</span>,<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xxx = <span class="keyword">new</span> Dog(<span class="string">'xxx'</span>);</span><br><span class="line">xxx.on(<span class="string">'bark'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'barked-1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">xxx.on(<span class="string">'bark'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'barked-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">xxx.emit(<span class="string">'bark'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="网页事件绑定"><a href="#网页事件绑定" class="headerlink" title="网页事件绑定"></a>网页事件绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;发布 &amp;amp; 订阅&lt;/li&gt;
&lt;li&gt;一对多&lt;/li&gt;
&lt;li&gt;主题 和 观察者分离，不是主动触发而是被动监听，两者解耦&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（外观模式）</title>
    <link href="http://blog.bevexed.top/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/26/前端设计模式（外观模式）/</id>
    <published>2019-08-26T07:20:09.000Z</published>
    <updated>2019-08-26T07:30:06.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>为子系统中的一组接口提供了一个高层接口</li><li>使用者使用这个高层接口</li><li>业务用的比较多</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为子系统中的一组接口提供了一个高层接口&lt;/li&gt;
&lt;li&gt;使用者使用这个高层接口&lt;/li&gt;
&lt;li&gt;业务用的比较多&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（代理模式）</title>
    <link href="http://blog.bevexed.top/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/26/前端设计模式（代理模式）/</id>
    <published>2019-08-26T06:23:32.000Z</published>
    <updated>2019-08-26T07:19:42.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>使用者无权访问目标对象</li><li>中间加代理，通过代理做授权和控制</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadImg</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fileName)&#123;</span><br><span class="line">    <span class="keyword">this</span>.fileName = fileName</span><br><span class="line">    <span class="keyword">this</span>.loadFromDisk()</span><br><span class="line">  &#125;</span><br><span class="line">  loadFromDisk()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'loading...'</span> + <span class="keyword">this</span>.fileName);</span><br><span class="line">  &#125;</span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'display...'</span> + <span class="keyword">this</span>.fileName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fileName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.realImg = <span class="keyword">new</span> ReadImg(fileName)</span><br><span class="line">  &#125;</span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="keyword">this</span>.realImg.display()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg()</span><br><span class="line">proxyImg.display()</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>网页事件代理（冒泡模型）</li><li>jQuery的$.proxy</li><li><p>ES6 Proxy</p><h3 id="网页事件代理（冒泡模型）"><a href="#网页事件代理（冒泡模型）" class="headerlink" title="网页事件代理（冒泡模型）"></a>网页事件代理（冒泡模型）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> div1 = <span class="built_in">document</span>.querySelector(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="javascript">  div1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; target &#125; = e;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (target.nodeName === <span class="string">'A'</span>) &#123;</span></span><br><span class="line"><span class="undefined">      alert(target.innerHTML)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES6-Proxy"><a href="#ES6-Proxy" class="headerlink" title="ES6 Proxy"></a>ES6 Proxy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">name: <span class="string">'xxx'</span>,</span><br><span class="line">age: <span class="number">25</span>,</span><br><span class="line">phone: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="built_in">Proxy</span>(star, &#123;</span><br><span class="line">  get(target ,key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'phone'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'321'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'price'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="number">12000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set(target, key, value, receiver) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'customPrice'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'价格太低'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agent.phone);</span><br><span class="line"><span class="built_in">console</span>.log(agent.name);</span><br><span class="line"><span class="built_in">console</span>.log(agent.age);</span><br><span class="line">agent.customPrice = <span class="number">1000000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代理模式-VS-适配器模式"><a href="#代理模式-VS-适配器模式" class="headerlink" title="代理模式 VS 适配器模式"></a>代理模式 VS 适配器模式</h2><ul><li>适配器模式：提供一个不同的接口</li><li>代理模式：提供一个一模一样的接口</li></ul><h2 id="代理模式-VS-装饰器模式"><a href="#代理模式-VS-装饰器模式" class="headerlink" title="代理模式 VS 装饰器模式"></a>代理模式 VS 装饰器模式</h2><ul><li>装饰器模式：扩展功能，原有功能不变且可以直接使用</li><li>代理模式：显示原有功能，但是经过限制或者阉割之后的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用者无权访问目标对象&lt;/li&gt;
&lt;li&gt;中间加代理，通过代理做授权和控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（装饰器模式）</title>
    <link href="http://blog.bevexed.top/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/19/前端设计模式（装饰器模式）/</id>
    <published>2019-08-19T09:30:31.000Z</published>
    <updated>2019-08-26T06:32:20.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>为对象添加新功能</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>旧接口的封装</li><li>Vue computed</li><li>ES7<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  npm i babel-plugin-transform-decorators-legacy -D</span></span><br><span class="line"><span class="comment">// .babelrc "plugins": ["transform-decorators-legacy"]</span></span><br><span class="line">@testDec</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isDec = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(target.prototype, ...list)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  foo()&#123;</span><br><span class="line">    alert(<span class="string">'foo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyClass()</span><br><span class="line">obj.foo()</span><br></pre></td></tr></table></figure></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  draw()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'圆'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">    <span class="keyword">this</span>.circle = circle</span><br><span class="line">  &#125;</span><br><span class="line">  draw()&#123;</span><br><span class="line">    <span class="keyword">this</span>.circle.draw()</span><br><span class="line">    <span class="keyword">this</span>.setRedBorder(circle)</span><br><span class="line">  &#125;</span><br><span class="line">  setRedBorder(circle)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红色边框'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle()</span><br><span class="line">circle.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle)</span><br><span class="line">dec.draw()</span><br></pre></td></tr></table></figure><h2 id="装饰方法"><a href="#装饰方法" class="headerlink" title="装饰方法"></a>装饰方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">this</span>.last = <span class="string">'B'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @readonly</span><br><span class="line">  name()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.last&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name ,descriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target,name,descriptor);</span><br><span class="line">  <span class="keyword">let</span> oldValue = descriptor.value</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`calling <span class="subst">$&#123;name&#125;</span> width`</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">  @log</span><br><span class="line">  add(a, b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> math = <span class="keyword">new</span> <span class="built_in">Math</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="core-decorators"><a href="#core-decorators" class="headerlink" title="core-decorators"></a>core-decorators</h2><ul><li><p>装饰器库</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i core-decorators -S</span><br></pre></td></tr></table></figure><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><ul><li>deprecate</li><li>readonly</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为对象添加新功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（适配器模式）</title>
    <link href="http://blog.bevexed.top/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/19/前端设计模式（适配器模式）/</id>
    <published>2019-08-19T09:17:39.000Z</published>
    <updated>2019-08-19T08:59:17.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>旧接口和现有接口不一致，需要转换</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>旧接口的封装</li><li>Vue computed</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">  specificRequest()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'220v'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.adaptee = <span class="keyword">new</span> Adaptee()</span><br><span class="line">  &#125;</span><br><span class="line">  request()&#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="keyword">this</span>.adaptee.specificRequest()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'110v'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="keyword">new</span> Target()</span><br><span class="line">target.request()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;旧接口和现有接口不一致，需要转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（工厂模式）</title>
    <link href="http://blog.bevexed.top/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/19/前端设计模式（工厂模式）/</id>
    <published>2019-08-19T08:07:29.000Z</published>
    <updated>2019-08-19T08:18:55.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>将 new 操作单独封装</li><li>遇到 new 时，可以考虑使用 工厂模式</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  init()&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">  create(name)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> creator = <span class="keyword">new</span> Creator()</span><br><span class="line"><span class="keyword">let</span> p = creator.create(<span class="string">'demo'</span>)</span><br><span class="line">p.init()</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>jQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector)&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   append(node)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>React.createElement</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将 new 操作单独封装&lt;/li&gt;
&lt;li&gt;遇到 new 时，可以考虑使用 工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（单例模式）</title>
    <link href="http://blog.bevexed.top/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/19/前端设计模式（单例模式）/</id>
    <published>2019-08-19T08:07:29.000Z</published>
    <updated>2019-08-19T08:47:24.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>系统中被唯一使用</li><li>一个类只有一个实例</li><li>强依赖 于 private</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p>登录框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">  &#125;</span><br><span class="line">  show()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'show'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>  alert(<span class="string">'已经显示'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'show'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'显示成功'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  hide() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'hide'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> alert(<span class="string">'已经隐藏'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'隐藏成功'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginForm.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> LoginForm()</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> login = LoginForm.getInstance()</span><br><span class="line">login.show()</span><br></pre></td></tr></table></figure></li><li><p>购物车</p></li><li>jQuery 只有一个 $<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.jQuery != <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.jQuery</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SingleObject.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> SingleObject()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = SingleObject.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="keyword">let</span> obj2 = SingleObject.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;系统中被唯一使用&lt;/li&gt;
&lt;li&gt;一个类只有一个实例&lt;/li&gt;
&lt;li&gt;强依赖 于 private&lt;/li&gt;
&lt;/ul&gt;
&lt;h
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（设计原则）</title>
    <link href="http://blog.bevexed.top/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/08/19/前端设计模式（设计原则）/</id>
    <published>2019-08-19T02:52:20.000Z</published>
    <updated>2019-08-19T03:53:07.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何为设计"><a href="#何为设计" class="headerlink" title="何为设计"></a>何为设计</h2><ul><li>按照一种思路或标准来实现功能</li><li>功能相同，可以用不同的方案来实现</li><li><p>随着需求的增加，设计的作用才能体现出来</p><h3 id="《UNIX-LINUX设计哲学》"><a href="#《UNIX-LINUX设计哲学》" class="headerlink" title="《UNIX/LINUX设计哲学》"></a>《UNIX/LINUX设计哲学》</h3><ol><li>小即是美</li><li>让每个程序只做好一件事</li><li>快速建立原型</li><li>舍去高效率而取可移植性</li><li>采用纯文本来存储数据</li><li>充分利用软件的杠杆效应</li><li>使用 shell 脚本来提高杠杆效应和可移植性</li><li>避免强制性的用户界面</li><li>让每个程序都成为过滤器</li><li>允许用户定制环境</li><li>尽量使操作系统内核小而轻量化</li><li>使用小写字母并尽量简写</li><li>沉默是金</li><li>各部分之和大于整体</li><li>寻求百分之90的解决方案</li></ol><h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><ul><li>明白每个设计的道理和用意</li><li>通过经典应用体会他的真正使用场景</li><li>自己编码时多思考，尽量模仿（刻意训练）</li></ul></li></ul><h2 id="SOLID五大设计原则"><a href="#SOLID五大设计原则" class="headerlink" title="SOLID五大设计原则"></a>SOLID五大设计原则</h2><ul><li>S：单一职责原则</li><li>O：开放封闭原则</li><li>L：李氏置换原则</li><li>I：接口堵路原则</li><li><p>D：依赖倒置原则</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul><li>一个程序只做好一件事</li><li>如果功能过于浮渣就拆分开，每个部分保持独立</li></ul><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>软件设计的终极目标</li></ul><h3 id="李氏置换原则"><a href="#李氏置换原则" class="headerlink" title="李氏置换原则"></a>李氏置换原则</h3><ul><li>子类能够覆盖父类</li><li>父类能处闲的地方子类就能出现</li><li>JS 种使用较少 </li></ul><h3 id="接口独立原则"><a href="#接口独立原则" class="headerlink" title="接口独立原则"></a>接口独立原则</h3><ul><li>保持接口的单一独立，避免出现“胖接口”</li></ul><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现 </li></ul></li></ul><h2 id="从设计到模式"><a href="#从设计到模式" class="headerlink" title="从设计到模式"></a>从设计到模式</h2><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><ul><li>创建型</li><li>组合型</li><li><p>行为型</p><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul><li>工厂模式（工厂方法模式、抽象工厂模式、建造者模式）</li><li>单例模式</li><li>原型模式</li></ul><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul><li>策略模式</li><li>模板方法模式</li><li>观察者模式（JS中用的多）</li><li>迭代器模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;何为设计&quot;&gt;&lt;a href=&quot;#何为设计&quot; class=&quot;headerlink&quot; title=&quot;何为设计&quot;&gt;&lt;/a&gt;何为设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;按照一种思路或标准来实现功能&lt;/li&gt;
&lt;li&gt;功能相同，可以用不同的方案来实现&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随着需
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>webpack搭建简单环境</title>
    <link href="http://blog.bevexed.top/2019/07/30/webpack%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.bevexed.top/2019/07/30/webpack搭建简单环境/</id>
    <published>2019-07-30T07:22:57.000Z</published>
    <updated>2019-08-19T02:25:26.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化-npm"><a href="#初始化-npm" class="headerlink" title="初始化 npm"></a>初始化 npm</h2><blockquote><p>npm init</p></blockquote><h2 id="安装-webpack、webpack-cli"><a href="#安装-webpack、webpack-cli" class="headerlink" title="安装 webpack、webpack-cli"></a>安装 webpack、webpack-cli</h2><blockquote><p>npm i webpack webpack-cli -S</p></blockquote><h2 id="新建-webpack-dev-config-js"><a href="#新建-webpack-dev-config-js" class="headerlink" title="新建 webpack.dev.config.js"></a>新建 webpack.dev.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="新建-src-目录"><a href="#新建-src-目录" class="headerlink" title="新建 src 目录"></a>新建 src 目录</h2><ul><li>src<ul><li>index.js</li></ul></li><li>index.html</li></ul><h2 id="在-package-json-配置"><a href="#在-package-json-配置" class="headerlink" title="在 package.json 配置"></a>在 package.json 配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">      <span class="attr">"test"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"dev"</span>: <span class="string">"webpack --config ./webpack.dev.config --mode development"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>webpack-dev-server </li><li>html-webpack-plugin<blockquote><p>npm i webpack-dev-server html-webpack-plugin -S</p></blockquote></li></ul><h2 id="修改-webpack-dev-config-js"><a href="#修改-webpack-dev-config-js" class="headerlink" title="修改 webpack.dev.config.js"></a>修改 webpack.dev.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname,<span class="string">'./release'</span>), <span class="comment">//根目录</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">9000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h2><blockquote><p>“dev”: “webpack-dev-server –config ./webpack.dev.config –mode development”</p></blockquote><h2 id="安装-babel-解析-ES6"><a href="#安装-babel-解析-ES6" class="headerlink" title="安装 babel 解析 ES6"></a>安装 babel 解析 ES6</h2><ul><li>babel-core</li><li>babel-loader</li><li>babel-polyfill</li><li>babel-preset-env</li><li>babel-preset-latest<blockquote><p>npm i babel-core babel-loader babel-polyfill babel-preset-env babel-preset-latest -S</p></blockquote></li></ul><h2 id="新建-babelrc"><a href="#新建-babelrc" class="headerlink" title="新建 .babelrc"></a>新建 .babelrc</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"latest"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-webpack-dev-config-中配置-loader"><a href="#在-webpack-dev-config-中配置-loader" class="headerlink" title="在 webpack.dev.config 中配置 loader"></a>在 webpack.dev.config 中配置 loader</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: /\.js?$/,</span><br><span class="line">      exclude: /(node_modules)/,</span><br><span class="line">      loader: 'babel-loader'</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化-npm&quot;&gt;&lt;a href=&quot;#初始化-npm&quot; class=&quot;headerlink&quot; title=&quot;初始化 npm&quot;&gt;&lt;/a&gt;初始化 npm&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装
      
    
    </summary>
    
      <category term="构建工具" scheme="http://blog.bevexed.top/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://blog.bevexed.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（面向对象）</title>
    <link href="http://blog.bevexed.top/2019/07/30/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/07/30/前端设计模式（面向对象）/</id>
    <published>2019-07-30T07:10:25.000Z</published>
    <updated>2019-08-19T02:21:56.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>学会设计模式，可以帮你写更好的代码</li><li>编程应该 <strong>简单、抽象</strong></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>数据结构化</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>类：模板</li><li>对象：实例</li></ul><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul><li>继承 <ul><li>继承可以将公共方法抽离出来，提高复用，减少冗余</li></ul></li><li>封装（ES6不支持，ts 支持）<ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开放</li><li>减少耦合，不该外露不外露</li><li>利于数据、接口的权限管理</li></ul></li><li>多态 <ul><li>同一个接口不同，不同表现</li><li>JS 应用极少</li><li>保持子类的开放性和灵活性</li><li>面向接口编程</li></ul></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector)&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   append(node)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age= age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat()&#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  speak()&#123;</span><br><span class="line">    alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'webPack'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alert(p.getName())</span><br><span class="line"></span><br><span class="line">p.eat()</span><br><span class="line">p.speak()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age);</span><br><span class="line">    <span class="keyword">this</span>.number = number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  study() &#123;</span><br><span class="line">    alert(<span class="string">`学号：<span class="subst">$&#123; <span class="keyword">this</span>.number &#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Student(<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">w.study();</span><br><span class="line">w.eat();</span><br><span class="line">w.speak();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;学会设计模式，可以帮你写更好的代码&lt;/li&gt;
&lt;li&gt;编程应该 &lt;strong&gt;简单、抽象&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP</title>
    <link href="http://blog.bevexed.top/2019/07/16/TCP-IP/"/>
    <id>http://blog.bevexed.top/2019/07/16/TCP-IP/</id>
    <published>2019-07-16T04:56:06.000Z</published>
    <updated>2019-07-16T05:29:44.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><ul><li>大多数的网络应用程序都被设计成了 <strong>客户端 - 服务器</strong> 模式</li><li>双方都有对应的 <strong>一或多个</strong> 协议进行通讯</li><li>链路层、网络层、运输层 一般在<strong>内核</strong>中执行，应用程序通常是用户进程</li><li>链路层、网络层、运输层 关注<strong>通讯</strong>细节</li><li>应用层 关注<strong>应用程序</strong></li><li>应用层和运输层使用端到端（end-to-end）协议<br>-</li></ul><h2 id="链路层（以太网-ARP-硬件接口）"><a href="#链路层（以太网-ARP-硬件接口）" class="headerlink" title="链路层（以太网/ARP/硬件接口）"></a>链路层（以太网/ARP/硬件接口）</h2><p>处理与电缆（或其他任何传输媒介）的物理接口细节</p><h2 id="网络层（IP-ICMP-IGMP）"><a href="#网络层（IP-ICMP-IGMP）" class="headerlink" title="网络层（IP/ICMP/IGMP）"></a>网络层（IP/ICMP/IGMP）</h2><p>处理分组在网络中的活动，例如分组选路</p><ul><li>提供逐跳协议（hop-to-hop）</li><li>网络ip提供的是一种不可靠的服务，他只是尽可能快的把分组从源结点送到目的结点，但不提供可靠性保障</li><li>ICMP 是 IP 协议的附属协议（告诉你出问题的原因）</li></ul><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><h2 id="运输层（TCP-UDP）"><a href="#运输层（TCP-UDP）" class="headerlink" title="运输层（TCP/UDP）"></a>运输层（TCP/UDP）</h2><p>为两台主机上的应用程序提供端到端的通讯</p><ul><li>TCP 在不可靠的IP层上提供了一个可靠的运输层</li><li>UDP 不可靠</li></ul><h2 id="应用层（FTP）"><a href="#应用层（FTP）" class="headerlink" title="应用层（FTP）"></a>应用层（FTP）</h2><p>处理特定的应用程序细节</p><ul><li>互联网的目的之一就是在应用程序中隐藏所有的物理细节</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分层&quot;&gt;&lt;a href=&quot;#分层&quot; class=&quot;headerlink&quot; title=&quot;分层&quot;&gt;&lt;/a&gt;分层&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;大多数的网络应用程序都被设计成了 &lt;strong&gt;客户端 - 服务器&lt;/strong&gt; 模式&lt;/li&gt;
&lt;li&gt;双方都有对应的 
      
    
    </summary>
    
      <category term="网络基础" scheme="http://blog.bevexed.top/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="http://blog.bevexed.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆</title>
    <link href="http://blog.bevexed.top/2019/06/13/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <id>http://blog.bevexed.top/2019/06/13/二叉堆/</id>
    <published>2019-06-13T05:55:15.000Z</published>
    <updated>2019-06-13T10:15:10.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><ul><li>本质是一种 <strong>完全二叉树</strong></li><li>有 <strong>最小堆</strong> 和 <strong>最大堆</strong> 两种</li><li>二叉堆的根节点叫做 <strong>堆顶</strong></li><li>最大堆的堆顶是整个堆中的 <strong>最大元素</strong></li><li>最小堆的堆顶是整个堆中的 <strong>最小元素</strong></li></ul><h2 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>大于或等于</strong> 它左、右孩子节点的值</p><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>小于或等于</strong> 它左、右孩子节点的值</p><h2 id="二叉堆的自我调整"><a href="#二叉堆的自我调整" class="headerlink" title="二叉堆的自我调整"></a>二叉堆的自我调整</h2><p>把一个不符合堆性质的完全二叉树，调整成一个堆，操作有</p><ul><li>插入节点</li><li>删除节点</li><li>构建二叉堆</li></ul><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ol><li>二叉堆插入节点时，插入位置是完全二叉树的 <strong>最后</strong> 一个位置</li><li>新节点通过与父节点比较位置和 <strong>上浮</strong> 来确认节点的位置</li></ol><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol><li>二叉堆删除的是 <strong>堆顶</strong> 的节点</li><li>此时为了维持二叉堆的结构，需要用 <strong>最后一个</strong> 节点临时补充到堆顶的位置</li><li>通过 <strong>下沉</strong> 来确认节点的位置</li></ol><h3 id="构建二叉堆"><a href="#构建二叉堆" class="headerlink" title="构建二叉堆"></a>构建二叉堆</h3><ul><li>通过所有子叶 <strong>下沉</strong> 实现</li><li>下沉从最后一个节点开始</li><li>二叉堆的所有节点都存储在 <strong>数组</strong> 中</li><li>如果父节点的下标是 <strong>parent</strong>，则左孩子的下标为 <strong>2 * parent + 1</strong>，右孩子的下标为 <strong>2 * parent + 2</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉堆&quot;&gt;&lt;a href=&quot;#二叉堆&quot; class=&quot;headerlink&quot; title=&quot;二叉堆&quot;&gt;&lt;/a&gt;二叉堆&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本质是一种 &lt;strong&gt;完全二叉树&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有 &lt;strong&gt;最小堆&lt;/strong&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.bevexed.top/2019/06/13/%E6%A0%91/exercise/"/>
    <id>http://blog.bevexed.top/2019/06/13/树/exercise/</id>
    <published>2019-06-13T05:44:01.337Z</published>
    <updated>2019-06-13T05:44:01.352Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Binary Tree</title>  <style>    .root {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .root div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }  </style></head><body><div class="root">  1  <div>2    <div>4</div>    <div>5</div>  </div>  <div>3    <div>6</div>    <div>7</div>  </div></div></body><script>  /**   * 深度优先遍历的递归写法   * 原理：递归的回溯性   */  class TravelTree {    constructor() {      this.nodeList = [];    }    preOrder = node => {      if (node) {        this.nodeList.push(node.firstChild.textContent.trim());        this.preOrder(node.firstElementChild);        this.preOrder(node.lastElementChild);      }    };    inOrder = node => {      if (node) {        this.inOrder(node.firstElementChild);        this.nodeList.push(node.firstChild.textContent.trim());        this.inOrder(node.lastElementChild);      }    };    postOrder = node => {      if (node) {        this.postOrder(node.firstElementChild);        this.postOrder(node.lastElementChild);        this.nodeList.push(node.firstChild.textContent.trim());      }    };    reset() {      this.nodeList = [];    }  }  let node = document.querySelector('.root');  let tree = new TravelTree();  console.log('TravelTree');  tree.reset();  tree.preOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.inOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.postOrder(node);  console.log(tree.nodeList);  // 深度优先遍历的非递归写法  class StackTree {    constructor() {      this.nodeList = [];      this.stack = []    }    preOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        // 进栈 将所有左节点压栈        while (treeNode) {          this.stack.push(treeNode);          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.firstElementChild;        }        // 出栈        if (this.stack.length) {          treeNode = this.stack.pop();          treeNode = treeNode.lastElementChild;        }      }    }    inOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        while (treeNode) {          this.stack.push(treeNode);          treeNode = treeNode.firstElementChild;        }        if (this.stack.length) {          treeNode = this.stack.pop();          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.lastElementChild;        }      }    }    /*    *  将根节点压入第一个栈    *  从第一个栈中弹出一个元素，压入第二个栈    *  然后分别将该节点的左右孩子压入第一个栈    *  重复步骤2和步骤3直到第一个栈为空    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。    */    postOrder(node) {      let treeNode = node;      this.stack.push(treeNode);      while (this.stack.length) {        treeNode = this.stack.pop();        this.nodeList.unshift(treeNode.firstChild.textContent.trim());        if (treeNode.firstElementChild) {          this.stack.push(treeNode.firstElementChild)        }        if (treeNode.lastElementChild) {          this.stack.push(treeNode.lastElementChild)        }      }    }    reset() {      this.stack = [];      this.nodeList = [];    }  }  let stackTree = new StackTree();  console.log('stackTree');  stackTree.preOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.inOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.postOrder(node);  console.log(stackTree.nodeList);  // 广度度优先遍历非递归  class WidthTravelTree {    constructor() {      this.nodeList = [];      this.stack = []    }    // 队列    widthTravel(node) {      if (node) {        this.stack.push(node);        this.nodeList.push(node.firstChild.textContent.trim());        while (this.stack.length) {          let item = this.stack.shift();          if (item.firstElementChild) {            this.nodeList.push(item.firstElementChild.firstChild.textContent.trim());            this.stack.push(item.firstElementChild);          }          if (item.lastElementChild) {            this.nodeList.push(item.lastElementChild.firstChild.textContent.trim());            this.stack.push(item.lastElementChild)          }        }      }    }  }  console.log('WidthTravelTree');  let widthTravelTree = new WidthTravelTree();  widthTravelTree.widthTravel(node);  console.log(widthTravelTree.nodeList);</script></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Binary Tree&lt;/title&gt;
  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.bevexed.top/2019/06/10/%E6%A0%91/demo/"/>
    <id>http://blog.bevexed.top/2019/06/10/树/demo/</id>
    <published>2019-06-10T09:21:29.548Z</published>
    <updated>2019-06-11T09:18:56.233Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang=""><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Document</title>  <style>    * {      margin: 0;      padding: 0;    }    .wrap {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .wrap div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }    .btn-wrap {      text-align: center;      padding-top: 20px;    }    .btn-wrap button {      display: inline-block;      padding: 4px 10px;    }  </style></head><body><div class="wrap">  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div>  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div></div><div class="btn-wrap">  <button>前序</button>  <button>中序</button>  <button>后序</button></div><script>  let wrap = document.querySelector(".wrap");  let btn_wrap = document.querySelector(".btn-wrap");  let btn1 = btn_wrap.querySelectorAll("button")[0];  let btn2 = btn_wrap.querySelectorAll("button")[1];  let btn3 = btn_wrap.querySelectorAll("button")[2];  let arr = [];  let last;  let toggle = false;  //给按钮绑定事件  btn1.onclick = function () {    if (!toggle) {      toggle = true;      reset();      preOrder(wrap);      showWay();    }  };  btn2.onclick = function () {    if (!toggle) {      toggle = true;      reset();      inOrder(wrap);      showWay();    }  };  btn3.onclick = function () {    if (!toggle) {      toggle = true;      reset();      postOrder(wrap);      showWay();    }  };  //二叉树的遍历的三种方式  //(1)前序遍历（DLR)  function preOrder(node) {    if (node) {      arr.push(node);      preOrder(node.firstElementChild);      preOrder(node.lastElementChild);    }  }  //(2)中序遍历（LDR）  function inOrder(node) {    if (node) {      inOrder(node.firstElementChild);      arr.push(node);      inOrder(node.lastElementChild);    }  }  //(3)后序遍历（LRD）  function postOrder(node) {    if (node) {      postOrder(node.firstElementChild);      postOrder(node.lastElementChild);      arr.push(node);    }  }  //显示遍历的过程  function showWay() {    for (let i = 0; i < arr.length; i++) {      setTimeout(function (i) {        return function () {          if (i === arr.length - 1) {            toggle = false;          }          if (last) {            last.style.background = "white";          }          arr[i].style.background = "red";          last = arr[i];        }      }(i), i * 1000)    }  }  //初始化  function reset() {    arr = [];    if (last) {      last.style.background = "white";    }  }</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&quot;&gt;
&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;styl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="http://blog.bevexed.top/2019/05/15/%E6%A0%91/"/>
    <id>http://blog.bevexed.top/2019/05/15/树/</id>
    <published>2019-05-15T09:11:36.000Z</published>
    <updated>2019-06-13T09:53:11.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树-tree"><a href="#树-tree" class="headerlink" title="树 tree"></a>树 tree</h1><ul><li>树（tree）是n（n&gt;=0）个节点的有限集合。</li><li>当 n=0 时，称为空树</li><li>在任意一个非空树中有如下特点<ul><li>有且仅有一个特定的称为 <strong>根（root）</strong> 的节点</li><li>当 n&gt;1 时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，称为根的 <strong>子树</strong></li><li>节点的末端，叫做 <strong>叶子节点（leaf）</strong></li></ul></li></ul><p><img src="tree.png" alt="例图"></p><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><ul><li>树的一种特殊结构</li><li>每个节点最多有两个子节点</li><li>二叉树节点的两个孩子节点，一个被称为 <strong>左孩子（left child）</strong>，一个被称为 <strong>右孩子（right child）</strong><ul><li>这两个孩子顺序固定，不可颠倒</li></ul></li><li>存储结构<ul><li>链式存储结构</li><li>数组</li></ul></li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><ul><li>一个二叉树的所有非叶子节点都存在左右孩子</li><li>所有叶子节点都在同一层级上</li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul><li>对一个有 n 个节点的二叉树，按层级顺序编号，则所有节点的编号为从 1 到 n 。如果这个树所有节点和同样深度的满二叉树的编号为从 1 到 n 的节点位置相同，则这个二叉树为完全二叉树</li></ul><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><ul><li>也叫二叉排序树</li><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子树也是二叉树查找</li><li>对于一个 <strong>节点分布相对均衡</strong> 的二叉查找树来说，如果节点总数是 <strong>n</strong>，那么搜索节点的时间复杂度为 <strong>O(logn)</strong>,和数的深度一样</li><li>二叉树的自平衡</li></ul><h3 id="二叉树与存储结构"><a href="#二叉树与存储结构" class="headerlink" title="二叉树与存储结构"></a>二叉树与存储结构</h3><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p>二叉树的每一个节点由三部分组成</p><ul><li>存储数据的 data 变量</li><li>指向左孩子的 left 指针</li><li>指向右孩子的 right 指针</li></ul><h4 id="数组存储结构"><a href="#数组存储结构" class="headerlink" title="数组存储结构"></a>数组存储结构</h4><ul><li>按照层级顺序把二叉树的节点放到数组的对应位置上</li><li>如果某一节点的左孩子或右孩子空缺，则数组的相应位置也空出来</li><li>假设一个父节点的下标为 <strong>parent</strong>，那么它的左孩子的下标为 <strong>2 * parent + 1</strong>，它的右孩子的下标为 <strong>2 * parent + 2</strong></li><li>假设一个左孩子的下标为 <strong>leftChilde</strong> ，那么他的父节点的下标为 <strong>(leftChild - 1) / 2</strong></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="二叉查找树（binary-search-tree）"><a href="#二叉查找树（binary-search-tree）" class="headerlink" title="二叉查找树（binary search tree）"></a>二叉查找树（binary search tree）</h4><p>二叉查找树在二叉树的基础上增加了以下条件</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子叶也是二叉树查找</li><li>时间复杂度 O(logn), n 为树的深度</li></ul><h4 id="维持相对顺序"><a href="#维持相对顺序" class="headerlink" title="维持相对顺序"></a>维持相对顺序</h4><ul><li>二叉查找树的左子树小于父节点，右子树大于父节点，保证了二叉树的有序性</li></ul><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><p>将 <strong>非线性的数据结构</strong> 转换成 <strong>线性的序列</strong></p><h4 id="深度优先遍历-demo"><a href="#深度优先遍历-demo" class="headerlink" title="深度优先遍历 (demo)"></a>深度优先遍历 (<a href="demo.html">demo</a>)</h4><p>偏向于深度，<strong>一头扎到底</strong>的访问方式</p><h5 id="前序遍历（DLR"><a href="#前序遍历（DLR" class="headerlink" title="前序遍历（DLR)"></a>前序遍历（DLR)</h5><ul><li>过程</li></ul><ol><li>先访问 <strong>根节点</strong></li><li>遍历 <strong>左子树</strong></li><li>遍历 <strong>右子树</strong></li></ol><ul><li>结果 : ABDECF</li></ul><h5 id="中序遍历（LDR）"><a href="#中序遍历（LDR）" class="headerlink" title="中序遍历（LDR）"></a>中序遍历（LDR）</h5><ul><li>过程<br>左 根 右</li><li>结果 : DBEACF</li></ul><h5 id="后序遍历（LRD）"><a href="#后序遍历（LRD）" class="headerlink" title="后序遍历（LRD）"></a>后序遍历（LRD）</h5><ul><li>过程<br>左 右 根</li><li>结果 ： DEBFCA</li></ul><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Binary Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .root &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      width: 600px;</span></span><br><span class="line"><span class="undefined">      margin: 0 auto;</span></span><br><span class="line"><span class="undefined">      height: 150px;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .root div &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      height: 70%;</span></span><br><span class="line"><span class="undefined">      width: 44%;</span></span><br><span class="line"><span class="undefined">      margin: 0 3%;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      background: #fff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">  1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 深度优先遍历的递归写法</span></span><br><span class="line"><span class="undefined">   * 原理：递归的回溯性</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">TravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    preOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.preOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.preOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    inOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.inOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.inOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    postOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.postOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.postOrder(node.lastElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.root'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> tree = <span class="keyword">new</span> TravelTree();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'TravelTree'</span>);</span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 深度优先遍历的非递归写法</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">StackTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    preOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 进栈 将所有左节点压栈</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 出栈</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    inOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    *  将根节点压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  从第一个栈中弹出一个元素，压入第二个栈</span></span><br><span class="line"><span class="undefined">    *  然后分别将该节点的左右孩子压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  重复步骤2和步骤3直到第一个栈为空</span></span><br><span class="line"><span class="undefined">    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    postOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.unshift(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (treeNode.firstElementChild) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode.firstElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (treeNode.lastElementChild) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode.lastElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo: 单个栈的实现方法</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> stackTree = <span class="keyword">new</span> StackTree();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'stackTree'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 广度度优先遍历非递归</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">WidthTravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 队列</span></span></span><br><span class="line"><span class="undefined">    widthTravel(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.stack.push(node);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> item = <span class="keyword">this</span>.stack.shift();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.firstElementChild) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.nodeList.push(item.firstElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.stack.push(item.firstElementChild);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.lastElementChild) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.nodeList.push(item.lastElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.stack.push(item.lastElementChild)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'WidthTravelTree'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> widthTravelTree = <span class="keyword">new</span> WidthTravelTree();</span></span><br><span class="line"><span class="undefined">  widthTravelTree.widthTravel(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(widthTravelTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><ul><li>层序遍历<br><img src="each.png" alt="图">  </li></ul><h2 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h2><ul><li><a href="https://blog.51cto.com/9291927/2068745" target="_blank" rel="noopener">图片来源</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树-tree&quot;&gt;&lt;a href=&quot;#树-tree&quot; class=&quot;headerlink&quot; title=&quot;树 tree&quot;&gt;&lt;/a&gt;树 tree&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;树（tree）是n（n&amp;gt;=0）个节点的有限集合。&lt;/li&gt;
&lt;li&gt;当 n=0 时，称为空
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构基础</title>
    <link href="http://blog.bevexed.top/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.bevexed.top/2019/05/14/数据结构基础/</id>
    <published>2019-05-14T09:14:47.000Z</published>
    <updated>2019-05-15T08:55:59.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据的组织、管理和存储格式</li><li>提高数据的访问和修改效率<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li><li><p>线性结构</p><ul><li>数组、链表</li><li>栈、对、列、哈希表</li></ul></li><li><p>树</p><ul><li>二叉树</li><li>二叉堆</li></ul></li><li><p>图</p></li><li>其他数据结构<ul><li>跳表、哈希链表、位图、散列表</li></ul></li></ul><h2 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 array"></a>数组 <code>array</code></h2><ul><li>有限个相同类型变量组成的有序集合</li><li>数组中的每一个变量被称为元素</li><li>数组是最简单最为常用的数据结构</li><li>在内存中顺序存储</li><li>读取数组元素和更新数组元素的时间复杂度都是 O(1)</li><li>数组的插入和删除操作的时间复杂度为 O(n)</li><li>适用于读操作多，写操作少的情景</li></ul><h2 id="链表-link-list"><a href="#链表-link-list" class="headerlink" title="链表 link list"></a>链表 <code>link list</code></h2><ul><li>链表是一种物理上非连续、非顺序的数据结构，由若干个节点(node)组成</li><li>链表中的第一个节点叫做节点头，最后一个节点被称为节点尾，尾节点的 next 指针指向空</li><li>在内存中随机存储</li><li>链表查询节点的最坏时间复杂度为 O(n)</li><li>链表更新、插入、删除节点的时间复杂度为 O(1)<br>– 适用于写操作多，读操作少的情景<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3></li><li>单向链表的每一个节点包涵两部分<ul><li>一部分存放数据变量data</li><li>另一部分是指向下一个节点的指针 next</li></ul></li><li>一级一级，单线传递<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4></li><li>每一个节点都拥有 data，next指针 和 prev指针</li><li>双向传递</li></ul><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈 stack"></a>栈 <code>stack</code></h2><ul><li>一种线性数据结构</li><li>栈中元素只能先入后出（First In Last Out，简称 FILO）</li><li>最早进入的元素存放的位置叫栈底（bottom）</li><li>最后进入的元素存放的位置叫栈顶（top）</li><li>数据结构即可以用数组实现，也可以用链表实现<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3></li><li>入栈<ul><li>入栈操作（push）是把新元素放入栈中</li><li>只允许从栈顶一侧放入元素</li><li>新元素的位置成为新的栈顶</li></ul></li><li>出栈<ul><li>出栈操作（pop）是把元素从栈中弹出</li><li>只有栈顶元素才允许出栈</li><li>出栈元素的前一个元素会成为新的栈顶</li></ul></li><li>出栈和入栈的时间复杂度都是 O(1)<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3></li><li>历史回溯</li><li>面包屑导航</li></ul><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>一种线性的数据结构</li><li>队列中的元素先入先出（First In First Out，简称 FIFO）</li><li>队列的出口端叫做队头（front）</li><li>队列的入口端叫做队尾（rear）<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3></li><li>入队<ul><li>入队（queue）是把新元素放入队列中</li><li>只允许在队尾的位置放置新元素</li><li>新元素的下一个位置将会成为下一个队尾</li></ul></li><li>出队<ul><li>出队（dequeue）是把元素移出队列，</li><li>只允许在队头一侧移出元素</li><li>出队元素后的一个元素将成为队头</li><li>队列循环</li></ul></li><li>出队和入队的时间复杂度都是 O(1)<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3></li><li>多线程，争夺公平锁的等待队列</li></ul><h2 id="双端队列-deque"><a href="#双端队列-deque" class="headerlink" title="双端队列 deque"></a>双端队列 <code>deque</code></h2><ul><li>综合栈和队列的优缺点</li></ul><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><ul><li>基于二叉堆实现</li></ul><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul><li>也叫哈希表（hash table）</li><li>提供了键（key）和值（value）的映射关系</li><li>只要给出一个 key,就可以高效的查找他说匹配的 Value，时间复杂度接近于 O(1)</li><li>本质是数组，通过哈希函数转换<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3></li><li><p>写操作（put）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>如果下标对应的位置没有元素，将键值对插入到当前位置</li><li>当下标对应的位置已经存在元素，就会出现<code>哈希冲突</code><ul><li>哈希冲突的主要解决方式是<code>开放寻址法</code>和<code>链表法</code></li></ul></li></ol></li><li><p>读操作（get）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>通过在链表内匹配 key 值，寻找节点</li></ol></li><li><p>扩容（resize）</p><ul><li>原因<ol><li>当经过多次元素插入，散列表达到一定饱和度时，key 映射位置发生冲突的概率会逐渐提高</li><li>大量元素拥挤在相同的数组下标位置，会形成很长的链表，对后续的读写抄作有很大的性能影响</li><li>这时，散列表需要扩展他的长度</li></ol></li><li>过程<ol><li>扩容，创建一个新的 Entry 空数组，长度是原数组的2倍</li><li>重新Hash，遍历原 Entry 数组，把所有的 Entry 重新 Hash 到新数组中 </li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据的组织、管理和存储格式&lt;/li&gt;
&lt;li&gt;提高数据的访问和修改效率&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://blog.bevexed.top/2019/05/14/%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.bevexed.top/2019/05/14/算法/</id>
    <published>2019-05-14T08:04:30.000Z</published>
    <updated>2019-05-14T09:15:26.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法algorithm"><a href="#算法algorithm" class="headerlink" title="算法algorithm"></a>算法<code>algorithm</code></h1><ul><li>来自数学领域的一个古老概念。</li><li>在计算机领域里，指一系列程序指令，用于处理特定的运算和逻辑能力</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>有简单的也有复杂的</li><li>有高效的也有笨拙的</li></ul><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><ul><li>运算<ul><li>求两个数的最大公约数</li></ul></li><li>查找<ul><li>在数据库执行 SQL语句</li></ul></li><li>排序<ul><li>电商商品排序</li></ul></li><li>最优决策<ul><li>A星寻路算法</li></ul></li></ul><h2 id="算法好坏评判标准"><a href="#算法好坏评判标准" class="headerlink" title="算法好坏评判标准"></a>算法好坏评判标准</h2><p>其中算法好坏有很多标准，其中重要的两大标准是时间复杂度与空间复杂度</p><h3 id="渐进时间复杂度"><a href="#渐进时间复杂度" class="headerlink" title="渐进时间复杂度"></a>渐进时间复杂度</h3><ul><li>执行算法的时间成本</li><li>对算法运行时间长短的量度</li><li>若存在函数 f(n)，使得当 n 趋近于无穷大时，T(n)/f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作 T(n) = O(f(n))，称为 O(f(n))，O 为算法的渐进时间复杂度，简称为时间复杂度<h4 id="推导时间复杂度的基本原则"><a href="#推导时间复杂度的基本原则" class="headerlink" title="推导时间复杂度的基本原则"></a>推导时间复杂度的基本原则</h4></li><li>如果运行时间是常数量级，则用常数1表示</li><li>只保留时间函数中的最高阶项</li><li>如果最高阶项存在，则省去最高阶项前的系数<blockquote><p>当取值足够大时，O(1)&lt; O(logn)&lt; O(n)&lt; O(nlogn)&lt; O(n²)</p></blockquote></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>执行算法的空间成本</li><li>算法在运行过程中临时占用存储空间大小的度量</li><li>程序占用空间大小的计算公式记作 S(n)=O(f(n))，其中 n 为问题的规模，f(n)为算法所占存储空间的函数<h4 id="空间复杂度的计算"><a href="#空间复杂度的计算" class="headerlink" title="空间复杂度的计算"></a>空间复杂度的计算</h4></li><li><p>常量空间</p><ul><li>当算法的存储空间大小固定，和输入的规模没有直接的关系时，空间复杂度记作 O(1)</li></ul></li><li><p>线性空间</p><ul><li>当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模 成中比时，空间复杂度记作 O(n)</li></ul></li><li><p>二维空间</p><ul><li>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模 n 成正比时，空间复杂度记作 O(n²)</li></ul></li><li><p>递归空间</p><ul><li>递归算法的空间复杂度和递归深度成正比</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法algorithm&quot;&gt;&lt;a href=&quot;#算法algorithm&quot; class=&quot;headerlink&quot; title=&quot;算法algorithm&quot;&gt;&lt;/a&gt;算法&lt;code&gt;algorithm&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;来自数学领域的一个古老概念。&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Generator</title>
    <link href="http://blog.bevexed.top/2019/05/13/Generator/"/>
    <id>http://blog.bevexed.top/2019/05/13/Generator/</id>
    <published>2019-05-13T08:17:55.000Z</published>
    <updated>2019-06-12T01:47:32.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>Generator函数</code>是 ES6 提供的一种异步编程解决方案，语法行为与传统函数不同</li><li>语法上，可以将它理解成一个状态机，封装了多个内部状态</li><li>执行上，他是一个遍历器对象生成函数。<ul><li>执行 Generator函数 会返回一个遍历器对象，</li><li>返回的遍历器对象可以依次遍历Generator函数内部的每一个状态</li></ul></li><li><p>形式上，Generator函数是一个普通函数，但是有两个特征：</p><ol><li>function命令与函数名之间有一个星号</li><li>函数体内部使用 <code>yield</code> 语句来定义不同的内部状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 一个 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'he'</span>; <span class="comment">// 状态语句</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ll'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ow'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>; <span class="comment">// 结束语句</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> hw = hellow();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Generator函数的调用方法和普通函数一样。但是，</p><ol><li>调用后该函数不会执行</li><li>返回的不是函数运行的结果，而是一个指向内部状态的指针对象，也就是遍历器对象（Iterator Object）</li><li>必须调用对象的<code>next</code>方法，使指针移向下一个状态</li><li>每次调用<code>next</code>方法，会返回一个包函<code>value</code>和<code>done</code>两个属性的对象。<ul><li>value：内部状态值</li><li>done：布尔值 ，表示是否遍历结束</li></ul></li></ol></li></ul><h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p><code>yield语句</code>就是暂停标志</p><h3 id="next方法的运行逻辑"><a href="#next方法的运行逻辑" class="headerlink" title="next方法的运行逻辑"></a>next方法的运行逻辑</h3><ol><li>遇到<code>yield</code>就暂停执行后边的操作，并将紧跟其后的表达式的值作为返回对象的value属性值</li><li>下一次调用 <code>next方法</code> 时会继续向下执行，知道遇到下一条<code>yield语句</code></li><li>如果没有遇到新的<code>yield语句</code>就一直运行到函数结束，直到<code>return语句</code>为止，并将<code>return语句</code>后面表达式的值作为返回对象的value属性值</li><li>如果没有<code>return语句</code>则返回undefined</li></ol><h3 id="yield语句与return语句"><a href="#yield语句与return语句" class="headerlink" title="yield语句与return语句"></a>yield语句与return语句</h3><ul><li>两者都返回紧跟在语句后面的表达式的值</li><li>yield语句具有记忆功能，return语句不具有此功能</li><li>一个函数只能执行一次return语句，但是可以执行多条yield语句</li></ul><h3 id="暂缓执行函数"><a href="#暂缓执行函数" class="headerlink" title="暂缓执行函数"></a>暂缓执行函数</h3><p>当<code>Generator函数</code>不包含<code>yield语句</code>时，就变成了一个暂缓执行函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f(); <span class="comment">// 此时不执行</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  g.next()  <span class="comment">// 只有调用 next 以后才执行</span></span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>yield语句</code>只能用在<code>Generator函数</code>中，用在其他地方会报错</li><li>不可以用在 <code>forEach</code>等方法的回调函数内，可以使用for循环代替</li><li>yield表达式如果在另一个表达式中，必须放在圆括号内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>+(<span class="keyword">yield</span> <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yield表达式作为函数参数或放在赋值表达式的右边可以不加括号</li></ul><h2 id="与Generator接口的关系"><a href="#与Generator接口的关系" class="headerlink" title="与Generator接口的关系"></a>与Generator接口的关系</h2><ol><li>任意一个对象的<code>Symbol.iterator</code>方法等于该对像的遍历器对象生成函数，调用该函数会返回该对象的一个遍历器对象</li><li>由于<code>Generator函数</code>就是遍历器生成函数，所以可以把<code>Generator</code>赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有<code>Iterator接口</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myIterable = [];</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log([...myIterable]) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>Generator函数</code>执行后，返回一个遍历器对象。该对象本身也具有<code>Symbol.iterator</code>属性，执行后返回自身<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line"><span class="built_in">console</span>.log(g[<span class="built_in">Symbol</span>.iterator] === g); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h2><ul><li><code>yield语句</code>本身没有返回值，或者说总是返回<code>undefined</code></li><li>next 方法可以带有一个参数，该参数会被当做上一条 <code>yield语句</code>的返回值</li><li>由于 next 方法的参数表示上一条<code>yield语句</code>的返回值，所以第一次使用 next 方法时，传递参数是无效的</li><li>如果希望第一次调用 next 方法时能过输入值，可以在 <code>Generator函数</code> 外再包一层</li></ul><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><ul><li>for…of 循环可以自动遍历 <code>Generator函数</code> 生成的 Iterator 对象，且此时不需要调用 next 方法。</li><li>一旦 next 方法的返回对象的 done 属性为 true，for…of循环就会终止，且不包含返回的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 1 2 不包含 return语句返回的 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><ul><li><code>Generator函数</code>返回的遍历器对象都有一个 throw 方法，可以在函数体外抛出错误，然后再 Generator函数 内捕获；反过来，<code>Generator函数</code>体内抛出的错误也可以被函数体外的 catch 捕获</li><li>如果 <code>Generator函数</code> 内部没有部署 try…catch 代码块，那么 throw 方法抛出的错误将被外部的 try…catch 代码块捕获</li><li>如果 <code>Generator函数</code> 内部部署了 try…catch 代码块，那么遍历器的 throw 方法抛出的错误不影响下一次遍历，否则遍历会终止</li><li>一旦<code>Genertator函数</code>执行过程中抛出错误，就不会往下执行了，如果此后调用 next 方法，将返回 {value: undefined, done: true} 这个对象</li><li>throw 方法执行后会附带执行下一条 yield 表达式，即附带执行一次 next 方法</li><li>throw 命令与 Generator.prototype.throw()方法互不影响<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> ;</span><br><span class="line">  &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>,e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><ul><li>该方法返回给定的值,并终结<code>Generator函数</code>的遍历</li><li><p>如果不提供参数，则返回值的 value 属性为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123;value: 1, done &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>); <span class="comment">// &#123;value: 'foo', done: true&#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123;value: undefined, deone: true&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果<code>Generator函数</code>内部有 try…finally 代码块，那么 return 方法会推迟到 finally 代码块执行完成在执行</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 2, done: false&#125;</span></span><br><span class="line">g.return(); <span class="comment">// &#123; value: 4, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 5, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 7, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h2><ul><li><p>如果在一个<code>Generator函数</code>内调用另一个<code>Generator函数</code>，默认情况下是没有效果的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'b'</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// a 和 b 都是 Generator函数 在b中调用a不会生效</span></span><br></pre></td></tr></table></figure></li><li><p><code>yield*</code>，用来在一个<code>Generator函数</code>里执行另一个<code>Generator函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'a' 'b'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 yield 命令后面跟的是一个遍历器对象，那么需要在 yield 命令后面加上星号，表明返回的是一个遍历器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span> inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'colse'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = outer1();</span><br><span class="line">gen.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen.next().value; <span class="comment">// 返回一个遍历器对象</span></span><br><span class="line">gen.next().value; <span class="comment">// 'colse'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'close'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen2 = outer2();</span><br><span class="line">gen2.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'close'</span></span><br></pre></td></tr></table></figure></li><li><p>yield* 后面的<code>Generator语句</code>没有 return 语句时等同于在<code>Generator函数</code>内部部署了一个 <code>for...of</code> 循环</p></li><li>yield<em> 后面的<code>Generator语句</code>有 return 语句时，需要用 `let value = yield</em> iterator` 的形式获取 return语句的值</li><li>如果被代理的<code>Generator语句</code>有 return 语句，那么可以向代理他的<code>Generator函数</code>返回数据</li><li>任何数据只要有<code>Iterator</code>接口，就可以被<code>yield*</code>遍历<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="string">'he'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">a.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">a.next().value; <span class="comment">// 'h'</span></span><br><span class="line">a.next().value; <span class="comment">// 'e'</span></span><br><span class="line">a.next().value; <span class="comment">// '1'</span></span><br><span class="line">a.next().value; <span class="comment">// '2'</span></span><br><span class="line">a.next().value; <span class="comment">// '3'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>异步操作的同步化表达</li><li>控制流管理</li><li>部署 <code>Iterator</code> 接口</li><li>作为数据结构</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Generator函数&lt;/code&gt;是 ES6 提供的一种异步编程解决方案，语法行为与传统函数不同&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.bevexed.top/categories/JavaScript/"/>
    
    
      <category term="异步" scheme="http://blog.bevexed.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
</feed>
