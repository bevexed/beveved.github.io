<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bev</title>
  
  <subtitle>Daily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.bevexed.top/"/>
  <updated>2019-07-30T08:28:03.586Z</updated>
  <id>http://blog.bevexed.top/</id>
  
  <author>
    <name>bev</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack搭建简单环境</title>
    <link href="http://blog.bevexed.top/2019/07/30/webpack%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://blog.bevexed.top/2019/07/30/webpack搭建简单环境/</id>
    <published>2019-07-30T07:22:57.000Z</published>
    <updated>2019-07-30T08:28:03.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化-npm"><a href="#初始化-npm" class="headerlink" title="初始化 npm"></a>初始化 npm</h2><blockquote><p>npm init</p></blockquote><h2 id="安装-webpack、webpack-cli"><a href="#安装-webpack、webpack-cli" class="headerlink" title="安装 webpack、webpack-cli"></a>安装 webpack、webpack-cli</h2><blockquote><p>npm i webpack webpack-cli -S</p></blockquote><h2 id="新建-webpack-dev-config-js"><a href="#新建-webpack-dev-config-js" class="headerlink" title="新建 webpack.dev.config.js"></a>新建 webpack.dev.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="新建-src-目录"><a href="#新建-src-目录" class="headerlink" title="新建 src 目录"></a>新建 src 目录</h2><ul><li>src<ul><li>index.js</li></ul></li><li>index.html</li></ul><h2 id="在-package-json-配置"><a href="#在-package-json-配置" class="headerlink" title="在 package.json 配置"></a>在 package.json 配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">      <span class="attr">"test"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"dev"</span>: <span class="string">"webpack --config ./webpack.dev.config --mode development"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>webpack-dev-server </li><li>html-webpack-plugin<blockquote><p>npm i webpack-dev-server html-webpack-plugin -S</p></blockquote></li></ul><h2 id="修改-webpack-dev-config-js"><a href="#修改-webpack-dev-config-js" class="headerlink" title="修改 webpack.dev.config.js"></a>修改 webpack.dev.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname,<span class="string">'./release'</span>), <span class="comment">//根目录</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">9000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h2><blockquote><p>“dev”: “webpack-dev-server –config ./webpack.dev.config –mode development”</p></blockquote><h2 id="安装-babel-解析-ES6"><a href="#安装-babel-解析-ES6" class="headerlink" title="安装 babel 解析 ES6"></a>安装 babel 解析 ES6</h2><ul><li>babel-core</li><li>babel-loader</li><li>babel-polyfill</li><li>babel-preset-env</li><li>babel-preset-latest<blockquote><p>npm i babel-core babel-loader babel-polyfill babel-preset-env babel-preset-latest -S</p></blockquote></li></ul><h2 id="新建-babelrc"><a href="#新建-babelrc" class="headerlink" title="新建 .babelrc"></a>新建 .babelrc</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"latest"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-webpack-dev-config-中配置-loader"><a href="#在-webpack-dev-config-中配置-loader" class="headerlink" title="在 webpack.dev.config 中配置 loader"></a>在 webpack.dev.config 中配置 loader</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js?$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">      loader: <span class="string">'babel-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初始化-npm&quot;&gt;&lt;a href=&quot;#初始化-npm&quot; class=&quot;headerlink&quot; title=&quot;初始化 npm&quot;&gt;&lt;/a&gt;初始化 npm&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装
      
    
    </summary>
    
      <category term="构建工具" scheme="http://blog.bevexed.top/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://blog.bevexed.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式（面向对象）</title>
    <link href="http://blog.bevexed.top/2019/07/30/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>http://blog.bevexed.top/2019/07/30/前端设计模式（面向对象）/</id>
    <published>2019-07-30T07:10:25.000Z</published>
    <updated>2019-08-19T02:21:56.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>学会设计模式，可以帮你写更好的代码</li><li>编程应该 <strong>简单、抽象</strong></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>数据结构化</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>类：模板</li><li>对象：实例</li></ul><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul><li>继承 <ul><li>继承可以将公共方法抽离出来，提高复用，减少冗余</li></ul></li><li>封装（ES6不支持，ts 支持）<ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开放</li><li>减少耦合，不该外露不外露</li><li>利于数据、接口的权限管理</li></ul></li><li>多态 <ul><li>同一个接口不同，不同表现</li><li>JS 应用极少</li><li>保持子类的开放性和灵活性</li><li>面向接口编程</li></ul></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector)&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   append(node)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age= age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat()&#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  speak()&#123;</span><br><span class="line">    alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'webPack'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alert(p.getName())</span><br><span class="line"></span><br><span class="line">p.eat()</span><br><span class="line">p.speak()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age);</span><br><span class="line">    <span class="keyword">this</span>.number = number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  study() &#123;</span><br><span class="line">    alert(<span class="string">`学号：<span class="subst">$&#123; <span class="keyword">this</span>.number &#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Student(<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">w.study();</span><br><span class="line">w.eat();</span><br><span class="line">w.speak();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;学会设计模式，可以帮你写更好的代码&lt;/li&gt;
&lt;li&gt;编程应该 &lt;strong&gt;简单、抽象&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.bevexed.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.bevexed.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP</title>
    <link href="http://blog.bevexed.top/2019/07/16/TCP-IP/"/>
    <id>http://blog.bevexed.top/2019/07/16/TCP-IP/</id>
    <published>2019-07-16T04:56:06.000Z</published>
    <updated>2019-07-16T05:29:44.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><ul><li>大多数的网络应用程序都被设计成了 <strong>客户端 - 服务器</strong> 模式</li><li>双方都有对应的 <strong>一或多个</strong> 协议进行通讯</li><li>链路层、网络层、运输层 一般在<strong>内核</strong>中执行，应用程序通常是用户进程</li><li>链路层、网络层、运输层 关注<strong>通讯</strong>细节</li><li>应用层 关注<strong>应用程序</strong></li><li>应用层和运输层使用端到端（end-to-end）协议<br>-</li></ul><h2 id="链路层（以太网-ARP-硬件接口）"><a href="#链路层（以太网-ARP-硬件接口）" class="headerlink" title="链路层（以太网/ARP/硬件接口）"></a>链路层（以太网/ARP/硬件接口）</h2><p>处理与电缆（或其他任何传输媒介）的物理接口细节</p><h2 id="网络层（IP-ICMP-IGMP）"><a href="#网络层（IP-ICMP-IGMP）" class="headerlink" title="网络层（IP/ICMP/IGMP）"></a>网络层（IP/ICMP/IGMP）</h2><p>处理分组在网络中的活动，例如分组选路</p><ul><li>提供逐跳协议（hop-to-hop）</li><li>网络ip提供的是一种不可靠的服务，他只是尽可能快的把分组从源结点送到目的结点，但不提供可靠性保障</li><li>ICMP 是 IP 协议的附属协议（告诉你出问题的原因）</li></ul><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><h2 id="运输层（TCP-UDP）"><a href="#运输层（TCP-UDP）" class="headerlink" title="运输层（TCP/UDP）"></a>运输层（TCP/UDP）</h2><p>为两台主机上的应用程序提供端到端的通讯</p><ul><li>TCP 在不可靠的IP层上提供了一个可靠的运输层</li><li>UDP 不可靠</li></ul><h2 id="应用层（FTP）"><a href="#应用层（FTP）" class="headerlink" title="应用层（FTP）"></a>应用层（FTP）</h2><p>处理特定的应用程序细节</p><ul><li>互联网的目的之一就是在应用程序中隐藏所有的物理细节</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分层&quot;&gt;&lt;a href=&quot;#分层&quot; class=&quot;headerlink&quot; title=&quot;分层&quot;&gt;&lt;/a&gt;分层&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;大多数的网络应用程序都被设计成了 &lt;strong&gt;客户端 - 服务器&lt;/strong&gt; 模式&lt;/li&gt;
&lt;li&gt;双方都有对应的 
      
    
    </summary>
    
      <category term="网络基础" scheme="http://blog.bevexed.top/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="http://blog.bevexed.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆</title>
    <link href="http://blog.bevexed.top/2019/06/13/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <id>http://blog.bevexed.top/2019/06/13/二叉堆/</id>
    <published>2019-06-13T05:55:15.000Z</published>
    <updated>2019-06-13T10:15:10.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><ul><li>本质是一种 <strong>完全二叉树</strong></li><li>有 <strong>最小堆</strong> 和 <strong>最大堆</strong> 两种</li><li>二叉堆的根节点叫做 <strong>堆顶</strong></li><li>最大堆的堆顶是整个堆中的 <strong>最大元素</strong></li><li>最小堆的堆顶是整个堆中的 <strong>最小元素</strong></li></ul><h2 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>大于或等于</strong> 它左、右孩子节点的值</p><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>小于或等于</strong> 它左、右孩子节点的值</p><h2 id="二叉堆的自我调整"><a href="#二叉堆的自我调整" class="headerlink" title="二叉堆的自我调整"></a>二叉堆的自我调整</h2><p>把一个不符合堆性质的完全二叉树，调整成一个堆，操作有</p><ul><li>插入节点</li><li>删除节点</li><li>构建二叉堆</li></ul><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ol><li>二叉堆插入节点时，插入位置是完全二叉树的 <strong>最后</strong> 一个位置</li><li>新节点通过与父节点比较位置和 <strong>上浮</strong> 来确认节点的位置</li></ol><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol><li>二叉堆删除的是 <strong>堆顶</strong> 的节点</li><li>此时为了维持二叉堆的结构，需要用 <strong>最后一个</strong> 节点临时补充到堆顶的位置</li><li>通过 <strong>下沉</strong> 来确认节点的位置</li></ol><h3 id="构建二叉堆"><a href="#构建二叉堆" class="headerlink" title="构建二叉堆"></a>构建二叉堆</h3><ul><li>通过所有子叶 <strong>下沉</strong> 实现</li><li>下沉从最后一个节点开始</li><li>二叉堆的所有节点都存储在 <strong>数组</strong> 中</li><li>如果父节点的下标是 <strong>parent</strong>，则左孩子的下标为 <strong>2 * parent + 1</strong>，右孩子的下标为 <strong>2 * parent + 2</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉堆&quot;&gt;&lt;a href=&quot;#二叉堆&quot; class=&quot;headerlink&quot; title=&quot;二叉堆&quot;&gt;&lt;/a&gt;二叉堆&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本质是一种 &lt;strong&gt;完全二叉树&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有 &lt;strong&gt;最小堆&lt;/strong&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.bevexed.top/2019/06/13/%E6%A0%91/exercise/"/>
    <id>http://blog.bevexed.top/2019/06/13/树/exercise/</id>
    <published>2019-06-13T05:44:01.337Z</published>
    <updated>2019-06-13T05:44:01.352Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Binary Tree</title>  <style>    .root {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .root div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }  </style></head><body><div class="root">  1  <div>2    <div>4</div>    <div>5</div>  </div>  <div>3    <div>6</div>    <div>7</div>  </div></div></body><script>  /**   * 深度优先遍历的递归写法   * 原理：递归的回溯性   */  class TravelTree {    constructor() {      this.nodeList = [];    }    preOrder = node => {      if (node) {        this.nodeList.push(node.firstChild.textContent.trim());        this.preOrder(node.firstElementChild);        this.preOrder(node.lastElementChild);      }    };    inOrder = node => {      if (node) {        this.inOrder(node.firstElementChild);        this.nodeList.push(node.firstChild.textContent.trim());        this.inOrder(node.lastElementChild);      }    };    postOrder = node => {      if (node) {        this.postOrder(node.firstElementChild);        this.postOrder(node.lastElementChild);        this.nodeList.push(node.firstChild.textContent.trim());      }    };    reset() {      this.nodeList = [];    }  }  let node = document.querySelector('.root');  let tree = new TravelTree();  console.log('TravelTree');  tree.reset();  tree.preOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.inOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.postOrder(node);  console.log(tree.nodeList);  // 深度优先遍历的非递归写法  class StackTree {    constructor() {      this.nodeList = [];      this.stack = []    }    preOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        // 进栈 将所有左节点压栈        while (treeNode) {          this.stack.push(treeNode);          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.firstElementChild;        }        // 出栈        if (this.stack.length) {          treeNode = this.stack.pop();          treeNode = treeNode.lastElementChild;        }      }    }    inOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        while (treeNode) {          this.stack.push(treeNode);          treeNode = treeNode.firstElementChild;        }        if (this.stack.length) {          treeNode = this.stack.pop();          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.lastElementChild;        }      }    }    /*    *  将根节点压入第一个栈    *  从第一个栈中弹出一个元素，压入第二个栈    *  然后分别将该节点的左右孩子压入第一个栈    *  重复步骤2和步骤3直到第一个栈为空    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。    */    postOrder(node) {      let treeNode = node;      this.stack.push(treeNode);      while (this.stack.length) {        treeNode = this.stack.pop();        this.nodeList.unshift(treeNode.firstChild.textContent.trim());        if (treeNode.firstElementChild) {          this.stack.push(treeNode.firstElementChild)        }        if (treeNode.lastElementChild) {          this.stack.push(treeNode.lastElementChild)        }      }    }    reset() {      this.stack = [];      this.nodeList = [];    }  }  let stackTree = new StackTree();  console.log('stackTree');  stackTree.preOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.inOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.postOrder(node);  console.log(stackTree.nodeList);  // 广度度优先遍历非递归  class WidthTravelTree {    constructor() {      this.nodeList = [];      this.stack = []    }    // 队列    widthTravel(node) {      if (node) {        this.stack.push(node);        this.nodeList.push(node.firstChild.textContent.trim());        while (this.stack.length) {          let item = this.stack.shift();          if (item.firstElementChild) {            this.nodeList.push(item.firstElementChild.firstChild.textContent.trim());            this.stack.push(item.firstElementChild);          }          if (item.lastElementChild) {            this.nodeList.push(item.lastElementChild.firstChild.textContent.trim());            this.stack.push(item.lastElementChild)          }        }      }    }  }  console.log('WidthTravelTree');  let widthTravelTree = new WidthTravelTree();  widthTravelTree.widthTravel(node);  console.log(widthTravelTree.nodeList);</script></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Binary Tree&lt;/title&gt;
  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.bevexed.top/2019/06/10/%E6%A0%91/demo/"/>
    <id>http://blog.bevexed.top/2019/06/10/树/demo/</id>
    <published>2019-06-10T09:21:29.548Z</published>
    <updated>2019-06-11T09:18:56.233Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html lang=""><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Document</title>  <style>    * {      margin: 0;      padding: 0;    }    .wrap {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .wrap div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }    .btn-wrap {      text-align: center;      padding-top: 20px;    }    .btn-wrap button {      display: inline-block;      padding: 4px 10px;    }  </style></head><body><div class="wrap">  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div>  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div></div><div class="btn-wrap">  <button>前序</button>  <button>中序</button>  <button>后序</button></div><script>  let wrap = document.querySelector(".wrap");  let btn_wrap = document.querySelector(".btn-wrap");  let btn1 = btn_wrap.querySelectorAll("button")[0];  let btn2 = btn_wrap.querySelectorAll("button")[1];  let btn3 = btn_wrap.querySelectorAll("button")[2];  let arr = [];  let last;  let toggle = false;  //给按钮绑定事件  btn1.onclick = function () {    if (!toggle) {      toggle = true;      reset();      preOrder(wrap);      showWay();    }  };  btn2.onclick = function () {    if (!toggle) {      toggle = true;      reset();      inOrder(wrap);      showWay();    }  };  btn3.onclick = function () {    if (!toggle) {      toggle = true;      reset();      postOrder(wrap);      showWay();    }  };  //二叉树的遍历的三种方式  //(1)前序遍历（DLR)  function preOrder(node) {    if (node) {      arr.push(node);      preOrder(node.firstElementChild);      preOrder(node.lastElementChild);    }  }  //(2)中序遍历（LDR）  function inOrder(node) {    if (node) {      inOrder(node.firstElementChild);      arr.push(node);      inOrder(node.lastElementChild);    }  }  //(3)后序遍历（LRD）  function postOrder(node) {    if (node) {      postOrder(node.firstElementChild);      postOrder(node.lastElementChild);      arr.push(node);    }  }  //显示遍历的过程  function showWay() {    for (let i = 0; i < arr.length; i++) {      setTimeout(function (i) {        return function () {          if (i === arr.length - 1) {            toggle = false;          }          if (last) {            last.style.background = "white";          }          arr[i].style.background = "red";          last = arr[i];        }      }(i), i * 1000)    }  }  //初始化  function reset() {    arr = [];    if (last) {      last.style.background = "white";    }  }</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&quot;&gt;
&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;styl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="http://blog.bevexed.top/2019/05/15/%E6%A0%91/"/>
    <id>http://blog.bevexed.top/2019/05/15/树/</id>
    <published>2019-05-15T09:11:36.000Z</published>
    <updated>2019-06-13T09:53:11.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树-tree"><a href="#树-tree" class="headerlink" title="树 tree"></a>树 tree</h1><ul><li>树（tree）是n（n&gt;=0）个节点的有限集合。</li><li>当 n=0 时，称为空树</li><li>在任意一个非空树中有如下特点<ul><li>有且仅有一个特定的称为 <strong>根（root）</strong> 的节点</li><li>当 n&gt;1 时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，称为根的 <strong>子树</strong></li><li>节点的末端，叫做 <strong>叶子节点（leaf）</strong></li></ul></li></ul><p><img src="tree.png" alt="例图"></p><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><ul><li>树的一种特殊结构</li><li>每个节点最多有两个子节点</li><li>二叉树节点的两个孩子节点，一个被称为 <strong>左孩子（left child）</strong>，一个被称为 <strong>右孩子（right child）</strong><ul><li>这两个孩子顺序固定，不可颠倒</li></ul></li><li>存储结构<ul><li>链式存储结构</li><li>数组</li></ul></li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><ul><li>一个二叉树的所有非叶子节点都存在左右孩子</li><li>所有叶子节点都在同一层级上</li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul><li>对一个有 n 个节点的二叉树，按层级顺序编号，则所有节点的编号为从 1 到 n 。如果这个树所有节点和同样深度的满二叉树的编号为从 1 到 n 的节点位置相同，则这个二叉树为完全二叉树</li></ul><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><ul><li>也叫二叉排序树</li><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子树也是二叉树查找</li><li>对于一个 <strong>节点分布相对均衡</strong> 的二叉查找树来说，如果节点总数是 <strong>n</strong>，那么搜索节点的时间复杂度为 <strong>O(logn)</strong>,和数的深度一样</li><li>二叉树的自平衡</li></ul><h3 id="二叉树与存储结构"><a href="#二叉树与存储结构" class="headerlink" title="二叉树与存储结构"></a>二叉树与存储结构</h3><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p>二叉树的每一个节点由三部分组成</p><ul><li>存储数据的 data 变量</li><li>指向左孩子的 left 指针</li><li>指向右孩子的 right 指针</li></ul><h4 id="数组存储结构"><a href="#数组存储结构" class="headerlink" title="数组存储结构"></a>数组存储结构</h4><ul><li>按照层级顺序把二叉树的节点放到数组的对应位置上</li><li>如果某一节点的左孩子或右孩子空缺，则数组的相应位置也空出来</li><li>假设一个父节点的下标为 <strong>parent</strong>，那么它的左孩子的下标为 <strong>2 * parent + 1</strong>，它的右孩子的下标为 <strong>2 * parent + 2</strong></li><li>假设一个左孩子的下标为 <strong>leftChilde</strong> ，那么他的父节点的下标为 <strong>(leftChild - 1) / 2</strong></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="二叉查找树（binary-search-tree）"><a href="#二叉查找树（binary-search-tree）" class="headerlink" title="二叉查找树（binary search tree）"></a>二叉查找树（binary search tree）</h4><p>二叉查找树在二叉树的基础上增加了以下条件</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子叶也是二叉树查找</li><li>时间复杂度 O(logn), n 为树的深度</li></ul><h4 id="维持相对顺序"><a href="#维持相对顺序" class="headerlink" title="维持相对顺序"></a>维持相对顺序</h4><ul><li>二叉查找树的左子树小于父节点，右子树大于父节点，保证了二叉树的有序性</li></ul><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><p>将 <strong>非线性的数据结构</strong> 转换成 <strong>线性的序列</strong></p><h4 id="深度优先遍历-demo"><a href="#深度优先遍历-demo" class="headerlink" title="深度优先遍历 (demo)"></a>深度优先遍历 (<a href="demo.html">demo</a>)</h4><p>偏向于深度，<strong>一头扎到底</strong>的访问方式</p><h5 id="前序遍历（DLR"><a href="#前序遍历（DLR" class="headerlink" title="前序遍历（DLR)"></a>前序遍历（DLR)</h5><ul><li>过程</li></ul><ol><li>先访问 <strong>根节点</strong></li><li>遍历 <strong>左子树</strong></li><li>遍历 <strong>右子树</strong></li></ol><ul><li>结果 : ABDECF</li></ul><h5 id="中序遍历（LDR）"><a href="#中序遍历（LDR）" class="headerlink" title="中序遍历（LDR）"></a>中序遍历（LDR）</h5><ul><li>过程<br>左 根 右</li><li>结果 : DBEACF</li></ul><h5 id="后序遍历（LRD）"><a href="#后序遍历（LRD）" class="headerlink" title="后序遍历（LRD）"></a>后序遍历（LRD）</h5><ul><li>过程<br>左 右 根</li><li>结果 ： DEBFCA</li></ul><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Binary Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .root &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      width: 600px;</span></span><br><span class="line"><span class="undefined">      margin: 0 auto;</span></span><br><span class="line"><span class="undefined">      height: 150px;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .root div &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      height: 70%;</span></span><br><span class="line"><span class="undefined">      width: 44%;</span></span><br><span class="line"><span class="undefined">      margin: 0 3%;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      background: #fff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">  1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 深度优先遍历的递归写法</span></span><br><span class="line"><span class="undefined">   * 原理：递归的回溯性</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">TravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    preOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.preOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.preOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    inOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.inOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.inOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    postOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.postOrder(node.firstElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.postOrder(node.lastElementChild);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.root'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> tree = <span class="keyword">new</span> TravelTree();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'TravelTree'</span>);</span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 深度优先遍历的非递归写法</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">StackTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    preOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 进栈 将所有左节点压栈</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 出栈</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    inOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    *  将根节点压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  从第一个栈中弹出一个元素，压入第二个栈</span></span><br><span class="line"><span class="undefined">    *  然后分别将该节点的左右孩子压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  重复步骤2和步骤3直到第一个栈为空</span></span><br><span class="line"><span class="undefined">    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    postOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">        treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.unshift(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (treeNode.firstElementChild) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode.firstElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (treeNode.lastElementChild) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.stack.push(treeNode.lastElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// todo: 单个栈的实现方法</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> stackTree = <span class="keyword">new</span> StackTree();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'stackTree'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 广度度优先遍历非递归</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">WidthTravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 队列</span></span></span><br><span class="line"><span class="undefined">    widthTravel(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.stack.push(node);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> item = <span class="keyword">this</span>.stack.shift();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.firstElementChild) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.nodeList.push(item.firstElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.stack.push(item.firstElementChild);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.lastElementChild) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.nodeList.push(item.lastElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.stack.push(item.lastElementChild)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'WidthTravelTree'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> widthTravelTree = <span class="keyword">new</span> WidthTravelTree();</span></span><br><span class="line"><span class="undefined">  widthTravelTree.widthTravel(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(widthTravelTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><ul><li>层序遍历<br><img src="each.png" alt="图">  </li></ul><h2 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h2><ul><li><a href="https://blog.51cto.com/9291927/2068745" target="_blank" rel="noopener">图片来源</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树-tree&quot;&gt;&lt;a href=&quot;#树-tree&quot; class=&quot;headerlink&quot; title=&quot;树 tree&quot;&gt;&lt;/a&gt;树 tree&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;树（tree）是n（n&amp;gt;=0）个节点的有限集合。&lt;/li&gt;
&lt;li&gt;当 n=0 时，称为空
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构基础</title>
    <link href="http://blog.bevexed.top/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.bevexed.top/2019/05/14/数据结构基础/</id>
    <published>2019-05-14T09:14:47.000Z</published>
    <updated>2019-05-15T08:55:59.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据的组织、管理和存储格式</li><li>提高数据的访问和修改效率<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li><li><p>线性结构</p><ul><li>数组、链表</li><li>栈、对、列、哈希表</li></ul></li><li><p>树</p><ul><li>二叉树</li><li>二叉堆</li></ul></li><li><p>图</p></li><li>其他数据结构<ul><li>跳表、哈希链表、位图、散列表</li></ul></li></ul><h2 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 array"></a>数组 <code>array</code></h2><ul><li>有限个相同类型变量组成的有序集合</li><li>数组中的每一个变量被称为元素</li><li>数组是最简单最为常用的数据结构</li><li>在内存中顺序存储</li><li>读取数组元素和更新数组元素的时间复杂度都是 O(1)</li><li>数组的插入和删除操作的时间复杂度为 O(n)</li><li>适用于读操作多，写操作少的情景</li></ul><h2 id="链表-link-list"><a href="#链表-link-list" class="headerlink" title="链表 link list"></a>链表 <code>link list</code></h2><ul><li>链表是一种物理上非连续、非顺序的数据结构，由若干个节点(node)组成</li><li>链表中的第一个节点叫做节点头，最后一个节点被称为节点尾，尾节点的 next 指针指向空</li><li>在内存中随机存储</li><li>链表查询节点的最坏时间复杂度为 O(n)</li><li>链表更新、插入、删除节点的时间复杂度为 O(1)<br>– 适用于写操作多，读操作少的情景<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3></li><li>单向链表的每一个节点包涵两部分<ul><li>一部分存放数据变量data</li><li>另一部分是指向下一个节点的指针 next</li></ul></li><li>一级一级，单线传递<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4></li><li>每一个节点都拥有 data，next指针 和 prev指针</li><li>双向传递</li></ul><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈 stack"></a>栈 <code>stack</code></h2><ul><li>一种线性数据结构</li><li>栈中元素只能先入后出（First In Last Out，简称 FILO）</li><li>最早进入的元素存放的位置叫栈底（bottom）</li><li>最后进入的元素存放的位置叫栈顶（top）</li><li>数据结构即可以用数组实现，也可以用链表实现<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3></li><li>入栈<ul><li>入栈操作（push）是把新元素放入栈中</li><li>只允许从栈顶一侧放入元素</li><li>新元素的位置成为新的栈顶</li></ul></li><li>出栈<ul><li>出栈操作（pop）是把元素从栈中弹出</li><li>只有栈顶元素才允许出栈</li><li>出栈元素的前一个元素会成为新的栈顶</li></ul></li><li>出栈和入栈的时间复杂度都是 O(1)<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3></li><li>历史回溯</li><li>面包屑导航</li></ul><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>一种线性的数据结构</li><li>队列中的元素先入先出（First In First Out，简称 FIFO）</li><li>队列的出口端叫做队头（front）</li><li>队列的入口端叫做队尾（rear）<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3></li><li>入队<ul><li>入队（queue）是把新元素放入队列中</li><li>只允许在队尾的位置放置新元素</li><li>新元素的下一个位置将会成为下一个队尾</li></ul></li><li>出队<ul><li>出队（dequeue）是把元素移出队列，</li><li>只允许在队头一侧移出元素</li><li>出队元素后的一个元素将成为队头</li><li>队列循环</li></ul></li><li>出队和入队的时间复杂度都是 O(1)<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3></li><li>多线程，争夺公平锁的等待队列</li></ul><h2 id="双端队列-deque"><a href="#双端队列-deque" class="headerlink" title="双端队列 deque"></a>双端队列 <code>deque</code></h2><ul><li>综合栈和队列的优缺点</li></ul><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><ul><li>基于二叉堆实现</li></ul><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul><li>也叫哈希表（hash table）</li><li>提供了键（key）和值（value）的映射关系</li><li>只要给出一个 key,就可以高效的查找他说匹配的 Value，时间复杂度接近于 O(1)</li><li>本质是数组，通过哈希函数转换<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3></li><li><p>写操作（put）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>如果下标对应的位置没有元素，将键值对插入到当前位置</li><li>当下标对应的位置已经存在元素，就会出现<code>哈希冲突</code><ul><li>哈希冲突的主要解决方式是<code>开放寻址法</code>和<code>链表法</code></li></ul></li></ol></li><li><p>读操作（get）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>通过在链表内匹配 key 值，寻找节点</li></ol></li><li><p>扩容（resize）</p><ul><li>原因<ol><li>当经过多次元素插入，散列表达到一定饱和度时，key 映射位置发生冲突的概率会逐渐提高</li><li>大量元素拥挤在相同的数组下标位置，会形成很长的链表，对后续的读写抄作有很大的性能影响</li><li>这时，散列表需要扩展他的长度</li></ol></li><li>过程<ol><li>扩容，创建一个新的 Entry 空数组，长度是原数组的2倍</li><li>重新Hash，遍历原 Entry 数组，把所有的 Entry 重新 Hash 到新数组中 </li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据的组织、管理和存储格式&lt;/li&gt;
&lt;li&gt;提高数据的访问和修改效率&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="http://blog.bevexed.top/2019/05/14/%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.bevexed.top/2019/05/14/算法/</id>
    <published>2019-05-14T08:04:30.000Z</published>
    <updated>2019-05-14T09:15:26.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法algorithm"><a href="#算法algorithm" class="headerlink" title="算法algorithm"></a>算法<code>algorithm</code></h1><ul><li>来自数学领域的一个古老概念。</li><li>在计算机领域里，指一系列程序指令，用于处理特定的运算和逻辑能力</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>有简单的也有复杂的</li><li>有高效的也有笨拙的</li></ul><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><ul><li>运算<ul><li>求两个数的最大公约数</li></ul></li><li>查找<ul><li>在数据库执行 SQL语句</li></ul></li><li>排序<ul><li>电商商品排序</li></ul></li><li>最优决策<ul><li>A星寻路算法</li></ul></li></ul><h2 id="算法好坏评判标准"><a href="#算法好坏评判标准" class="headerlink" title="算法好坏评判标准"></a>算法好坏评判标准</h2><p>其中算法好坏有很多标准，其中重要的两大标准是时间复杂度与空间复杂度</p><h3 id="渐进时间复杂度"><a href="#渐进时间复杂度" class="headerlink" title="渐进时间复杂度"></a>渐进时间复杂度</h3><ul><li>执行算法的时间成本</li><li>对算法运行时间长短的量度</li><li>若存在函数 f(n)，使得当 n 趋近于无穷大时，T(n)/f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作 T(n) = O(f(n))，称为 O(f(n))，O 为算法的渐进时间复杂度，简称为时间复杂度<h4 id="推导时间复杂度的基本原则"><a href="#推导时间复杂度的基本原则" class="headerlink" title="推导时间复杂度的基本原则"></a>推导时间复杂度的基本原则</h4></li><li>如果运行时间是常数量级，则用常数1表示</li><li>只保留时间函数中的最高阶项</li><li>如果最高阶项存在，则省去最高阶项前的系数<blockquote><p>当取值足够大时，O(1)&lt; O(logn)&lt; O(n)&lt; O(nlogn)&lt; O(n²)</p></blockquote></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>执行算法的空间成本</li><li>算法在运行过程中临时占用存储空间大小的度量</li><li>程序占用空间大小的计算公式记作 S(n)=O(f(n))，其中 n 为问题的规模，f(n)为算法所占存储空间的函数<h4 id="空间复杂度的计算"><a href="#空间复杂度的计算" class="headerlink" title="空间复杂度的计算"></a>空间复杂度的计算</h4></li><li><p>常量空间</p><ul><li>当算法的存储空间大小固定，和输入的规模没有直接的关系时，空间复杂度记作 O(1)</li></ul></li><li><p>线性空间</p><ul><li>当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模 成中比时，空间复杂度记作 O(n)</li></ul></li><li><p>二维空间</p><ul><li>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模 n 成正比时，空间复杂度记作 O(n²)</li></ul></li><li><p>递归空间</p><ul><li>递归算法的空间复杂度和递归深度成正比</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法algorithm&quot;&gt;&lt;a href=&quot;#算法algorithm&quot; class=&quot;headerlink&quot; title=&quot;算法algorithm&quot;&gt;&lt;/a&gt;算法&lt;code&gt;algorithm&lt;/code&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;来自数学领域的一个古老概念。&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.bevexed.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Generator</title>
    <link href="http://blog.bevexed.top/2019/05/13/Generator/"/>
    <id>http://blog.bevexed.top/2019/05/13/Generator/</id>
    <published>2019-05-13T08:17:55.000Z</published>
    <updated>2019-06-12T01:47:32.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>Generator函数</code>是 ES6 提供的一种异步编程解决方案，语法行为与传统函数不同</li><li>语法上，可以将它理解成一个状态机，封装了多个内部状态</li><li>执行上，他是一个遍历器对象生成函数。<ul><li>执行 Generator函数 会返回一个遍历器对象，</li><li>返回的遍历器对象可以依次遍历Generator函数内部的每一个状态</li></ul></li><li><p>形式上，Generator函数是一个普通函数，但是有两个特征：</p><ol><li>function命令与函数名之间有一个星号</li><li>函数体内部使用 <code>yield</code> 语句来定义不同的内部状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 一个 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'he'</span>; <span class="comment">// 状态语句</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ll'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ow'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>; <span class="comment">// 结束语句</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> hw = hellow();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Generator函数的调用方法和普通函数一样。但是，</p><ol><li>调用后该函数不会执行</li><li>返回的不是函数运行的结果，而是一个指向内部状态的指针对象，也就是遍历器对象（Iterator Object）</li><li>必须调用对象的<code>next</code>方法，使指针移向下一个状态</li><li>每次调用<code>next</code>方法，会返回一个包函<code>value</code>和<code>done</code>两个属性的对象。<ul><li>value：内部状态值</li><li>done：布尔值 ，表示是否遍历结束</li></ul></li></ol></li></ul><h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p><code>yield语句</code>就是暂停标志</p><h3 id="next方法的运行逻辑"><a href="#next方法的运行逻辑" class="headerlink" title="next方法的运行逻辑"></a>next方法的运行逻辑</h3><ol><li>遇到<code>yield</code>就暂停执行后边的操作，并将紧跟其后的表达式的值作为返回对象的value属性值</li><li>下一次调用 <code>next方法</code> 时会继续向下执行，知道遇到下一条<code>yield语句</code></li><li>如果没有遇到新的<code>yield语句</code>就一直运行到函数结束，直到<code>return语句</code>为止，并将<code>return语句</code>后面表达式的值作为返回对象的value属性值</li><li>如果没有<code>return语句</code>则返回undefined</li></ol><h3 id="yield语句与return语句"><a href="#yield语句与return语句" class="headerlink" title="yield语句与return语句"></a>yield语句与return语句</h3><ul><li>两者都返回紧跟在语句后面的表达式的值</li><li>yield语句具有记忆功能，return语句不具有此功能</li><li>一个函数只能执行一次return语句，但是可以执行多条yield语句</li></ul><h3 id="暂缓执行函数"><a href="#暂缓执行函数" class="headerlink" title="暂缓执行函数"></a>暂缓执行函数</h3><p>当<code>Generator函数</code>不包含<code>yield语句</code>时，就变成了一个暂缓执行函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f(); <span class="comment">// 此时不执行</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  g.next()  <span class="comment">// 只有调用 next 以后才执行</span></span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>yield语句</code>只能用在<code>Generator函数</code>中，用在其他地方会报错</li><li>不可以用在 <code>forEach</code>等方法的回调函数内，可以使用for循环代替</li><li>yield表达式如果在另一个表达式中，必须放在圆括号内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>+(<span class="keyword">yield</span> <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yield表达式作为函数参数或放在赋值表达式的右边可以不加括号</li></ul><h2 id="与Generator接口的关系"><a href="#与Generator接口的关系" class="headerlink" title="与Generator接口的关系"></a>与Generator接口的关系</h2><ol><li>任意一个对象的<code>Symbol.iterator</code>方法等于该对像的遍历器对象生成函数，调用该函数会返回该对象的一个遍历器对象</li><li>由于<code>Generator函数</code>就是遍历器生成函数，所以可以把<code>Generator</code>赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有<code>Iterator接口</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myIterable = [];</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log([...myIterable]) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>Generator函数</code>执行后，返回一个遍历器对象。该对象本身也具有<code>Symbol.iterator</code>属性，执行后返回自身<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line"><span class="built_in">console</span>.log(g[<span class="built_in">Symbol</span>.iterator] === g); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h2><ul><li><code>yield语句</code>本身没有返回值，或者说总是返回<code>undefined</code></li><li>next 方法可以带有一个参数，该参数会被当做上一条 <code>yield语句</code>的返回值</li><li>由于 next 方法的参数表示上一条<code>yield语句</code>的返回值，所以第一次使用 next 方法时，传递参数是无效的</li><li>如果希望第一次调用 next 方法时能过输入值，可以在 <code>Generator函数</code> 外再包一层</li></ul><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><ul><li>for…of 循环可以自动遍历 <code>Generator函数</code> 生成的 Iterator 对象，且此时不需要调用 next 方法。</li><li>一旦 next 方法的返回对象的 done 属性为 true，for…of循环就会终止，且不包含返回的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 1 2 不包含 return语句返回的 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><ul><li><code>Generator函数</code>返回的遍历器对象都有一个 throw 方法，可以在函数体外抛出错误，然后再 Generator函数 内捕获；反过来，<code>Generator函数</code>体内抛出的错误也可以被函数体外的 catch 捕获</li><li>如果 <code>Generator函数</code> 内部没有部署 try…catch 代码块，那么 throw 方法抛出的错误将被外部的 try…catch 代码块捕获</li><li>如果 <code>Generator函数</code> 内部部署了 try…catch 代码块，那么遍历器的 throw 方法抛出的错误不影响下一次遍历，否则遍历会终止</li><li>一旦<code>Genertator函数</code>执行过程中抛出错误，就不会往下执行了，如果此后调用 next 方法，将返回 {value: undefined, done: true} 这个对象</li><li>throw 方法执行后会附带执行下一条 yield 表达式，即附带执行一次 next 方法</li><li>throw 命令与 Generator.prototype.throw()方法互不影响<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> ;</span><br><span class="line">  &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>,e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><ul><li>该方法返回给定的值,并终结<code>Generator函数</code>的遍历</li><li><p>如果不提供参数，则返回值的 value 属性为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123;value: 1, done &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>); <span class="comment">// &#123;value: 'foo', done: true&#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123;value: undefined, deone: true&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果<code>Generator函数</code>内部有 try…finally 代码块，那么 return 方法会推迟到 finally 代码块执行完成在执行</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 2, done: false&#125;</span></span><br><span class="line">g.return(); <span class="comment">// &#123; value: 4, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 5, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 7, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h2><ul><li><p>如果在一个<code>Generator函数</code>内调用另一个<code>Generator函数</code>，默认情况下是没有效果的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'b'</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// a 和 b 都是 Generator函数 在b中调用a不会生效</span></span><br></pre></td></tr></table></figure></li><li><p><code>yield*</code>，用来在一个<code>Generator函数</code>里执行另一个<code>Generator函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'a' 'b'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 yield 命令后面跟的是一个遍历器对象，那么需要在 yield 命令后面加上星号，表明返回的是一个遍历器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span> inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'colse'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = outer1();</span><br><span class="line">gen.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen.next().value; <span class="comment">// 返回一个遍历器对象</span></span><br><span class="line">gen.next().value; <span class="comment">// 'colse'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'close'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen2 = outer2();</span><br><span class="line">gen2.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'close'</span></span><br></pre></td></tr></table></figure></li><li><p>yield* 后面的<code>Generator语句</code>没有 return 语句时等同于在<code>Generator函数</code>内部部署了一个 <code>for...of</code> 循环</p></li><li>yield<em> 后面的<code>Generator语句</code>有 return 语句时，需要用 `let value = yield</em> iterator` 的形式获取 return语句的值</li><li>如果被代理的<code>Generator语句</code>有 return 语句，那么可以向代理他的<code>Generator函数</code>返回数据</li><li>任何数据只要有<code>Iterator</code>接口，就可以被<code>yield*</code>遍历<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="string">'he'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">a.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">a.next().value; <span class="comment">// 'h'</span></span><br><span class="line">a.next().value; <span class="comment">// 'e'</span></span><br><span class="line">a.next().value; <span class="comment">// '1'</span></span><br><span class="line">a.next().value; <span class="comment">// '2'</span></span><br><span class="line">a.next().value; <span class="comment">// '3'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>异步操作的同步化表达</li><li>控制流管理</li><li>部署 <code>Iterator</code> 接口</li><li>作为数据结构</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Generator函数&lt;/code&gt;是 ES6 提供的一种异步编程解决方案，语法行为与传统函数不同&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.bevexed.top/categories/JavaScript/"/>
    
    
      <category term="异步" scheme="http://blog.bevexed.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>函数节流与函数防抖</title>
    <link href="http://blog.bevexed.top/2019/04/26/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
    <id>http://blog.bevexed.top/2019/04/26/函数节流与函数防抖/</id>
    <published>2019-04-26T02:39:53.000Z</published>
    <updated>2019-04-28T02:46:48.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流 throttle"></a>函数节流 <code>throttle</code></h2><ul><li>限制一个函数在一定时间内只执行一次</li><li>上拉加载</li><li>屏幕滚动</li><li>高频点击</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _.throttle = <span class="function">(<span class="params">func, wait</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func();</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖 debounce"></a>函数防抖 <code>debounce</code></h2><ul><li>事件触发后 <code>n秒</code> 内只执行一次，如果 <code>n秒</code> 内再次触发事件，则重新计算函数执行时间</li><li>一个动作连续触发，只执行最后一次</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>搜索</li><li>手机号、邮箱验证</li><li>窗口改变</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _.debounce = <span class="function">(<span class="params">func, wait</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="异同比较"><a href="#异同比较" class="headerlink" title="异同比较"></a>异同比较</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都可以通过 <code>setTimeout</code> 实现</li><li>都是降低回调执行频率，节省计算资源</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>函数防抖，在一段连续操作结束后，处理回调函数，利用 <code>clearTimeout</code> 和 <code>setTimeout</code> 实现。</li><li>函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能。</li><li>函数防抖，关注一段时间连续触发，只在最后一次执行</li><li>函数节流，侧重一段时间只执行一次</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/f9f6b637fd6c" target="_blank" rel="noopener">浅析函数防抖与函数节流</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数节流-throttle&quot;&gt;&lt;a href=&quot;#函数节流-throttle&quot; class=&quot;headerlink&quot; title=&quot;函数节流 throttle&quot;&gt;&lt;/a&gt;函数节流 &lt;code&gt;throttle&lt;/code&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;限制一个函数在
      
    
    </summary>
    
      <category term="性能优化" scheme="http://blog.bevexed.top/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="事件监听" scheme="http://blog.bevexed.top/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>indexedDB</title>
    <link href="http://blog.bevexed.top/2019/04/02/indexedDB/"/>
    <id>http://blog.bevexed.top/2019/04/02/indexedDB/</id>
    <published>2019-04-02T10:18:51.000Z</published>
    <updated>2019-04-02T10:21:04.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><h3 id="NoSQL-数据库"><a href="#NoSQL-数据库" class="headerlink" title="NoSQL 数据库"></a>NoSQL 数据库</h3><ul><li>不支持 SQL 查询语句</li><li>不属于 关系型数据库</li></ul><h3 id="键值对存储"><a href="#键值对存储" class="headerlink" title="键值对存储"></a>键值对存储</h3><ul><li>采用对象仓库（object store）存放数据</li><li>所有数据都可以直接存入，包括 JavaScript对象</li><li>每一条数据都有 独一无二的 主键对应，重复会报错</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>不会锁死浏览器</li></ul><h3 id="支持事务（transaction）"><a href="#支持事务（transaction）" class="headerlink" title="支持事务（transaction）"></a>支持事务（transaction）</h3><ul><li>只要一步失败，整个事务取消，数据库回滚到事务发生之前的状态</li></ul><h3 id="同源限制"><a href="#同源限制" class="headerlink" title="同源限制"></a>同源限制</h3><ul><li>每一个数据库都有一个与之对应的域名</li><li>不能跨域访问数据库</li></ul><h3 id="存储空间大"><a href="#存储空间大" class="headerlink" title="存储空间大"></a>存储空间大</h3><ul><li>一般 不小于250M</li></ul><h3 id="支持二进制存储"><a href="#支持二进制存储" class="headerlink" title="支持二进制存储"></a>支持二进制存储</h3><ul><li>可以存储 ArrayBuffer对象 和 Blob对象</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>数据库：IDBDatabase 对象</li><li>对象仓库：IDBObjectStore 对象</li><li>索引： IDBIndex 对象</li><li>事务： IDBTransaction 对象</li><li>操作请求：IDBRequest 对象</li><li>指针：IDBCursor 对象</li><li>主键集合：IDBKeyRange 对象</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>数据库是一些列相关数据的容器。</li><li>每个域名（协议+域名+端口）都可以创建任意多个数据库</li><li>IndexedDB 数据库有版本的概念,同一时间只能有一个版本的数据库存在。</li><li>修改数据库结构（新增或删除表、索引或者主键），只能通过升级数据库版本完成。</li></ul><h3 id="对象仓库"><a href="#对象仓库" class="headerlink" title="对象仓库"></a>对象仓库</h3><ul><li>每个数据库包涵若干个对象仓库，类似于关系数据库中的表格。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>为了加快数据检索，在对象仓库里，为不同属性建立索引。</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li>数据记录的读写和删除，倒要通过事务完成。</li><li>事务对象提供 error、abort、complete 三个事件，用来监听操作结果。</li></ul><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a>数据记录</h3><ul><li>对象仓库保存的是数据记录。</li><li>每条记录类似于关系型数据库的行，但是只有主键和数据体两个部分。</li><li>主键用来建立默认的索引，必须是不同的，否则会报错<ul><li>主键可以是数据记录里面的一个属性，也可以是一个递增的整数编号</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="打开数据库-indexedDB-open"><a href="#打开数据库-indexedDB-open" class="headerlink" title="打开数据库 indexedDB.open()"></a>打开数据库 <code>indexedDB.open()</code></h3><ul><li><p>参数1：数据库名字</p><ul><li>指定数据库不存在，新建数据库</li></ul></li><li><p>参数2：数据库版本</p><ul><li>新建数据库版本默认为 1</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">'databaseName'</span>, version);</span><br></pre></td></tr></table></figure><ul><li>返回一个 IDBRequest 对象<ul><li>该对象通过 error 、 success 、 upgradeneeded 三种事件处理打开数据库的操作结果<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开报错'</span>, event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="success"><a href="#success" class="headerlink" title="success"></a>success</h4><ul><li>通过request对象的result属性拿到数据库对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = request.result;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开成功'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="upgradeneeded"><a href="#upgradeneeded" class="headerlink" title="upgradeneeded"></a>upgradeneeded</h4><ul><li>当指定的版本号大于 实际操作的版本号，触发该事件。</li><li>通过事件对象的target.result属性，拿到数据库实例。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><ul><li>新建数据库和打开数据库是同一操作</li><li>打开数据库后的后续操作主要在 upgradeneeded 中操作</li></ul><h4 id="新建对象仓库-createObjectStore"><a href="#新建对象仓库-createObjectStore" class="headerlink" title="新建对象仓库 createObjectStore()"></a>新建对象仓库 createObjectStore()</h4><ul><li><p>参数1：表格名字</p></li><li><p>参数2：主键配置</p><ul><li>{ autoIncrement: true } // IndexedDB 自动生成主键。</li><li>{ keyPath: ‘id’ } // 自定义主键为 ‘id’</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db</span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="keyword">let</span> objectStore;</span><br><span class="line">  <span class="comment">// 检测表格是否 存在</span></span><br><span class="line">   <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">'person'</span>)) &#123;</span><br><span class="line">     <span class="comment">// 新建一张叫做 person 的表格 ，主键是 id</span></span><br><span class="line">     objectStore = db.createObjectStore(<span class="string">'person'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建索引-createIndex"><a href="#创建索引-createIndex" class="headerlink" title="创建索引 createIndex()"></a>创建索引 createIndex()</h4><ul><li><p>参数1：索引名称</p></li><li><p>参数2：索引所在属性</p></li><li><p>参数1：配置对象</p><ul><li>{ unique: false } // 该属性是否包涵重复的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> db = event.target.result;</span><br><span class="line">  <span class="keyword">let</span> objectStore = db.createObjectStore(<span class="string">'person'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">  objectStore.createIndex(<span class="string">'name'</span>, <span class="string">'name'</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  objectStore.createIndex(<span class="string">'email'</span>, <span class="string">'email'</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><ul><li>向对象仓库写入数据记录</li><li>需要通过新建事务完成<ul><li>新建时必须指定 表格名城 和 操作模式（‘只读’、‘读写’）</li></ul></li><li>新建事务后 通过 IDBTransaction.objectStore(name) 方法，拿到 IDBObjectStore 对象</li><li>通过 add() 方法向表格 写入数据</li><li>写入操作是一个 异步操作，通过监听链接对象的 <code>success</code> 和 <code>error</code> 事件，判断是否写入成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">'zhangsan@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入成功'</span>, event);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入失败'</span>, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li>读取数据也通过事务完成<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> transaction = db.transaction([<span class="string">'person'</span>]);</span><br><span class="line">   <span class="keyword">let</span> objectStore = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line">   <span class="keyword">let</span> request = objectStore.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'事务失败'</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.result) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Name: '</span> + request.result.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Age: '</span> + request.result.age);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + request.result.email);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'未获得数据记录'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历数据-openCursor"><a href="#遍历数据-openCursor" class="headerlink" title="遍历数据 openCursor()"></a>遍历数据 openCursor()</h3><ul><li>遍历数据表格的所有记录，要使用指针对象 IDBCursor</li><li>openCursor() 方法是一个异步操作，需要监听 success 事件返回的结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objectStore = db.transaction(<span class="string">'person'</span>).objectStore(<span class="string">'person'</span>);</span><br><span class="line"></span><br><span class="line">   objectStore.openCursor().onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> cursor = event.target.result;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Id: '</span> + cursor.key);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Name: '</span> + cursor.value.name);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Age: '</span> + cursor.value.age);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + cursor.value.email);</span><br><span class="line">       cursor.continue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'没有更多数据了！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新数据-IDBObject-put"><a href="#更新数据-IDBObject-put" class="headerlink" title="更新数据 IDBObject.put()"></a>更新数据 IDBObject.put()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">'lisi@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据-openCursor"><a href="#删除数据-openCursor" class="headerlink" title="删除数据 openCursor()"></a>删除数据 openCursor()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据删除成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h3><ul><li>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">objectStore.createIndex(<span class="string">'name'</span>, <span class="string">'name'</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transaction = db.transaction([<span class="string">'person'</span>], <span class="string">'readonly'</span>);</span><br><span class="line"><span class="keyword">let</span> store = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line"><span class="keyword">let</span> index = store.index(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">let</span> request = index.get(<span class="string">'李四'</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = e.target.result;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexedDB-对象"><a href="#indexedDB-对象" class="headerlink" title="indexedDB 对象"></a>indexedDB 对象</h2><ul><li>浏览器提供的原生对象</li></ul><h3 id="indexedDB-open"><a href="#indexedDB-open" class="headerlink" title="indexedDB.open()"></a>indexedDB.open()</h3><ul><li>打开数据库</li><li>异步操作</li><li>立即返回一个 IDBOpenDBRequest 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开一个名为 test 版本为 1 的数据库，如果数据库不存在则创建该数据库</span></span><br><span class="line"><span class="keyword">let</span> openRequest = <span class="built_in">window</span>.indexedDB.open(<span class="string">'test'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><p>参数1：数据库名称</p><ul><li>格式为字符串，不可省略</li></ul></li><li><p>参数2：数据库版本</p><ul><li>大于 0 的正整数 ，0 会报错</li><li>该参数大于当前版本，会触发数据库升级</li><li>该参数可以省略，如果数据库已存在，打开最新版本数据库；如果数据库不存在，创建该版本的数据库，默认版本为 1</li></ul></li></ul><h4 id="回调事件"><a href="#回调事件" class="headerlink" title="回调事件"></a>回调事件</h4><ul><li>success：打开成功</li><li>error：打开失败</li><li>upgradeneeded：第一次打开该数据库，或数据库版本发生变化</li><li>blocked：上一次的数据库连接还未关闭<blockquote><p>第一次打开数据库，会先触发 upgradeneeded 事件，然后触发 success 事件<br>success 事件发生后，从 openRequest.result 属性可以拿到已经打开的 IndexedDB 数据库对象 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> openRequest = indexedDB.open(<span class="string">'test'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">openRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Upgrading...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">openRequest.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Success!'</span>);</span><br><span class="line">  db = openRequest.result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">openRequest.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="indexedDB-deleteDatabase"><a href="#indexedDB-deleteDatabase" class="headerlink" title="indexedDB.deleteDatabase()"></a>indexedDB.deleteDatabase()</h3><ul><li>用于删除一个数据库</li><li>立即返回一个 IDBOpenDBRequest 对象，然后对数据库执行异步删除</li><li>删除不存在的数据库时，不会报错</li><li>当调用该方法后，当前数据的其他已经打开的连接都会接收到 versionchange 事件</li></ul><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li>数据库名字</li></ul><h4 id="回调事件-1"><a href="#回调事件-1" class="headerlink" title="回调事件"></a>回调事件</h4><ul><li>success：删除成功</li><li>error：删除失败<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> DBDeleteRequest = <span class="built_in">window</span>.indexedDB.deleteDatabase(<span class="string">'demo'</span>);</span><br><span class="line"></span><br><span class="line">DBDeleteRequest.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DBDeleteRequest.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="indexedDB，cmp"><a href="#indexedDB，cmp" class="headerlink" title="indexedDB，cmp()"></a>indexedDB，cmp()</h3><ul><li>比较两个值是否为 indexedDB 的相同的主键。</li><li>返回一个整数，表示比较的结果<ul><li>0 ：相同 </li><li>1： 第一个主键大于第二个主键</li><li>-1： 第一个主键小于第二个主键<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.indexedDB.cmp(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="comment">// 注意，这个方法不能用来比较任意的 JavaScript 值。如果参数是布尔值或对象，它会报错。</span></span><br><span class="line"><span class="built_in">window</span>.indexedDB.cmp(<span class="number">1</span>, <span class="literal">true</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">window</span>.indexedDB.cmp(&#123;&#125;, &#123;&#125;) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="IDBRequest-对象"><a href="#IDBRequest-对象" class="headerlink" title="IDBRequest 对象"></a>IDBRequest 对象</h2><ul><li>表示打开的数据库连接</li><li>indexedDB.open() 和 indexedDB.deleteDatabase() 方法会返回这个对象</li><li>数据库的操作都是通过此对象完成</li><li>对象的所有操作都是 <code>异步</code> 完成<ul><li>通过 readyState 属性判断是否完成<ul><li>pending：正在进行</li><li>done：完成，有可能失败也有可成功</li></ul></li></ul></li><li>操作完成，触发 error 或 success 事件<ul><li>可以通过 result 属性 和 error 属性 拿到操作结果<ul><li>如果在 pending 状态去读取这两个属性的值会报错<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3></li></ul></li></ul></li><li>IDBRequest.readyState：等于pending表示操作正在进行，等于done表示操作正在完成。</li><li>IDBRequest.result：返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。</li><li>IDBRequest.error：请求失败时，返回错误对象。</li><li>IDBRequest.source：返回请求的来源（比如索引对象或 ObjectStore）。</li><li>IDBRequest.transaction：返回当前请求正在进行的事务，如果不包含事务，返回null。</li><li>IDBRequest.onsuccess：指定success事件的监听函数。</li><li>IDBRequest.onerror：指定error事件的监听函数。</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="level-js"><a href="#level-js" class="headerlink" title="level.js"></a>level.js</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特征&quot;&gt;&lt;a href=&quot;#特征&quot; class=&quot;headerlink&quot; title=&quot;特征&quot;&gt;&lt;/a&gt;特征&lt;/h2&gt;&lt;h3 id=&quot;NoSQL-数据库&quot;&gt;&lt;a href=&quot;#NoSQL-数据库&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 数
      
    
    </summary>
    
      <category term="HTML5" scheme="http://blog.bevexed.top/categories/HTML5/"/>
    
    
  </entry>
  
  <entry>
    <title>browser-sync 安装与使用</title>
    <link href="http://blog.bevexed.top/2019/04/02/browser-sync/"/>
    <id>http://blog.bevexed.top/2019/04/02/browser-sync/</id>
    <published>2019-04-02T06:35:48.000Z</published>
    <updated>2019-04-02T06:42:54.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h1><blockquote><p>浏览器同步工具</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i browser-sync -g</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync init</span><br></pre></td></tr></table></figure><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync start --server --files <span class="string">"**"</span></span><br></pre></td></tr></table></figure><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync start --proxy <span class="string">"localhost:8080"</span> --files <span class="string">"**"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;browser-sync&quot;&gt;&lt;a href=&quot;#browser-sync&quot; class=&quot;headerlink&quot; title=&quot;browser-sync&quot;&gt;&lt;/a&gt;browser-sync&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;浏览器同步工具&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="构建工具" scheme="http://blog.bevexed.top/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>rc-queue-anim的使用</title>
    <link href="http://blog.bevexed.top/2019/02/18/rc-queue-anim%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.bevexed.top/2019/02/18/rc-queue-anim的使用/</id>
    <published>2019-02-18T01:56:50.000Z</published>
    <updated>2019-02-18T02:06:37.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -S rc-queue-anim</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QueueAnim <span class="keyword">from</span> <span class="string">'rc-queue-anim'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;QueueAnim delay=&#123;<span class="number">300</span>&#125; className=<span class="string">"queue-simple"</span>&gt;</span><br><span class="line">    &lt;div key=<span class="string">"a"</span>&gt;依次进场&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div key="b"&gt;依次进场&lt;/</span>div&gt;</span><br><span class="line">    &lt;div key=<span class="string">"c"</span>&gt;依次进场&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div key="d"&gt;依次进场&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/QueueAnim&gt;</span></span><br><span class="line"><span class="regexp">, mountNode);</span></span><br></pre></td></tr></table></figure><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://motion.ant.design/" target="_blank" rel="noopener">https://motion.ant.design/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="React" scheme="http://blog.bevexed.top/categories/React/"/>
    
    
      <category term="插件" scheme="http://blog.bevexed.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="动画" scheme="http://blog.bevexed.top/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>socket.io</title>
    <link href="http://blog.bevexed.top/2019/02/15/socket-io/"/>
    <id>http://blog.bevexed.top/2019/02/15/socket-io/</id>
    <published>2019-02-15T05:46:52.000Z</published>
    <updated>2019-04-26T02:48:36.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install socket.io -S</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到与服务器的链接对象</span></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">'ws://localhost:9000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line">socket.on(<span class="string">'receiveMsg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'浏览器接收消息'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">socket.emit(<span class="string">'sendMsg'</span>, &#123;<span class="attr">name</span>: <span class="string">'12'</span>, <span class="attr">data</span>: <span class="built_in">Date</span>.now()&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'发送消息'</span>);</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">server</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"><span class="comment">// 监视客户端与服务器端的链接</span></span><br><span class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'链接成功'</span>);</span><br><span class="line">socket.on(<span class="string">'sendMsg'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器接受到浏览器消息'</span>);</span><br><span class="line"><span class="comment">// 全局发数据</span></span><br><span class="line">io.emit(<span class="string">'receiveMsg'</span>,data.name+<span class="string">'_'</span>+data.data)</span><br><span class="line"><span class="comment">// 单一发数据</span></span><br><span class="line">socket.emit(<span class="string">'receiveMsg'</span>,data.name+<span class="string">'_'</span>+data.data)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器向浏览器发消息'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// www</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../socketIO/test'</span>)(server);</span><br></pre></td></tr></table></figure><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://socket.io/get-started/chat/" target="_blank" rel="noopener">https://socket.io/get-started/chat/</a></li><li><a href="https://blog.csdn.net/neuq_zxy/article/details/77531126" target="_blank" rel="noopener">https://blog.csdn.net/neuq_zxy/article/details/77531126</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="Node" scheme="http://blog.bevexed.top/categories/Node/"/>
    
    
      <category term="插件" scheme="http://blog.bevexed.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Node" scheme="http://blog.bevexed.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>js-cookie</title>
    <link href="http://blog.bevexed.top/2019/02/14/js-cookie/"/>
    <id>http://blog.bevexed.top/2019/02/14/js-cookie/</id>
    <published>2019-02-14T03:48:21.000Z</published>
    <updated>2019-02-14T03:54:28.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn add js-cookie -S</span><br></pre></td></tr></table></figure><h3 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br></pre></td></tr></table></figure><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="Cookies-set"><a href="#Cookies-set" class="headerlink" title="Cookies.set"></a>Cookies.set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>);</span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">''</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Cookies-get"><a href="#Cookies-get" class="headerlink" title="Cookies.get"></a>Cookies.get</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(<span class="string">'name'</span>); <span class="comment">// =&gt; 'value'</span></span><br><span class="line">Cookies.get(<span class="string">'nothing'</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line">Cookies.get(); <span class="comment">// =&gt; &#123; name: 'value' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Cookies-remove"><a href="#Cookies-remove" class="headerlink" title="Cookies.remove"></a>Cookies.remove</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.remove(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="https://www.npmjs.com/package/js-cookie" target="_blank" rel="noopener">https://www.npmjs.com/package/js-cookie</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="插件" scheme="http://blog.bevexed.top/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="cookie" scheme="http://blog.bevexed.top/tags/cookie/"/>
    
      <category term="插件" scheme="http://blog.bevexed.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>redux的使用</title>
    <link href="http://blog.bevexed.top/2019/02/13/redux%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.bevexed.top/2019/02/13/redux的使用/</id>
    <published>2019-02-13T06:11:39.000Z</published>
    <updated>2019-02-18T02:29:31.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><blockquote><p><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">https://www.redux.org.cn/</a></p></blockquote><h2 id="redux-模块"><a href="#redux-模块" class="headerlink" title="redux 模块"></a>redux 模块</h2><ul><li><code>redux</code>模块整体是一个对象模块</li><li>内部包含的函数：<ul><li>createStore(reducers) // reducers:fucntion(state,action)(return newState)</li><li>combineReducers(reducers) // reducers:{reducer1,reducer2} 返回：function(state,action){rteturn newState}</li><li>applyMiddleware()</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="基本包"><a href="#基本包" class="headerlink" title="基本包"></a>基本包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save  redux react-redux redux-thunk redux-devtools-extension</span><br></pre></td></tr></table></figure><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><h5 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h5><p>redux 最核心的管理模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">"redux-devtools-extension"</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露 store 对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducers,composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure></p><h5 id="reducers-js"><a href="#reducers-js" class="headerlink" title="reducers.js"></a>reducers.js</h5><p>包含 n 个 reducer 函数 根据老的 <code>state</code> 和 指定的 <code>action</code> 返回一个 新的 <code>state</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并状态</span></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">"redux"</span>; </span><br><span class="line"><span class="keyword">import</span> &#123;AUTH_SUCCESS, ERROR_MSG&#125; <span class="keyword">from</span> <span class="string">"./action-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> register = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">        <span class="comment">// 发送注册的异步 ajax 请求</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> reqRegister(user)</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        <span class="keyword">if</span> (result.code === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 分发成功的同步action</span></span><br><span class="line">            dispatch(authSuccess(result.data))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dispatch(errprMsg(result.msg))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="actioncs-js"><a href="#actioncs-js" class="headerlink" title="actioncs.js"></a>actioncs.js</h5><p>包含 n 个 action creator</p><ul><li>异步 action</li><li>同步 action</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AUTH_SUCCESS,</span><br><span class="line">    ERROR_MSG</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./action-types"</span>;</span><br></pre></td></tr></table></figure><h5 id="action-types-js"><a href="#action-types-js" class="headerlink" title="action-types.js"></a>action-types.js</h5><p>包含 n 个 action-type 常量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AUTH_SUCCESS=<span class="string">'auth_success'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ERROR_MSG=<span class="string">'error_msg'</span></span><br></pre></td></tr></table></figure></p><h5 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h5><p>引入<code>Provider</code>、<code>store</code><br><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">          &lt;HashRouter&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">              &lt;Route exact path=<span class="string">'/register'</span> component=&#123;Register&#125;/&gt;</span><br><span class="line">              &lt;Route exact path=<span class="string">'/login'</span> component=&#123;Login&#125;/&gt;</span><br><span class="line">              &lt;Route component=&#123;Main&#125;/&gt; &#123;<span class="comment">/* 默认组件*/</span>&#125;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>HashRouter&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">Redux 入门教程</a></p><ul><li><a href="https://cn.vuejs.org/v2/guide/state-management.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/state-management.html</a></li><li><a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">https://vuex.vuejs.org/</a></li><li><a href="https://cn.redux.js.org/docs/react-redux/" target="_blank" rel="noopener">https://cn.redux.js.org/docs/react-redux/</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></li><li><a href="https://redux-saga-in-chinese.js.org" target="_blank" rel="noopener">https://redux-saga-in-chinese.js.org</a></li><li><a href="https://juejin.im/post/59e6cd68f265da43163c2821" target="_blank" rel="noopener">https://juejin.im/post/59e6cd68f265da43163c2821</a></li><li><a href="https://react-redux.js.org/introduction/why-use-react-redux" target="_blank" rel="noopener">https://react-redux.js.org/introduction/why-use-react-redux</a></li><li><a href="https://segmentfault.com/a/1190000007248878" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007248878</a></li><li><a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/generator</a></li><li><a href="https://juejin.im/post/5ac1cb9d6fb9a028cf32a046" target="_blank" rel="noopener">https://juejin.im/post/5ac1cb9d6fb9a028cf32a046</a></li><li><a href="https://zhuanlan.zhihu.com/p/35437092" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35437092</a></li><li><a href="https://github.com/dvajs/dva/issues/1" target="_blank" rel="noopener">https://github.com/dvajs/dva/issues/1</a></li><li><a href="https://cn.mobx.js.org" target="_blank" rel="noopener">https://cn.mobx.js.org</a></li><li><a href="https://zhuanlan.zhihu.com/p/25585910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25585910</a></li><li><a href="http://imweb.io/topic/59f4833db72024f03c7f49b4" target="_blank" rel="noopener">http://imweb.io/topic/59f4833db72024f03c7f49b4</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.redux.org.cn/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="React" scheme="http://blog.bevexed.top/categories/React/"/>
    
    
      <category term="插件" scheme="http://blog.bevexed.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="React" scheme="http://blog.bevexed.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react技术选型</title>
    <link href="http://blog.bevexed.top/2019/02/13/react%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <id>http://blog.bevexed.top/2019/02/13/react技术选型/</id>
    <published>2019-02-13T05:40:52.000Z</published>
    <updated>2019-02-13T08:04:12.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前台数据展示-交互-组件化"><a href="#前台数据展示-交互-组件化" class="headerlink" title="前台数据展示/交互/组件化"></a>前台数据展示/交互/组件化</h3><h4 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a><a href="../react-router-dom的使用">react-router-dom</a></h4><blockquote><p>npm i react-router-dom -S</p></blockquote><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><blockquote><p>npm i redux react-redux redux-thunk redux-devtools-extension -S</p></blockquote><h4 id="antd-mobile"><a href="#antd-mobile" class="headerlink" title="antd-mobile"></a>antd-mobile</h4><blockquote><p>npm i -D babel-plugin-import react-app-rewired</p></blockquote><ul><li>引入 看文档</li><li>按需打包</li></ul><h3 id="后台项目"><a href="#后台项目" class="headerlink" title="后台项目"></a>后台项目</h3><ul><li>node</li><li>express</li><li>mongodb</li><li>mongoose</li><li>socket.io</li></ul><h3 id="前后台交互"><a href="#前后台交互" class="headerlink" title="前后台交互"></a>前后台交互</h3><ul><li>ajax 请求</li><li>axios</li><li>async / await<h3 id="测试-API-接口"><a href="#测试-API-接口" class="headerlink" title="测试 API 接口"></a>测试 API 接口</h3></li><li>postman<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3></li><li>ES6</li><li>babel</li></ul><h3 id="项目构建-工程化"><a href="#项目构建-工程化" class="headerlink" title="项目构建/工程化"></a>项目构建/工程化</h3><ul><li>webpack</li><li>react-create-app</li><li>eslint</li></ul><h3 id="其他相关库"><a href="#其他相关库" class="headerlink" title="其他相关库"></a>其他相关库</h3><ul><li>blueimp-md5</li><li>js-cookie</li><li>rc-queue-anim</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前台数据展示-交互-组件化&quot;&gt;&lt;a href=&quot;#前台数据展示-交互-组件化&quot; class=&quot;headerlink&quot; title=&quot;前台数据展示/交互/组件化&quot;&gt;&lt;/a&gt;前台数据展示/交互/组件化&lt;/h3&gt;&lt;h4 id=&quot;react-router-dom&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="React" scheme="http://blog.bevexed.top/categories/React/"/>
    
    
      <category term="插件" scheme="http://blog.bevexed.top/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="React" scheme="http://blog.bevexed.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react-router-dom的简单使用</title>
    <link href="http://blog.bevexed.top/2019/02/13/react-router-dom%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.bevexed.top/2019/02/13/react-router-dom的使用/</id>
    <published>2019-02-13T02:19:28.000Z</published>
    <updated>2019-02-15T07:38:11.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn add react-router react-router-dom -S</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Swtich, Route, Router, HashHistory, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">'/'</span> <span class="attr">component</span>=<span class="string">&#123;home&#125;</span>&gt;</span>1212<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">'/a'</span> <span class="attr">component</span>=<span class="string">&#123;a&#125;</span>&gt;</span>12321312<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;a&#125;</span>&gt;</span>12321312<span class="tag">&lt;/<span class="name">Route</span>&gt;</span> &#123;/* 默认组件*/&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p><a href="https://reacttraining.com/react-router/web/api/BrowserRouter" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/api/BrowserRouter</a></p></blockquote><h3 id="lt-Router"><a href="#lt-Router" class="headerlink" title="&lt;Router>"></a>&lt;Router></h3><h4 id="history-object"><a href="#history-object" class="headerlink" title="history: object"></a>history: object</h4><h4 id="children-node"><a href="#children-node" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-BrowserRouter"><a href="#lt-BrowserRouter" class="headerlink" title="&lt;BrowserRouter>"></a>&lt;BrowserRouter></h3><h4 id="basename-string"><a href="#basename-string" class="headerlink" title="basename: string"></a>basename: string</h4><p>所有位置的基准 URL。</p><ul><li>如果你的应用程序部署在服务器的子目录，则需要将其设置为子目录。</li><li><code>basename</code> 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠。</li></ul><h4 id="getUserConfirmation-func"><a href="#getUserConfirmation-func" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="forceRefresh-bool"><a href="#forceRefresh-bool" class="headerlink" title="forceRefresh: bool"></a>forceRefresh: bool</h4><p>强制刷新页面</p><h4 id="keyLength-number"><a href="#keyLength-number" class="headerlink" title="keyLength: number"></a>keyLength: number</h4><h4 id="children-node-1"><a href="#children-node-1" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-HashRouter"><a href="#lt-HashRouter" class="headerlink" title="&lt;HashRouter>"></a>&lt;HashRouter></h3><h4 id="basename-string-1"><a href="#basename-string-1" class="headerlink" title="basename: string"></a>basename: string</h4><h4 id="getUserConfirmation-func-1"><a href="#getUserConfirmation-func-1" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="hashtype-string"><a href="#hashtype-string" class="headerlink" title="hashtype: string"></a>hashtype: string</h4><ul><li>slash: #/</li><li>noslash: #</li><li>hashbang: #!<h4 id="children-node-2"><a href="#children-node-2" class="headerlink" title="children: node"></a>children: node</h4></li></ul><h3 id="lt-StaticRouter"><a href="#lt-StaticRouter" class="headerlink" title="&lt;StaticRouter>"></a>&lt;StaticRouter></h3><h4 id="basename-string-2"><a href="#basename-string-2" class="headerlink" title="basename: string"></a>basename: string</h4><h4 id="location-string"><a href="#location-string" class="headerlink" title="location: string"></a>location: string</h4><h4 id="location-object"><a href="#location-object" class="headerlink" title="location: object"></a>location: object</h4><h4 id="context-object"><a href="#context-object" class="headerlink" title="context: object"></a>context: object</h4><h4 id="children-node-3"><a href="#children-node-3" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-MemoruRouter"><a href="#lt-MemoruRouter" class="headerlink" title="&lt;MemoruRouter>"></a>&lt;MemoruRouter></h3><h4 id="initialEntries-array"><a href="#initialEntries-array" class="headerlink" title="initialEntries: array"></a>initialEntries: array</h4><h4 id="initialIndex-number"><a href="#initialIndex-number" class="headerlink" title="initialIndex: number"></a>initialIndex: number</h4><h4 id="getUserConfirmation-func-2"><a href="#getUserConfirmation-func-2" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="keylength-number"><a href="#keylength-number" class="headerlink" title="keylength: number"></a>keylength: number</h4><h4 id="children-node-4"><a href="#children-node-4" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-Link"><a href="#lt-Link" class="headerlink" title="&lt;Link>"></a>&lt;Link></h3><h4 id="to-string"><a href="#to-string" class="headerlink" title="to: string"></a>to: string</h4><h4 id="to-object"><a href="#to-object" class="headerlink" title="to: object"></a>to: object</h4><ul><li>pathname: url</li><li>search: query</li><li>hash: #</li><li>state: {} <h4 id="replace-func"><a href="#replace-func" class="headerlink" title="replace: func"></a>replace: func</h4><h4 id="innerRef-func"><a href="#innerRef-func" class="headerlink" title="innerRef: func"></a>innerRef: func</h4><h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4></li></ul><h3 id="lt-NavLink"><a href="#lt-NavLink" class="headerlink" title="&lt;NavLink>"></a>&lt;NavLink></h3><h4 id="activeClassName-string"><a href="#activeClassName-string" class="headerlink" title="activeClassName: string"></a>activeClassName: string</h4><h4 id="activeStyle-object"><a href="#activeStyle-object" class="headerlink" title="activeStyle: object"></a>activeStyle: object</h4><h4 id="exact-bool"><a href="#exact-bool" class="headerlink" title="exact: bool"></a>exact: bool</h4><h4 id="strict-bool"><a href="#strict-bool" class="headerlink" title="strict: bool"></a>strict: bool</h4><h4 id="isActive-func"><a href="#isActive-func" class="headerlink" title="isActive: func"></a>isActive: func</h4><h4 id="location-object-1"><a href="#location-object-1" class="headerlink" title="location: object"></a>location: object</h4><h3 id="lt-Prompt"><a href="#lt-Prompt" class="headerlink" title="&lt;Prompt>"></a>&lt;Prompt></h3><p>用于在位置跳转之前给予用户一些确认信息。当你的应用程序进入一个应该阻止用户导航的状态时（比如表单只填写了一半），弹出一个提示。</p><h4 id="message-string"><a href="#message-string" class="headerlink" title="message: string"></a>message: string</h4><h4 id="message-func"><a href="#message-func" class="headerlink" title="message: func"></a>message: func</h4><h4 id="when-bool"><a href="#when-bool" class="headerlink" title="when: bool"></a>when: bool</h4><h3 id="lt-Redirect"><a href="#lt-Redirect" class="headerlink" title="&lt;Redirect>"></a>&lt;Redirect></h3><h4 id="to-string-1"><a href="#to-string-1" class="headerlink" title="to: string"></a>to: string</h4><h4 id="to-object-1"><a href="#to-object-1" class="headerlink" title="to: object"></a>to: object</h4><h4 id="push-bool"><a href="#push-bool" class="headerlink" title="push: bool"></a>push: bool</h4><h4 id="from-string"><a href="#from-string" class="headerlink" title="from: string"></a>from: string</h4><h4 id="exact-bool-1"><a href="#exact-bool-1" class="headerlink" title="exact: bool"></a>exact: bool</h4><h4 id="strict-bool-1"><a href="#strict-bool-1" class="headerlink" title="strict: bool"></a>strict: bool</h4><h3 id="lt-Switch"><a href="#lt-Switch" class="headerlink" title="&lt;Switch>"></a>&lt;Switch></h3><h4 id="location-object-2"><a href="#location-object-2" class="headerlink" title="location: object"></a>location: object</h4><h4 id="children-node-5"><a href="#children-node-5" class="headerlink" title="children: node"></a>children: node</h4><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>将非路由组件变成路由组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="string">`组件名`</span>)</span><br></pre></td></tr></table></figure></p><h3 id="编程式导航history"><a href="#编程式导航history" class="headerlink" title="编程式导航history"></a>编程式导航<code>history</code></h3><p>在<code>props</code>上有<code>history</code>对象，这个对象上存在多个个方法</p><ul><li>push</li><li></li><li>replace</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="React" scheme="http://blog.bevexed.top/categories/React/"/>
    
    
      <category term="Route" scheme="http://blog.bevexed.top/tags/Route/"/>
    
  </entry>
  
  <entry>
    <title>vue查漏补缺</title>
    <link href="http://blog.bevexed.top/2019/02/11/vue%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://blog.bevexed.top/2019/02/11/vue查漏补缺/</id>
    <published>2019-02-11T08:59:36.000Z</published>
    <updated>2019-06-12T04:00:07.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-不支持-IE8-及以下版本"><a href="#Vue-不支持-IE8-及以下版本" class="headerlink" title="Vue 不支持 IE8 及以下版本"></a>Vue <strong>不支持</strong> IE8 及以下版本</h2><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.22/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>确保相同的元素被切换时会重新渲染</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>可以对对象的属性进行迭代</li><li>提供了 <code>value</code>、 <code>key</code>、 <code>index</code> 三个参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#v-for-object'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: <span class="string">'John'</span>,</span><br><span class="line">      lastName: <span class="string">'Doe'</span>,</span><br><span class="line">      age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数组的更新检测"><a href="#数组的更新检测" class="headerlink" title="数组的更新检测"></a>数组的更新检测</h2><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li><p>当你利用索引直接设置一个项时，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vm.items[indexOfItem] = newValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过一下方法替代</span></span><br><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure></li><li><p>当你修改数组的长度时，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.length = newLength</span><br></pre></td></tr></table></figure></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li><li>.once</li><li>.passive</li></ul><h3 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h3><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><ul><li>.left</li><li>.right</li><li>.middle</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li>.lazy</li><li>.trim</li><li>.number</li></ul><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><h3 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h3><blockquote><p>模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// template 可以是任意元素</span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="过渡类名"><a href="#过渡类名" class="headerlink" title="过渡类名"></a>过渡类名</h3><ul><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。<br><img src="transition.png" alt="png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-不支持-IE8-及以下版本&quot;&gt;&lt;a href=&quot;#Vue-不支持-IE8-及以下版本&quot; class=&quot;headerlink&quot; title=&quot;Vue 不支持 IE8 及以下版本&quot;&gt;&lt;/a&gt;Vue &lt;strong&gt;不支持&lt;/strong&gt; IE8 及以下版本&lt;
      
    
    </summary>
    
      <category term="Vue" scheme="http://blog.bevexed.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://blog.bevexed.top/tags/Vue/"/>
    
      <category term="修饰符" scheme="http://blog.bevexed.top/tags/%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
  </entry>
  
</feed>
