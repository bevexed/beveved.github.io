<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx入门指南</title>
      <link href="/2019/09/06/nginx%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/09/06/nginx%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="简述-Nginx"><a href="#简述-Nginx" class="headerlink" title="简述 Nginx"></a>简述 Nginx</h2><ul><li><p>nginx有一个主进程和几个工作进程。(参看 worker_processes).</p><ul><li>主进程的主要目的是为了读取和评估配置并且维护工作进程。工作进程处理实际请求。</li><li>nginx在工作进程中采用事件驱动模型和OS依赖机制有效分配请求。</li><li>工作进程的数量取决于配置文件中定义的固定值或者是通过有效的CPU核数自动判定数量。</li><li>工作进程的数量在配置文件中定义，可据给定的配置对工作进程的数量进行固定，也可以根据可用CPU内核的数量进行自动调整。</li></ul></li><li><p>nginx及其各模块的工作方式取决于配置文件。</p><ul><li>默认情况下，配置文件名为nginx.conf，并放置在/usr/local/nginx/conf、/etc/nginx或/usr/local/etc/nginx.目录中。</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>自行参考 Installing nginx 页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; brew install ngnix</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="启动-停止-和重新加载配置文件"><a href="#启动-停止-和重新加载配置文件" class="headerlink" title="启动, 停止, 和重新加载配置文件"></a>启动, 停止, 和重新加载配置文件</h2><blockquote><p>启动的时候直接运行nginx.exe或者nginx。如果nginx已经启动，就可以直接使用参数-s 来进行调用执行，具体的使用语法如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nginx -s signal</span><br></pre></td></tr></table></figure><p>signal 的位置可以是如下参数：</p><ul><li>stop — 指令一经发出，直接停止</li><li>quit — 等待所有的请求完成，再停止</li><li>reload — 重新加载配置文件nginx.conf</li><li>reopen — 重新打开日志文件</li></ul><h2 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h2><ul><li>nginx由模块组成<ul><li>这些模块由配置文件中指定的指令控制。</li><li>指令分为简单指令和块指令。</li><li>一个简单的指令由名称和参数组成，这些名称和参数由空格分隔，并以分号(;)结尾。</li><li>块指令具有与简单指令相同的结构，但它的结尾不是分号，而是一组由大括号({、})包围的附加指令。</li><li>如果一个块指令在大括号中包含其他指令，则这个块指令又叫做上下文 (例如: events, http, server, 和location).</li><li>放在任何上下文之外的配置文件中的指令被认为是在主上下文中。</li><li>event 和 http 指令驻留在主上下文中，server 驻留在 http 中，location 驻留在 server中。</li><li>一行中在#符号后面的是注释</li></ul></li></ul><h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><ul><li>从配置文件开始到 events 块之间的内容</li><li>主要设置影响 Ngnix 服务器整体运行的配置指令</li></ul><h3 id="event-块"><a href="#event-块" class="headerlink" title="event 块"></a>event 块</h3><ul><li>涉及的指令主要影响 Nginx 服务器与用户的网络连接</li><li>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置</li></ul><h3 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a>http 块</h3><ul><li>是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里</li><li>http 块中也可以包括 http 全局块、 server块</li></ul><h3 id="http-全局块"><a href="#http-全局块" class="headerlink" title="http 全局块"></a>http 全局块</h3><ul><li>http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</li></ul><h3 id="sever-块"><a href="#sever-块" class="headerlink" title="sever 块"></a>sever 块</h3><ul><li>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。后面会详细介绍虚拟主机的概念。</li><li>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</li><li>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</li></ul><h3 id="location-块"><a href="#location-块" class="headerlink" title="location 块"></a>location 块</h3><ul><li>一个 server 块可以配置多个 location 块。</li><li>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。<strong>地址定向、数据缓存和应答控制</strong>等功能，还有许多第三方模块的配置也在这里进行。</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>web服务器最重要的任务是对外提供文件，例如(图片或者静态HTML网页)。</li></ul><h3 id="提供静态资源内容"><a href="#提供静态资源内容" class="headerlink" title="提供静态资源内容"></a>提供静态资源内容</h3><ul><li>通常，配置文件包含几个server块指令，这些块指令通过不同的服务名字（server names）分发监听（distinguished listen）在不同的端口。</li><li>一旦nginx决定哪个服务器处理请求，它就会根据 server 块指令中定义的 location 指令的参数匹配请求头中指定的URI。</li><li>在server块指令中添加 location 指令：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></span><br><span class="line"><span class="title"> root</span> /data/www;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这个location块详述了与URI请求相匹配的“/”前缀。如果匹配到请求，这个 URI 会被转到 root 指令的路径。也就是说，所有请求文件都会直接请求到本地文件系统的/data/www路径。<strong><em>如果有多个匹配的location块，nginx会选择最长前缀的那个</em></strong>。上面提供的location块是长度只有1的最短前缀，因此，其它所有的location块都匹配失败的话，这个location块指令才会被使用。</p><ul><li>添加第二个location块：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">/images</span> &#123;</span><br><span class="line"> root /data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>这个会匹配以/images开头的请求（/也会匹配请求，只不过这个前缀更短）。</p></blockquote><ul><li>一个正常的服务器配置文件监听在80端口上，并且可以在本机上成功访问<a href="http://localhost/。" target="_blank" rel="noopener">http://localhost/。</a></li><li>以/images/开头请求的URI地址，服务器会从/data/images文件夹下面返回对应的文件。例如，请求/data/images/example.png这个文件，nginx服务器会返回<a href="http://localhost/images/example.png。" target="_blank" rel="noopener">http://localhost/images/example.png。</a></li><li><p>如果服务器没有这个文件会返回404 错误。不是以/images/开头的请求,就会被映射到/data/www 文件夹。例如, 请求nginx/data/www/some/example.html,服务器会响应<a href="http://localhost/some/example.html" target="_blank" rel="noopener">http://localhost/some/example.html</a> 这个文件。</p></li><li><p>为了应用一个新的配置文件，如果nginx还没有启动，就直接启动nginx服务器，如果已经启动，直接使用下面指令发送到nginx的主进程中，如下: 如果nginx尚未启动，则启动nginx，或者向nginx的主进程发送重新加载信号，执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>正向代理代理客户端，反向代理代理服务器</li><li>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</li></ul><h4 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h4><ul><li><p>例：使用 Ngwmeinx 反向代理 localhost:8000 直接跳转到 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       8000;</span><br><span class="line">      #listen       somename:8080;</span><br><span class="line">      server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          proxy_pass   http://localhost:3000;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h5><p>配置网络监听，主要语法结构有三种</p><ol><li><p>配置监听的IP地址</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen address<span class="string">[:port]</span> <span class="string">[default_server]</span> <span class="string">[setfib=number]</span> <span class="string">[backlog=number]</span> <span class="string">[rcvbuf=size]</span> <span class="string">[sndbuf=size]</span> <span class="string">[deferred]</span> <span class="string">[accept_filter=filter]</span> <span class="string">[bind]</span> <span class="string">[ssl]</span>;</span><br></pre></td></tr></table></figure></li><li><p>配置监听端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen port[default_server] [<span class="attribute">setfib</span>=number] [<span class="attribute">backlog</span>=number] [<span class="attribute">rcvbuf</span>=size] [<span class="attribute">sndbuf</span>=size] [<span class="attribute">accept_filter</span>=filter] [deferred] [bind] [<span class="attribute">ipv6only</span>=on|off] [ssl];</span><br></pre></td></tr></table></figure></li><li><p>配置 UNIX Domain Socket</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">listen</span> <span class="selector-tag">unix</span><span class="selector-pseudo">:path</span> <span class="selector-attr">[default_server]</span>  <span class="selector-attr">[backlog=number]</span> <span class="selector-attr">[rcvbuf=size]</span> <span class="selector-attr">[sndbuf=size]</span> <span class="selector-attr">[accept_filter=filter]</span> <span class="selector-attr">[deferred]</span> <span class="selector-attr">[bind]</span> <span class="selector-attr">[ssl]</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen *:80 | *:8080  #监听所有80端口和8080端口</span><br><span class="line">listen  IP_address:port   #监听指定的地址和端口号</span><br><span class="line">listen  IP_address     #监听指定ip地址所有端口</span><br><span class="line">listen port     #监听该端口的所有IP连接</span><br></pre></td></tr></table></figure></li><li><p>下面分别解释每个选项的具体含义：</p><blockquote><p><code>address</code> : IP地址，如果是 IPV6地址，需要使用中括号[] 括起来，比如[fe80::1]等。<br><code>address</code> : IP地址，如果是 IPV6地址，需要使用中括号[] 括起来，比如[fe80::1]等。<br><code>port</code> : 端口号，如果只定义了IP地址，没有定义端口号，那么就使用80端口。<br><code>path</code> : socket文件路径，如 var/run/nginx.sock等。<br><code>default_server</code> : 标识符，将此虚拟主机设置为 address:port 的默认主机。（在 nginx-0.8.21 之前使用的是 default 指令）<br><code>setfib</code> = number : Nginx-0.8.44 中使用这个变量监听 socket 关联路由表，目前只对 FreeBSD 起作用，不常用。<br><code>backlog</code> = number : 设置监听函数listen()最多允许多少网络连接同时处于挂起状态，在 FreeBSD 中默认为 -1,其他平台默认为511.<br><code>rcvbuf</code> = size : 设置监听socket接收缓存区大小。<br><code>sndbuf</code> = size : 设置监听socket发送缓存区大小。<br><code>deferred</code> : 标识符，将accept()设置为Deferred模式。<br><code>accept_filter = filter</code> : 设置监听端口对所有请求进行过滤，被过滤的内容不能被接收和处理，本指令只在 FreeBSD 和 NetBSD 5.0+ 平台下有效。filter 可以设置为 dataready 或 httpready 。<br><code>bind</code> : 标识符，使用独立的bind() 处理此address:port，一般情况下，对于端口相同而IP地址不同的多个连接，Nginx 服务器将只使用一个监听指令，并使用 bind() 处理端口相同的所有连接。<br><code>ssl</code> : 标识符，设置会话连接使用 SSL模式进行，此标识符和Nginx服务器提供的 HTTPS 服务有关。</p></blockquote></li></ul><h5 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h5><ul><li><p>用于虚拟主机的配置，通常两种配置方法：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">server_name</span></span> name...;</span><br></pre></td></tr></table></figure><ol><li><p>对于 name 来说，可以只有一个名称，也可以有多个名称，中间用空格隔开。而每个名字由两段或者三段组成，每段之间用 <code>.</code> 隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name baidu.com www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>可以使用通配符 <code>*</code>，但通配符只能用在由 <strong><em>三段字符</em></strong> 诸城的首段或者尾端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name baidu.com www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>可以使用正则表达式，用“~”作为正则表达式字符串的开始标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name ~^www\d+\.123\.com$;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>匹配优先级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 准确匹配 server_name</span><br><span class="line">2. 通配符在开始时匹配 server_name 成功</span><br><span class="line">3. 通配符在结尾时匹配 server_name 成功</span><br><span class="line">4. 正则表达式匹配 server_name 成功</span><br></pre></td></tr></table></figure></li></ul><ul><li>基于 IP 地址的虚拟主机配置<br>语法结构和基于域名匹配一样，而且不需要考虑通配符和正则表达式的问题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name 192.168.1.1</span><br></pre></td></tr></table></figure></li></ul><h5 id="location"><a href="#location" class="headerlink" title="location"></a>location</h5><p>用于匹配 URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> location [ = | ~ | ~* | ^~] uri &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><code>=</code> ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li><code>~</code> ：用于表示 uri 包含正则表达式，并且区分大小写。</li><li><code>~*</code> ：用于表示 uri 包含正则表达式，并且不区分大小写。</li><li><code>^~</code> ：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。<blockquote><p>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识</p></blockquote></li></ol><h5 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h5><p>设置代理服务器的地址,可以是 主机名称、IP 地址加端口，URI 等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prox_pass URL</span><br></pre></td></tr></table></figure></p><h2 id="配置图解"><a href="#配置图解" class="headerlink" title="配置图解"></a>配置图解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user nobody; # user 指定运行 nginx 的用户和组（第一个参数为用户第二个为组，这里只有用户）</span><br><span class="line">worker_processes  1; #运行时使用CPU的个数</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log; # 指定错误日志为 logs/ 目录下的 error.log 文件</span><br><span class="line">#error_log  logs/error.log  notice; # 指定错误日志，并指定写入格式为 notice</span><br><span class="line">#error_log  logs/error.log  info; # 指定错误日志，并指定写入格式为 info</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid; # 指定 pid 文件（存放主进程 pid 号）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #一个woeker进程的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#Nginx用作虚拟主机时使用。每一个server模块生成一个虚拟主机。</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #定义MIME类型和后缀名关联的文件的位置</span><br><span class="line">    default_type  application/octet-stream; #指定mime.types文件中没有记述到的后缀名的处理方法</span><br><span class="line"></span><br><span class="line">    # 写入格式 main 的内容格式如下</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main; # 指定访问日志和写入格式为 main</span><br><span class="line"></span><br><span class="line">    sendfile        on;  #是 否使用OS的sendfile函数来传输文件</span><br><span class="line">    #tcp_nopush     on; # 启用或者禁用使用套接字选项（仅在 sendfile 使用时使用）</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;  # 0 值禁用保持活动的客户端连接</span><br><span class="line">    keepalive_timeout  65;  #HTTP连接的持续时间。设的太长会使无用的线程变的太多</span><br><span class="line"></span><br><span class="line">    #gzip  on; # 启用或者禁用 gzip</span><br><span class="line"></span><br><span class="line">    # 虚拟主机配置模块</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8888; #监听端口</span><br><span class="line"></span><br><span class="line">        server_name  localhost; #服务地址</span><br><span class="line"></span><br><span class="line">        charset utf-8;   #编码方式</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #root /var/www; #你的网站根目录</span><br><span class="line">        root  /Users/b/Desktop;</span><br><span class="line"></span><br><span class="line">        error_log  logs/error.log;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location  /a/ &#123;</span><br><span class="line">            alias /Users/b/Desktop/Nginx_files/; # 别名</span><br><span class="line">            index  6.gif IMG_2021.jpg;  # 定义索引，按顺序匹配</span><br><span class="line">        &#125;</span><br><span class="line">        #若按照上述配置的话，则访问/a/目录里面的文件时，ningx会自动去/Users/b/Desktop/Nginx_files/目录找文件</span><br><span class="line"></span><br><span class="line">        # 将特定的文件或目录重新定位，如 php 文件，image 目录等</span><br><span class="line">        location /Nginx_files/ &#123;</span><br><span class="line">            root  /Users/b/Desktop;</span><br><span class="line">            index  6.gif IMG_2021.jpg;  # 定义索引，按顺序匹配</span><br><span class="line">        &#125;</span><br><span class="line">        #若按照这种配置的话，则访问/Nginx_files/目录下的文件时，nginx会去/Users/b/Desktop/Nginx_files/目录下找文件。</span><br><span class="line">        error_page  404              /404.html;  # 定义显示 404 错误的 uri</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line"></span><br><span class="line">        location = /50x.html &#123;   # location 精准匹配 &apos;/50x.html&apos;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;  # 正则表达式: .php文件走的路径</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;  #走fastcgi 路径</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name; #定义的根目录 以及 请求的脚名</span><br><span class="line">        #    include        fastcgi_params; # 请求参数</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>苗泽老师的《Nginx高性能Web服务器详解》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（状态模式）</title>
      <link href="/2019/09/06/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/09/06/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>一个对象有状态变化</li><li>每次状态变化都会触发一个逻辑</li><li>不能总是用 if…else 来控制</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handel() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`turn to <span class="subst">$&#123; <span class="keyword">this</span>.color &#125;</span> light`</span>);</span><br><span class="line">    context.setState(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> green = <span class="keyword">new</span> State(<span class="string">'green'</span>);</span><br><span class="line"><span class="keyword">let</span> yellow = <span class="keyword">new</span> State(<span class="string">'yellow'</span>);</span><br><span class="line"><span class="keyword">let</span> red = <span class="keyword">new</span> State(<span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line">green.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br><span class="line"></span><br><span class="line">yellow.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br><span class="line"></span><br><span class="line">red.handel();</span><br><span class="line"><span class="built_in">console</span>.log(context.getState());</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>ES6 Promise</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（迭代器模式）</title>
      <link href="/2019/09/05/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/09/05/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>顺序访问一个集合</li><li>使用者无需知道集合的内部结构（封装）</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(container) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = container.list;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.list[<span class="keyword">this</span>.index++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.index &lt; <span class="keyword">this</span>.list.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(list) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = list</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成遍历器</span></span><br><span class="line">  getIterator() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Iterator(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> container = <span class="keyword">new</span> Container(arr);</span><br><span class="line"><span class="keyword">let</span> iterator = container.getIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>jQuery each</li><li><p>ES6 Iterator</p><ul><li>ES6 语法中，有序集合的数据类型已经有很多</li><li><p>Array Map Set String TypedArray arguments NodeList</p><ul><li>都有 <code>[Symbol.iterator]</code> 属性</li><li>属性值是函数，执行函数返回一个迭代器</li><li>迭代器有 <code>next</code> 方法可以顺序迭代子元素</li><li>可运行 <code>Array.prototype[Symbol.iterator]</code> 测试</li><li><p>实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 生成遍历器</span></span><br><span class="line">  <span class="keyword">let</span> iterator = data[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> item;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    item = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (!item.done) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (!item.done)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">each(arr);</span><br></pre></td></tr></table></figure></li><li><p>for…of 语法糖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> data)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">each(arr);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>需要有一个统一的遍历接口来遍历所有的数据类型</p></li><li>（Object 不是有序集合，可以用 Map 代替）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（观察者模式）</title>
      <link href="/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>发布 &amp; 订阅</li><li>一对多</li><li>主题 和 观察者分离，不是主动触发而是被动监听，两者解耦</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.observers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getState()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state</span><br><span class="line">    <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notifyAllObservers()&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      observer.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  attach(observer)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, subject)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.subject = subject</span><br><span class="line">    <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> update, state: <span class="subst">$&#123; <span class="keyword">this</span>.subject.getState() &#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">'o1'</span>, s)</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer(<span class="string">'o2'</span>, s)</span><br><span class="line"></span><br><span class="line">s.setState(<span class="number">1</span>)</span><br><span class="line">s.setState(<span class="number">2</span>)</span><br><span class="line">s.setState(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>网页事件绑定</li><li>Promise 的 then</li><li>jQuery callbacks</li><li>vue 和 React 组件声明周期触发</li><li><p>nodejs 自定义事件</p><ul><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter1 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="comment">// 监听 some 事件</span></span><br><span class="line">emitter1.on(<span class="string">'some'</span>, info =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>, info);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听 some 事件</span></span><br><span class="line">emitter1.on(<span class="string">'some'</span>, info =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>, info);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 触发 some 事件</span></span><br><span class="line">emitter1.emit(<span class="string">'some'</span>,<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xxx = <span class="keyword">new</span> Dog(<span class="string">'xxx'</span>);</span><br><span class="line">xxx.on(<span class="string">'bark'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'barked-1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">xxx.on(<span class="string">'bark'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="string">'barked-2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">xxx.emit(<span class="string">'bark'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="网页事件绑定"><a href="#网页事件绑定" class="headerlink" title="网页事件绑定"></a>网页事件绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（外观模式）</title>
      <link href="/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>为子系统中的一组接口提供了一个高层接口</li><li>使用者使用这个高层接口</li><li>业务用的比较多</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（代理模式）</title>
      <link href="/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/26/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>使用者无权访问目标对象</li><li>中间加代理，通过代理做授权和控制</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadImg</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fileName)&#123;</span><br><span class="line">    <span class="keyword">this</span>.fileName = fileName</span><br><span class="line">    <span class="keyword">this</span>.loadFromDisk()</span><br><span class="line">  &#125;</span><br><span class="line">  loadFromDisk()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'loading...'</span> + <span class="keyword">this</span>.fileName);</span><br><span class="line">  &#125;</span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'display...'</span> + <span class="keyword">this</span>.fileName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fileName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.realImg = <span class="keyword">new</span> ReadImg(fileName)</span><br><span class="line">  &#125;</span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="keyword">this</span>.realImg.display()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg()</span><br><span class="line">proxyImg.display()</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>网页事件代理（冒泡模型）</li><li>jQuery的$.proxy</li><li><p>ES6 Proxy</p><h3 id="网页事件代理（冒泡模型）"><a href="#网页事件代理（冒泡模型）" class="headerlink" title="网页事件代理（冒泡模型）"></a>网页事件代理（冒泡模型）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> div1 = <span class="built_in">document</span>.querySelector(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="actionscript">  div1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> &#123; target &#125; = e;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (target.nodeName === <span class="string">'A'</span>) &#123;</span></span><br><span class="line"><span class="undefined">      alert(target.innerHTML)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ES6-Proxy"><a href="#ES6-Proxy" class="headerlink" title="ES6 Proxy"></a>ES6 Proxy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">name: <span class="string">'xxx'</span>,</span><br><span class="line">age: <span class="number">25</span>,</span><br><span class="line">phone: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="built_in">Proxy</span>(star, &#123;</span><br><span class="line">  get(target ,key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'phone'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'321'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'price'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="number">12000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set(target, key, value, receiver) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'customPrice'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'价格太低'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agent.phone);</span><br><span class="line"><span class="built_in">console</span>.log(agent.name);</span><br><span class="line"><span class="built_in">console</span>.log(agent.age);</span><br><span class="line">agent.customPrice = <span class="number">1000000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代理模式-VS-适配器模式"><a href="#代理模式-VS-适配器模式" class="headerlink" title="代理模式 VS 适配器模式"></a>代理模式 VS 适配器模式</h2><ul><li>适配器模式：提供一个不同的接口</li><li>代理模式：提供一个一模一样的接口</li></ul><h2 id="代理模式-VS-装饰器模式"><a href="#代理模式-VS-装饰器模式" class="headerlink" title="代理模式 VS 装饰器模式"></a>代理模式 VS 装饰器模式</h2><ul><li>装饰器模式：扩展功能，原有功能不变且可以直接使用</li><li>代理模式：显示原有功能，但是经过限制或者阉割之后的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（装饰器模式）</title>
      <link href="/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>为对象添加新功能</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>旧接口的封装</li><li>Vue computed</li><li>ES7<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  npm i babel-plugin-transform-decorators-legacy -D</span></span><br><span class="line"><span class="comment">// .babelrc "plugins": ["transform-decorators-legacy"]</span></span><br><span class="line">@testDec</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isDec = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(target.prototype, ...list)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  foo()&#123;</span><br><span class="line">    alert(<span class="string">'foo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyClass()</span><br><span class="line">obj.foo()</span><br></pre></td></tr></table></figure></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  draw()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'圆'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">    <span class="keyword">this</span>.circle = circle</span><br><span class="line">  &#125;</span><br><span class="line">  draw()&#123;</span><br><span class="line">    <span class="keyword">this</span>.circle.draw()</span><br><span class="line">    <span class="keyword">this</span>.setRedBorder(circle)</span><br><span class="line">  &#125;</span><br><span class="line">  setRedBorder(circle)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红色边框'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle()</span><br><span class="line">circle.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle)</span><br><span class="line">dec.draw()</span><br></pre></td></tr></table></figure><h2 id="装饰方法"><a href="#装饰方法" class="headerlink" title="装饰方法"></a>装饰方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">this</span>.last = <span class="string">'B'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @readonly</span><br><span class="line">  name()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.last&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name ,descriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target,name,descriptor);</span><br><span class="line">  <span class="keyword">let</span> oldValue = descriptor.value</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`calling <span class="subst">$&#123;name&#125;</span> width`</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">  @log</span><br><span class="line">  add(a, b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> math = <span class="keyword">new</span> <span class="built_in">Math</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="core-decorators"><a href="#core-decorators" class="headerlink" title="core-decorators"></a>core-decorators</h2><ul><li><p>装饰器库</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i core-decorators -S</span><br></pre></td></tr></table></figure><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><ul><li>deprecate</li><li>readonly</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（适配器模式）</title>
      <link href="/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>旧接口和现有接口不一致，需要转换</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>旧接口的封装</li><li>Vue computed</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">  specificRequest()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'220v'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.adaptee = <span class="keyword">new</span> Adaptee()</span><br><span class="line">  &#125;</span><br><span class="line">  request()&#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="keyword">this</span>.adaptee.specificRequest()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'110v'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="keyword">new</span> Target()</span><br><span class="line">target.request()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（单例模式）</title>
      <link href="/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>系统中被唯一使用</li><li>一个类只有一个实例</li><li>强依赖 于 private</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p>登录框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">  &#125;</span><br><span class="line">  show()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'show'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>  alert(<span class="string">'已经显示'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'show'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'显示成功'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  hide() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.state === <span class="string">'hide'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> alert(<span class="string">'已经隐藏'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'隐藏成功'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginForm.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> LoginForm()</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> login = LoginForm.getInstance()</span><br><span class="line">login.show()</span><br></pre></td></tr></table></figure></li><li><p>购物车</p></li><li>jQuery 只有一个 $<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.jQuery != <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.jQuery</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SingleObject.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> SingleObject()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = SingleObject.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="keyword">let</span> obj2 = SingleObject.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（工厂模式）</title>
      <link href="/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>将 new 操作单独封装</li><li>遇到 new 时，可以考虑使用 工厂模式</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  init()&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">  create(name)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> creator = <span class="keyword">new</span> Creator()</span><br><span class="line"><span class="keyword">let</span> p = creator.create(<span class="string">'demo'</span>)</span><br><span class="line">p.init()</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>jQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector)&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   append(node)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>React.createElement</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（设计原则）</title>
      <link href="/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%89/"/>
      <url>/2019/08/19/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="何为设计"><a href="#何为设计" class="headerlink" title="何为设计"></a>何为设计</h2><ul><li>按照一种思路或标准来实现功能</li><li>功能相同，可以用不同的方案来实现</li><li><p>随着需求的增加，设计的作用才能体现出来</p><h3 id="《UNIX-LINUX设计哲学》"><a href="#《UNIX-LINUX设计哲学》" class="headerlink" title="《UNIX/LINUX设计哲学》"></a>《UNIX/LINUX设计哲学》</h3><ol><li>小即是美</li><li>让每个程序只做好一件事</li><li>快速建立原型</li><li>舍去高效率而取可移植性</li><li>采用纯文本来存储数据</li><li>充分利用软件的杠杆效应</li><li>使用 shell 脚本来提高杠杆效应和可移植性</li><li>避免强制性的用户界面</li><li>让每个程序都成为过滤器</li><li>允许用户定制环境</li><li>尽量使操作系统内核小而轻量化</li><li>使用小写字母并尽量简写</li><li>沉默是金</li><li>各部分之和大于整体</li><li>寻求百分之90的解决方案</li></ol><h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><ul><li>明白每个设计的道理和用意</li><li>通过经典应用体会他的真正使用场景</li><li>自己编码时多思考，尽量模仿（刻意训练）</li></ul></li></ul><h2 id="SOLID五大设计原则"><a href="#SOLID五大设计原则" class="headerlink" title="SOLID五大设计原则"></a>SOLID五大设计原则</h2><ul><li>S：单一职责原则</li><li>O：开放封闭原则</li><li>L：李氏置换原则</li><li>I：接口堵路原则</li><li><p>D：依赖倒置原则</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><ul><li>一个程序只做好一件事</li><li>如果功能过于浮渣就拆分开，每个部分保持独立</li></ul><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>软件设计的终极目标</li></ul><h3 id="李氏置换原则"><a href="#李氏置换原则" class="headerlink" title="李氏置换原则"></a>李氏置换原则</h3><ul><li>子类能够覆盖父类</li><li>父类能处闲的地方子类就能出现</li><li>JS 种使用较少 </li></ul><h3 id="接口独立原则"><a href="#接口独立原则" class="headerlink" title="接口独立原则"></a>接口独立原则</h3><ul><li>保持接口的单一独立，避免出现“胖接口”</li></ul><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现 </li></ul></li></ul><h2 id="从设计到模式"><a href="#从设计到模式" class="headerlink" title="从设计到模式"></a>从设计到模式</h2><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><ul><li>创建型</li><li>组合型</li><li><p>行为型</p><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul><li>工厂模式（工厂方法模式、抽象工厂模式、建造者模式）</li><li>单例模式</li><li>原型模式</li></ul><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul><li>策略模式</li><li>模板方法模式</li><li>观察者模式（JS中用的多）</li><li>迭代器模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack搭建简单环境</title>
      <link href="/2019/07/30/webpack%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/07/30/webpack%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化-npm"><a href="#初始化-npm" class="headerlink" title="初始化 npm"></a>初始化 npm</h2><blockquote><p>npm init</p></blockquote><h2 id="安装-webpack、webpack-cli"><a href="#安装-webpack、webpack-cli" class="headerlink" title="安装 webpack、webpack-cli"></a>安装 webpack、webpack-cli</h2><blockquote><p>npm i webpack webpack-cli -S</p></blockquote><h2 id="新建-webpack-dev-config-js"><a href="#新建-webpack-dev-config-js" class="headerlink" title="新建 webpack.dev.config.js"></a>新建 webpack.dev.config.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="新建-src-目录"><a href="#新建-src-目录" class="headerlink" title="新建 src 目录"></a>新建 src 目录</h2><ul><li>src<ul><li>index.js</li></ul></li><li>index.html</li></ul><h2 id="在-package-json-配置"><a href="#在-package-json-配置" class="headerlink" title="在 package.json 配置"></a>在 package.json 配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">      <span class="attr">"test"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"dev"</span>: <span class="string">"webpack --config ./webpack.dev.config --mode development"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>webpack-dev-server </li><li>html-webpack-plugin<blockquote><p>npm i webpack-dev-server html-webpack-plugin -S</p></blockquote></li></ul><h2 id="修改-webpack-dev-config-js"><a href="#修改-webpack-dev-config-js" class="headerlink" title="修改 webpack.dev.config.js"></a>修改 webpack.dev.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">"./release/bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname,<span class="string">'./release'</span>), <span class="comment">//根目录</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">9000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h2><blockquote><p>“dev”: “webpack-dev-server –config ./webpack.dev.config –mode development”</p></blockquote><h2 id="安装-babel-解析-ES6"><a href="#安装-babel-解析-ES6" class="headerlink" title="安装 babel 解析 ES6"></a>安装 babel 解析 ES6</h2><ul><li>babel-core</li><li>babel-loader</li><li>babel-polyfill</li><li>babel-preset-env</li><li>babel-preset-latest<blockquote><p>npm i babel-core babel-loader babel-polyfill babel-preset-env babel-preset-latest -S</p></blockquote></li></ul><h2 id="新建-babelrc"><a href="#新建-babelrc" class="headerlink" title="新建 .babelrc"></a>新建 .babelrc</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"latest"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-webpack-dev-config-中配置-loader"><a href="#在-webpack-dev-config-中配置-loader" class="headerlink" title="在 webpack.dev.config 中配置 loader"></a>在 webpack.dev.config 中配置 loader</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: /\.js?$/,</span><br><span class="line">      exclude: /(node_modules)/,</span><br><span class="line">      loader: 'babel-loader'</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式（面向对象）</title>
      <link href="/2019/07/30/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
      <url>/2019/07/30/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>学会设计模式，可以帮你写更好的代码</li><li>编程应该 <strong>简单、抽象</strong></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>数据结构化</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>类：模板</li><li>对象：实例</li></ul><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul><li>继承 <ul><li>继承可以将公共方法抽离出来，提高复用，减少冗余</li></ul></li><li>封装（ES6不支持，ts 支持）<ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开放</li><li>减少耦合，不该外露不外露</li><li>利于数据、接口的权限管理</li></ul></li><li>多态 <ul><li>同一个接口不同，不同表现</li><li>JS 应用极少</li><li>保持子类的开放性和灵活性</li><li>面向接口编程</li></ul></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector)&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   append(node)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age= age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat()&#123;</span><br><span class="line">    alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  speak()&#123;</span><br><span class="line">    alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'webPack'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alert(p.getName())</span><br><span class="line"></span><br><span class="line">p.eat()</span><br><span class="line">p.speak()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age);</span><br><span class="line">    <span class="keyword">this</span>.number = number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  study() &#123;</span><br><span class="line">    alert(<span class="string">`学号：<span class="subst">$&#123; <span class="keyword">this</span>.number &#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Student(<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">w.study();</span><br><span class="line">w.eat();</span><br><span class="line">w.speak();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP</title>
      <link href="/2019/07/16/TCP-IP/"/>
      <url>/2019/07/16/TCP-IP/</url>
      
        <content type="html"><![CDATA[<h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><ul><li>大多数的网络应用程序都被设计成了 <strong>客户端 - 服务器</strong> 模式</li><li>双方都有对应的 <strong>一或多个</strong> 协议进行通讯</li><li>链路层、网络层、运输层 一般在<strong>内核</strong>中执行，应用程序通常是用户进程</li><li>链路层、网络层、运输层 关注<strong>通讯</strong>细节</li><li>应用层 关注<strong>应用程序</strong></li><li>应用层和运输层使用端到端（end-to-end）协议<br>-</li></ul><h2 id="链路层（以太网-ARP-硬件接口）"><a href="#链路层（以太网-ARP-硬件接口）" class="headerlink" title="链路层（以太网/ARP/硬件接口）"></a>链路层（以太网/ARP/硬件接口）</h2><p>处理与电缆（或其他任何传输媒介）的物理接口细节</p><h2 id="网络层（IP-ICMP-IGMP）"><a href="#网络层（IP-ICMP-IGMP）" class="headerlink" title="网络层（IP/ICMP/IGMP）"></a>网络层（IP/ICMP/IGMP）</h2><p>处理分组在网络中的活动，例如分组选路</p><ul><li>提供逐跳协议（hop-to-hop）</li><li>网络ip提供的是一种不可靠的服务，他只是尽可能快的把分组从源结点送到目的结点，但不提供可靠性保障</li><li>ICMP 是 IP 协议的附属协议（告诉你出问题的原因）</li></ul><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><h2 id="运输层（TCP-UDP）"><a href="#运输层（TCP-UDP）" class="headerlink" title="运输层（TCP/UDP）"></a>运输层（TCP/UDP）</h2><p>为两台主机上的应用程序提供端到端的通讯</p><ul><li>TCP 在不可靠的IP层上提供了一个可靠的运输层</li><li>UDP 不可靠</li></ul><h2 id="应用层（FTP）"><a href="#应用层（FTP）" class="headerlink" title="应用层（FTP）"></a>应用层（FTP）</h2><p>处理特定的应用程序细节</p><ul><li>互联网的目的之一就是在应用程序中隐藏所有的物理细节</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆</title>
      <link href="/2019/06/13/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
      <url>/2019/06/13/%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><ul><li>本质是一种 <strong>完全二叉树</strong></li><li>有 <strong>最小堆</strong> 和 <strong>最大堆</strong> 两种</li><li>二叉堆的根节点叫做 <strong>堆顶</strong></li><li>最大堆的堆顶是整个堆中的 <strong>最大元素</strong></li><li>最小堆的堆顶是整个堆中的 <strong>最小元素</strong></li></ul><h2 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>大于或等于</strong> 它左、右孩子节点的值</p><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><p>任何一个 <strong>父节点</strong> 的值，都 <strong>小于或等于</strong> 它左、右孩子节点的值</p><h2 id="二叉堆的自我调整"><a href="#二叉堆的自我调整" class="headerlink" title="二叉堆的自我调整"></a>二叉堆的自我调整</h2><p>把一个不符合堆性质的完全二叉树，调整成一个堆，操作有</p><ul><li>插入节点</li><li>删除节点</li><li>构建二叉堆</li></ul><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><ol><li>二叉堆插入节点时，插入位置是完全二叉树的 <strong>最后</strong> 一个位置</li><li>新节点通过与父节点比较位置和 <strong>上浮</strong> 来确认节点的位置</li></ol><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ol><li>二叉堆删除的是 <strong>堆顶</strong> 的节点</li><li>此时为了维持二叉堆的结构，需要用 <strong>最后一个</strong> 节点临时补充到堆顶的位置</li><li>通过 <strong>下沉</strong> 来确认节点的位置</li></ol><h3 id="构建二叉堆"><a href="#构建二叉堆" class="headerlink" title="构建二叉堆"></a>构建二叉堆</h3><ul><li>通过所有子叶 <strong>下沉</strong> 实现</li><li>下沉从最后一个节点开始</li><li>二叉堆的所有节点都存储在 <strong>数组</strong> 中</li><li>如果父节点的下标是 <strong>parent</strong>，则左孩子的下标为 <strong>2 * parent + 1</strong>，右孩子的下标为 <strong>2 * parent + 2</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/06/13/%E6%A0%91/exercise/"/>
      <url>/2019/06/13/%E6%A0%91/exercise/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Binary Tree</title>  <style>    .root {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .root div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }  </style></head><body><div class="root">  1  <div>2    <div>4</div>    <div>5</div>  </div>  <div>3    <div>6</div>    <div>7</div>  </div></div></body><script>  /**   * 深度优先遍历的递归写法   * 原理：递归的回溯性   */  class TravelTree {    constructor() {      this.nodeList = [];    }    preOrder = node => {      if (node) {        this.nodeList.push(node.firstChild.textContent.trim());        this.preOrder(node.firstElementChild);        this.preOrder(node.lastElementChild);      }    };    inOrder = node => {      if (node) {        this.inOrder(node.firstElementChild);        this.nodeList.push(node.firstChild.textContent.trim());        this.inOrder(node.lastElementChild);      }    };    postOrder = node => {      if (node) {        this.postOrder(node.firstElementChild);        this.postOrder(node.lastElementChild);        this.nodeList.push(node.firstChild.textContent.trim());      }    };    reset() {      this.nodeList = [];    }  }  let node = document.querySelector('.root');  let tree = new TravelTree();  console.log('TravelTree');  tree.reset();  tree.preOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.inOrder(node);  console.log(tree.nodeList);  tree.reset();  tree.postOrder(node);  console.log(tree.nodeList);  // 深度优先遍历的非递归写法  class StackTree {    constructor() {      this.nodeList = [];      this.stack = []    }    preOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        // 进栈 将所有左节点压栈        while (treeNode) {          this.stack.push(treeNode);          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.firstElementChild;        }        // 出栈        if (this.stack.length) {          treeNode = this.stack.pop();          treeNode = treeNode.lastElementChild;        }      }    }    inOrder(node) {      let treeNode = node;      while (treeNode || this.stack.length) {        while (treeNode) {          this.stack.push(treeNode);          treeNode = treeNode.firstElementChild;        }        if (this.stack.length) {          treeNode = this.stack.pop();          this.nodeList.push(treeNode.firstChild.textContent.trim());          treeNode = treeNode.lastElementChild;        }      }    }    /*    *  将根节点压入第一个栈    *  从第一个栈中弹出一个元素，压入第二个栈    *  然后分别将该节点的左右孩子压入第一个栈    *  重复步骤2和步骤3直到第一个栈为空    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。    */    postOrder(node) {      let treeNode = node;      this.stack.push(treeNode);      while (this.stack.length) {        treeNode = this.stack.pop();        this.nodeList.unshift(treeNode.firstChild.textContent.trim());        if (treeNode.firstElementChild) {          this.stack.push(treeNode.firstElementChild)        }        if (treeNode.lastElementChild) {          this.stack.push(treeNode.lastElementChild)        }      }    }    reset() {      this.stack = [];      this.nodeList = [];    }  }  let stackTree = new StackTree();  console.log('stackTree');  stackTree.preOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.inOrder(node);  console.log(stackTree.nodeList);  stackTree.reset();  stackTree.postOrder(node);  console.log(stackTree.nodeList);  // 广度度优先遍历非递归  class WidthTravelTree {    constructor() {      this.nodeList = [];      this.stack = []    }    // 队列    widthTravel(node) {      if (node) {        this.stack.push(node);        this.nodeList.push(node.firstChild.textContent.trim());        while (this.stack.length) {          let item = this.stack.shift();          if (item.firstElementChild) {            this.nodeList.push(item.firstElementChild.firstChild.textContent.trim());            this.stack.push(item.firstElementChild);          }          if (item.lastElementChild) {            this.nodeList.push(item.lastElementChild.firstChild.textContent.trim());            this.stack.push(item.lastElementChild)          }        }      }    }  }  console.log('WidthTravelTree');  let widthTravelTree = new WidthTravelTree();  widthTravelTree.widthTravel(node);  console.log(widthTravelTree.nodeList);</script></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/06/10/%E6%A0%91/demo/"/>
      <url>/2019/06/10/%E6%A0%91/demo/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang=""><head><meta name="generator" content="Hexo 3.8.0">  <meta charset="UTF-8">  <title>Document</title>  <style>    * {      margin: 0;      padding: 0;    }    .wrap {      display: flex;      border: 1px solid #000;      width: 600px;      margin: 0 auto;      height: 150px;      align-items: center;      justify-content: center;    }    .wrap div {      display: flex;      height: 70%;      width: 44%;      margin: 0 3%;      border: 1px solid #000;      justify-content: center;      align-items: center;      background: #fff;    }    .btn-wrap {      text-align: center;      padding-top: 20px;    }    .btn-wrap button {      display: inline-block;      padding: 4px 10px;    }  </style></head><body><div class="wrap">  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div>  <div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>    <div>      <div>        <div></div>        <div></div>      </div>      <div>        <div></div>        <div></div>      </div>    </div>  </div></div><div class="btn-wrap">  <button>前序</button>  <button>中序</button>  <button>后序</button></div><script>  let wrap = document.querySelector(".wrap");  let btn_wrap = document.querySelector(".btn-wrap");  let btn1 = btn_wrap.querySelectorAll("button")[0];  let btn2 = btn_wrap.querySelectorAll("button")[1];  let btn3 = btn_wrap.querySelectorAll("button")[2];  let arr = [];  let last;  let toggle = false;  //给按钮绑定事件  btn1.onclick = function () {    if (!toggle) {      toggle = true;      reset();      preOrder(wrap);      showWay();    }  };  btn2.onclick = function () {    if (!toggle) {      toggle = true;      reset();      inOrder(wrap);      showWay();    }  };  btn3.onclick = function () {    if (!toggle) {      toggle = true;      reset();      postOrder(wrap);      showWay();    }  };  //二叉树的遍历的三种方式  //(1)前序遍历（DLR)  function preOrder(node) {    if (node) {      arr.push(node);      preOrder(node.firstElementChild);      preOrder(node.lastElementChild);    }  }  //(2)中序遍历（LDR）  function inOrder(node) {    if (node) {      inOrder(node.firstElementChild);      arr.push(node);      inOrder(node.lastElementChild);    }  }  //(3)后序遍历（LRD）  function postOrder(node) {    if (node) {      postOrder(node.firstElementChild);      postOrder(node.lastElementChild);      arr.push(node);    }  }  //显示遍历的过程  function showWay() {    for (let i = 0; i < arr.length; i++) {      setTimeout(function (i) {        return function () {          if (i === arr.length - 1) {            toggle = false;          }          if (last) {            last.style.background = "white";          }          arr[i].style.background = "red";          last = arr[i];        }      }(i), i * 1000)    }  }  //初始化  function reset() {    arr = [];    if (last) {      last.style.background = "white";    }  }</script></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2019/05/15/%E6%A0%91/"/>
      <url>/2019/05/15/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树-tree"><a href="#树-tree" class="headerlink" title="树 tree"></a>树 tree</h1><ul><li>树（tree）是n（n&gt;=0）个节点的有限集合。</li><li>当 n=0 时，称为空树</li><li>在任意一个非空树中有如下特点<ul><li>有且仅有一个特定的称为 <strong>根（root）</strong> 的节点</li><li>当 n&gt;1 时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，称为根的 <strong>子树</strong></li><li>节点的末端，叫做 <strong>叶子节点（leaf）</strong></li></ul></li></ul><p><img src="tree.png" alt="例图"></p><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><ul><li>树的一种特殊结构</li><li>每个节点最多有两个子节点</li><li>二叉树节点的两个孩子节点，一个被称为 <strong>左孩子（left child）</strong>，一个被称为 <strong>右孩子（right child）</strong><ul><li>这两个孩子顺序固定，不可颠倒</li></ul></li><li>存储结构<ul><li>链式存储结构</li><li>数组</li></ul></li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><ul><li>一个二叉树的所有非叶子节点都存在左右孩子</li><li>所有叶子节点都在同一层级上</li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul><li>对一个有 n 个节点的二叉树，按层级顺序编号，则所有节点的编号为从 1 到 n 。如果这个树所有节点和同样深度的满二叉树的编号为从 1 到 n 的节点位置相同，则这个二叉树为完全二叉树</li></ul><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><ul><li>也叫二叉排序树</li><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子树也是二叉树查找</li><li>对于一个 <strong>节点分布相对均衡</strong> 的二叉查找树来说，如果节点总数是 <strong>n</strong>，那么搜索节点的时间复杂度为 <strong>O(logn)</strong>,和数的深度一样</li><li>二叉树的自平衡</li></ul><h3 id="二叉树与存储结构"><a href="#二叉树与存储结构" class="headerlink" title="二叉树与存储结构"></a>二叉树与存储结构</h3><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p>二叉树的每一个节点由三部分组成</p><ul><li>存储数据的 data 变量</li><li>指向左孩子的 left 指针</li><li>指向右孩子的 right 指针</li></ul><h4 id="数组存储结构"><a href="#数组存储结构" class="headerlink" title="数组存储结构"></a>数组存储结构</h4><ul><li>按照层级顺序把二叉树的节点放到数组的对应位置上</li><li>如果某一节点的左孩子或右孩子空缺，则数组的相应位置也空出来</li><li>假设一个父节点的下标为 <strong>parent</strong>，那么它的左孩子的下标为 <strong>2 * parent + 1</strong>，它的右孩子的下标为 <strong>2 * parent + 2</strong></li><li>假设一个左孩子的下标为 <strong>leftChilde</strong> ，那么他的父节点的下标为 <strong>(leftChild - 1) / 2</strong></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="二叉查找树（binary-search-tree）"><a href="#二叉查找树（binary-search-tree）" class="headerlink" title="二叉查找树（binary search tree）"></a>二叉查找树（binary search tree）</h4><p>二叉查找树在二叉树的基础上增加了以下条件</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左右子叶也是二叉树查找</li><li>时间复杂度 O(logn), n 为树的深度</li></ul><h4 id="维持相对顺序"><a href="#维持相对顺序" class="headerlink" title="维持相对顺序"></a>维持相对顺序</h4><ul><li>二叉查找树的左子树小于父节点，右子树大于父节点，保证了二叉树的有序性</li></ul><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><p>将 <strong>非线性的数据结构</strong> 转换成 <strong>线性的序列</strong></p><h4 id="深度优先遍历-demo"><a href="#深度优先遍历-demo" class="headerlink" title="深度优先遍历 (demo)"></a>深度优先遍历 (<a href="demo.html">demo</a>)</h4><p>偏向于深度，<strong>一头扎到底</strong>的访问方式</p><h5 id="前序遍历（DLR"><a href="#前序遍历（DLR" class="headerlink" title="前序遍历（DLR)"></a>前序遍历（DLR)</h5><ul><li>过程</li></ul><ol><li>先访问 <strong>根节点</strong></li><li>遍历 <strong>左子树</strong></li><li>遍历 <strong>右子树</strong></li></ol><ul><li>结果 : ABDECF</li></ul><h5 id="中序遍历（LDR）"><a href="#中序遍历（LDR）" class="headerlink" title="中序遍历（LDR）"></a>中序遍历（LDR）</h5><ul><li>过程<br>左 根 右</li><li>结果 : DBEACF</li></ul><h5 id="后序遍历（LRD）"><a href="#后序遍历（LRD）" class="headerlink" title="后序遍历（LRD）"></a>后序遍历（LRD）</h5><ul><li>过程<br>左 右 根</li><li>结果 ： DEBFCA</li></ul><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Binary Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.root</span> &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">      width: 600px;</span></span><br><span class="line"><span class="undefined">      margin: 0 auto;</span></span><br><span class="line"><span class="undefined">      height: 150px;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.root</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      height: 70%;</span></span><br><span class="line"><span class="undefined">      width: 44%;</span></span><br><span class="line"><span class="undefined">      margin: 0 3%;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">  1</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 深度优先遍历的递归写法</span></span><br><span class="line"><span class="undefined">   * 原理：递归的回溯性</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">TravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    preOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.preOrder(node.firstElementChild);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.preOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    inOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.inOrder(node.firstElementChild);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.inOrder(node.lastElementChild);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    postOrder = <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.postOrder(node.firstElementChild);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.postOrder(node.lastElementChild);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'.root'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> tree = <span class="keyword">new</span> TravelTree();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'TravelTree'</span>);</span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  tree.reset();</span></span><br><span class="line"><span class="undefined">  tree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(tree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 深度优先遍历的非递归写法</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">StackTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    preOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 进栈 将所有左节点压栈</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 出栈</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="actionscript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    inOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">while</span> (treeNode || <span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">while</span> (treeNode) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.firstElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="actionscript">          treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.nodeList.push(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined">          treeNode = treeNode.lastElementChild;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">    *  将根节点压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  从第一个栈中弹出一个元素，压入第二个栈</span></span><br><span class="line"><span class="undefined">    *  然后分别将该节点的左右孩子压入第一个栈</span></span><br><span class="line"><span class="undefined">    *  重复步骤2和步骤3直到第一个栈为空</span></span><br><span class="line"><span class="undefined">    *  执行结束，第二个栈中就保存了所有节点的后序遍历输出结果。依次将元素从第二个栈中弹出即可。</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    postOrder(node) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> treeNode = node;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.stack.push(treeNode);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="actionscript">        treeNode = <span class="keyword">this</span>.stack.pop();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.nodeList.unshift(treeNode.firstChild.textContent.trim());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (treeNode.firstElementChild) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.stack.push(treeNode.firstElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (treeNode.lastElementChild) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.stack.push(treeNode.lastElementChild)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// todo: 单个栈的实现方法</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    reset() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.stack = [];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> stackTree = <span class="keyword">new</span> StackTree();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'stackTree'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.preOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.inOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  stackTree.reset();</span></span><br><span class="line"><span class="undefined">  stackTree.postOrder(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(stackTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 广度度优先遍历非递归</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">WidthTravelTree</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.nodeList = [];</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.stack = []</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 队列</span></span></span><br><span class="line"><span class="undefined">    widthTravel(node) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (node) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.stack.push(node);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.nodeList.push(node.firstChild.textContent.trim());</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">while</span> (<span class="keyword">this</span>.stack.length) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> item = <span class="keyword">this</span>.stack.shift();</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (item.firstElementChild) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.nodeList.push(item.firstElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.stack.push(item.firstElementChild);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (item.lastElementChild) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.nodeList.push(item.lastElementChild.firstChild.textContent.trim());</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.stack.push(item.lastElementChild)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'WidthTravelTree'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> widthTravelTree = <span class="keyword">new</span> WidthTravelTree();</span></span><br><span class="line"><span class="undefined">  widthTravelTree.widthTravel(node);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(widthTravelTree.nodeList);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><ul><li>层序遍历<br><img src="each.png" alt="图">  </li></ul><h2 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h2><ul><li><a href="https://blog.51cto.com/9291927/2068745" target="_blank" rel="noopener">图片来源</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基础</title>
      <link href="/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据的组织、管理和存储格式</li><li>提高数据的访问和修改效率<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li><li><p>线性结构</p><ul><li>数组、链表</li><li>栈、对、列、哈希表</li></ul></li><li><p>树</p><ul><li>二叉树</li><li>二叉堆</li></ul></li><li><p>图</p></li><li>其他数据结构<ul><li>跳表、哈希链表、位图、散列表</li></ul></li></ul><h2 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 array"></a>数组 <code>array</code></h2><ul><li>有限个相同类型变量组成的有序集合</li><li>数组中的每一个变量被称为元素</li><li>数组是最简单最为常用的数据结构</li><li>在内存中顺序存储</li><li>读取数组元素和更新数组元素的时间复杂度都是 O(1)</li><li>数组的插入和删除操作的时间复杂度为 O(n)</li><li>适用于读操作多，写操作少的情景</li></ul><h2 id="链表-link-list"><a href="#链表-link-list" class="headerlink" title="链表 link list"></a>链表 <code>link list</code></h2><ul><li>链表是一种物理上非连续、非顺序的数据结构，由若干个节点(node)组成</li><li>链表中的第一个节点叫做节点头，最后一个节点被称为节点尾，尾节点的 next 指针指向空</li><li>在内存中随机存储</li><li>链表查询节点的最坏时间复杂度为 O(n)</li><li>链表更新、插入、删除节点的时间复杂度为 O(1)<br>– 适用于写操作多，读操作少的情景<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3></li><li>单向链表的每一个节点包涵两部分<ul><li>一部分存放数据变量data</li><li>另一部分是指向下一个节点的指针 next</li></ul></li><li>一级一级，单线传递<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4></li><li>每一个节点都拥有 data，next指针 和 prev指针</li><li>双向传递</li></ul><h2 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈 stack"></a>栈 <code>stack</code></h2><ul><li>一种线性数据结构</li><li>栈中元素只能先入后出（First In Last Out，简称 FILO）</li><li>最早进入的元素存放的位置叫栈底（bottom）</li><li>最后进入的元素存放的位置叫栈顶（top）</li><li>数据结构即可以用数组实现，也可以用链表实现<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3></li><li>入栈<ul><li>入栈操作（push）是把新元素放入栈中</li><li>只允许从栈顶一侧放入元素</li><li>新元素的位置成为新的栈顶</li></ul></li><li>出栈<ul><li>出栈操作（pop）是把元素从栈中弹出</li><li>只有栈顶元素才允许出栈</li><li>出栈元素的前一个元素会成为新的栈顶</li></ul></li><li>出栈和入栈的时间复杂度都是 O(1)<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3></li><li>历史回溯</li><li>面包屑导航</li></ul><h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列 queue"></a>队列 <code>queue</code></h2><ul><li>一种线性的数据结构</li><li>队列中的元素先入先出（First In First Out，简称 FIFO）</li><li>队列的出口端叫做队头（front）</li><li>队列的入口端叫做队尾（rear）<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3></li><li>入队<ul><li>入队（queue）是把新元素放入队列中</li><li>只允许在队尾的位置放置新元素</li><li>新元素的下一个位置将会成为下一个队尾</li></ul></li><li>出队<ul><li>出队（dequeue）是把元素移出队列，</li><li>只允许在队头一侧移出元素</li><li>出队元素后的一个元素将成为队头</li><li>队列循环</li></ul></li><li>出队和入队的时间复杂度都是 O(1)<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3></li><li>多线程，争夺公平锁的等待队列</li></ul><h2 id="双端队列-deque"><a href="#双端队列-deque" class="headerlink" title="双端队列 deque"></a>双端队列 <code>deque</code></h2><ul><li>综合栈和队列的优缺点</li></ul><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><ul><li>基于二叉堆实现</li></ul><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul><li>也叫哈希表（hash table）</li><li>提供了键（key）和值（value）的映射关系</li><li>只要给出一个 key,就可以高效的查找他说匹配的 Value，时间复杂度接近于 O(1)</li><li>本质是数组，通过哈希函数转换<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3></li><li><p>写操作（put）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>如果下标对应的位置没有元素，将键值对插入到当前位置</li><li>当下标对应的位置已经存在元素，就会出现<code>哈希冲突</code><ul><li>哈希冲突的主要解决方式是<code>开放寻址法</code>和<code>链表法</code></li></ul></li></ol></li><li><p>读操作（get）</p><ol><li>通过哈希函数，把 key 转换为数值下标</li><li>通过在链表内匹配 key 值，寻找节点</li></ol></li><li><p>扩容（resize）</p><ul><li>原因<ol><li>当经过多次元素插入，散列表达到一定饱和度时，key 映射位置发生冲突的概率会逐渐提高</li><li>大量元素拥挤在相同的数组下标位置，会形成很长的链表，对后续的读写抄作有很大的性能影响</li><li>这时，散列表需要扩展他的长度</li></ol></li><li>过程<ol><li>扩容，创建一个新的 Entry 空数组，长度是原数组的2倍</li><li>重新Hash，遍历原 Entry 数组，把所有的 Entry 重新 Hash 到新数组中 </li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2019/05/14/%E7%AE%97%E6%B3%95/"/>
      <url>/2019/05/14/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法algorithm"><a href="#算法algorithm" class="headerlink" title="算法algorithm"></a>算法<code>algorithm</code></h1><ul><li>来自数学领域的一个古老概念。</li><li>在计算机领域里，指一系列程序指令，用于处理特定的运算和逻辑能力</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>有简单的也有复杂的</li><li>有高效的也有笨拙的</li></ul><h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><ul><li>运算<ul><li>求两个数的最大公约数</li></ul></li><li>查找<ul><li>在数据库执行 SQL语句</li></ul></li><li>排序<ul><li>电商商品排序</li></ul></li><li>最优决策<ul><li>A星寻路算法</li></ul></li></ul><h2 id="算法好坏评判标准"><a href="#算法好坏评判标准" class="headerlink" title="算法好坏评判标准"></a>算法好坏评判标准</h2><p>其中算法好坏有很多标准，其中重要的两大标准是时间复杂度与空间复杂度</p><h3 id="渐进时间复杂度"><a href="#渐进时间复杂度" class="headerlink" title="渐进时间复杂度"></a>渐进时间复杂度</h3><ul><li>执行算法的时间成本</li><li>对算法运行时间长短的量度</li><li>若存在函数 f(n)，使得当 n 趋近于无穷大时，T(n)/f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作 T(n) = O(f(n))，称为 O(f(n))，O 为算法的渐进时间复杂度，简称为时间复杂度<h4 id="推导时间复杂度的基本原则"><a href="#推导时间复杂度的基本原则" class="headerlink" title="推导时间复杂度的基本原则"></a>推导时间复杂度的基本原则</h4></li><li>如果运行时间是常数量级，则用常数1表示</li><li>只保留时间函数中的最高阶项</li><li>如果最高阶项存在，则省去最高阶项前的系数<blockquote><p>当取值足够大时，O(1)&lt; O(logn)&lt; O(n)&lt; O(nlogn)&lt; O(n²)</p></blockquote></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li>执行算法的空间成本</li><li>算法在运行过程中临时占用存储空间大小的度量</li><li>程序占用空间大小的计算公式记作 S(n)=O(f(n))，其中 n 为问题的规模，f(n)为算法所占存储空间的函数<h4 id="空间复杂度的计算"><a href="#空间复杂度的计算" class="headerlink" title="空间复杂度的计算"></a>空间复杂度的计算</h4></li><li><p>常量空间</p><ul><li>当算法的存储空间大小固定，和输入的规模没有直接的关系时，空间复杂度记作 O(1)</li></ul></li><li><p>线性空间</p><ul><li>当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模 成中比时，空间复杂度记作 O(n)</li></ul></li><li><p>二维空间</p><ul><li>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模 n 成正比时，空间复杂度记作 O(n²)</li></ul></li><li><p>递归空间</p><ul><li>递归算法的空间复杂度和递归深度成正比</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Generator</title>
      <link href="/2019/05/13/Generator/"/>
      <url>/2019/05/13/Generator/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><code>Generator函数</code>是 ES6 提供的一种异步编程解决方案，语法行为与传统函数不同</li><li>语法上，可以将它理解成一个状态机，封装了多个内部状态</li><li>执行上，他是一个遍历器对象生成函数。<ul><li>执行 Generator函数 会返回一个遍历器对象，</li><li>返回的遍历器对象可以依次遍历Generator函数内部的每一个状态</li></ul></li><li><p>形式上，Generator函数是一个普通函数，但是有两个特征：</p><ol><li>function命令与函数名之间有一个星号</li><li>函数体内部使用 <code>yield</code> 语句来定义不同的内部状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 一个 Generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">hellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'he'</span>; <span class="comment">// 状态语句</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ll'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'ow'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>; <span class="comment">// 结束语句</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> hw = hellow();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Generator函数的调用方法和普通函数一样。但是，</p><ol><li>调用后该函数不会执行</li><li>返回的不是函数运行的结果，而是一个指向内部状态的指针对象，也就是遍历器对象（Iterator Object）</li><li>必须调用对象的<code>next</code>方法，使指针移向下一个状态</li><li>每次调用<code>next</code>方法，会返回一个包函<code>value</code>和<code>done</code>两个属性的对象。<ul><li>value：内部状态值</li><li>done：布尔值 ，表示是否遍历结束</li></ul></li></ol></li></ul><h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p><code>yield语句</code>就是暂停标志</p><h3 id="next方法的运行逻辑"><a href="#next方法的运行逻辑" class="headerlink" title="next方法的运行逻辑"></a>next方法的运行逻辑</h3><ol><li>遇到<code>yield</code>就暂停执行后边的操作，并将紧跟其后的表达式的值作为返回对象的value属性值</li><li>下一次调用 <code>next方法</code> 时会继续向下执行，知道遇到下一条<code>yield语句</code></li><li>如果没有遇到新的<code>yield语句</code>就一直运行到函数结束，直到<code>return语句</code>为止，并将<code>return语句</code>后面表达式的值作为返回对象的value属性值</li><li>如果没有<code>return语句</code>则返回undefined</li></ol><h3 id="yield语句与return语句"><a href="#yield语句与return语句" class="headerlink" title="yield语句与return语句"></a>yield语句与return语句</h3><ul><li>两者都返回紧跟在语句后面的表达式的值</li><li>yield语句具有记忆功能，return语句不具有此功能</li><li>一个函数只能执行一次return语句，但是可以执行多条yield语句</li></ul><h3 id="暂缓执行函数"><a href="#暂缓执行函数" class="headerlink" title="暂缓执行函数"></a>暂缓执行函数</h3><p>当<code>Generator函数</code>不包含<code>yield语句</code>时，就变成了一个暂缓执行函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f(); <span class="comment">// 此时不执行</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  g.next()  <span class="comment">// 只有调用 next 以后才执行</span></span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>yield语句</code>只能用在<code>Generator函数</code>中，用在其他地方会报错</li><li>不可以用在 <code>forEach</code>等方法的回调函数内，可以使用for循环代替</li><li>yield表达式如果在另一个表达式中，必须放在圆括号内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>+(<span class="keyword">yield</span> <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yield表达式作为函数参数或放在赋值表达式的右边可以不加括号</li></ul><h2 id="与Generator接口的关系"><a href="#与Generator接口的关系" class="headerlink" title="与Generator接口的关系"></a>与Generator接口的关系</h2><ol><li>任意一个对象的<code>Symbol.iterator</code>方法等于该对像的遍历器对象生成函数，调用该函数会返回该对象的一个遍历器对象</li><li>由于<code>Generator函数</code>就是遍历器生成函数，所以可以把<code>Generator</code>赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有<code>Iterator接口</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myIterable = [];</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log([...myIterable]) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>Generator函数</code>执行后，返回一个遍历器对象。该对象本身也具有<code>Symbol.iterator</code>属性，执行后返回自身<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line"><span class="built_in">console</span>.log(g[<span class="built_in">Symbol</span>.iterator] === g); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="next方法的参数"><a href="#next方法的参数" class="headerlink" title="next方法的参数"></a>next方法的参数</h2><ul><li><code>yield语句</code>本身没有返回值，或者说总是返回<code>undefined</code></li><li>next 方法可以带有一个参数，该参数会被当做上一条 <code>yield语句</code>的返回值</li><li>由于 next 方法的参数表示上一条<code>yield语句</code>的返回值，所以第一次使用 next 方法时，传递参数是无效的</li><li>如果希望第一次调用 next 方法时能过输入值，可以在 <code>Generator函数</code> 外再包一层</li></ul><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><ul><li>for…of 循环可以自动遍历 <code>Generator函数</code> 生成的 Iterator 对象，且此时不需要调用 next 方法。</li><li>一旦 next 方法的返回对象的 done 属性为 true，for…of循环就会终止，且不包含返回的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 1 2 不包含 return语句返回的 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><ul><li><code>Generator函数</code>返回的遍历器对象都有一个 throw 方法，可以在函数体外抛出错误，然后再 Generator函数 内捕获；反过来，<code>Generator函数</code>体内抛出的错误也可以被函数体外的 catch 捕获</li><li>如果 <code>Generator函数</code> 内部没有部署 try…catch 代码块，那么 throw 方法抛出的错误将被外部的 try…catch 代码块捕获</li><li>如果 <code>Generator函数</code> 内部部署了 try…catch 代码块，那么遍历器的 throw 方法抛出的错误不影响下一次遍历，否则遍历会终止</li><li>一旦<code>Genertator函数</code>执行过程中抛出错误，就不会往下执行了，如果此后调用 next 方法，将返回 {value: undefined, done: true} 这个对象</li><li>throw 方法执行后会附带执行下一条 yield 表达式，即附带执行一次 next 方法</li><li>throw 命令与 Generator.prototype.throw()方法互不影响<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> g = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> ;</span><br><span class="line">  &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>,e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><ul><li>该方法返回给定的值,并终结<code>Generator函数</code>的遍历</li><li><p>如果不提供参数，则返回值的 value 属性为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123;value: 1, done &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>); <span class="comment">// &#123;value: 'foo', done: true&#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123;value: undefined, deone: true&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>如果<code>Generator函数</code>内部有 try…finally 代码块，那么 return 方法会推迟到 finally 代码块执行完成在执行</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = f();</span><br><span class="line">g.next(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 2, done: false&#125;</span></span><br><span class="line">g.return(); <span class="comment">// &#123; value: 4, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 5, done: false&#125;</span></span><br><span class="line">g.next(); <span class="comment">// &#123; value: 7, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h2><ul><li><p>如果在一个<code>Generator函数</code>内调用另一个<code>Generator函数</code>，默认情况下是没有效果的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'b'</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// a 和 b 都是 Generator函数 在b中调用a不会生效</span></span><br></pre></td></tr></table></figure></li><li><p><code>yield*</code>，用来在一个<code>Generator函数</code>里执行另一个<code>Generator函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* a();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> b())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// 'a' 'b'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 yield 命令后面跟的是一个遍历器对象，那么需要在 yield 命令后面加上星号，表明返回的是一个遍历器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span> inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'colse'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = outer1();</span><br><span class="line">gen.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen.next().value; <span class="comment">// 返回一个遍历器对象</span></span><br><span class="line">gen.next().value; <span class="comment">// 'colse'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'open'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* inner();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'close'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen2 = outer2();</span><br><span class="line">gen2.next().value; <span class="comment">// 'open'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">gen2.next().value; <span class="comment">// 'close'</span></span><br></pre></td></tr></table></figure></li><li><p>yield* 后面的<code>Generator语句</code>没有 return 语句时等同于在<code>Generator函数</code>内部部署了一个 <code>for...of</code> 循环</p></li><li>yield<em> 后面的<code>Generator语句</code>有 return 语句时，需要用 `let value = yield</em> iterator` 的形式获取 return语句的值</li><li>如果被代理的<code>Generator语句</code>有 return 语句，那么可以向代理他的<code>Generator函数</code>返回数据</li><li>任何数据只要有<code>Iterator</code>接口，就可以被<code>yield*</code>遍历<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hellow'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="string">'he'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">a.next().value; <span class="comment">// 'hellow'</span></span><br><span class="line">a.next().value; <span class="comment">// 'h'</span></span><br><span class="line">a.next().value; <span class="comment">// 'e'</span></span><br><span class="line">a.next().value; <span class="comment">// '1'</span></span><br><span class="line">a.next().value; <span class="comment">// '2'</span></span><br><span class="line">a.next().value; <span class="comment">// '3'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>异步操作的同步化表达</li><li>控制流管理</li><li>部署 <code>Iterator</code> 接口</li><li>作为数据结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数节流与函数防抖</title>
      <link href="/2019/04/26/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
      <url>/2019/04/26/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h2 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流 throttle"></a>函数节流 <code>throttle</code></h2><ul><li>限制一个函数在一定时间内只执行一次</li><li>上拉加载</li><li>屏幕滚动</li><li>高频点击</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _.throttle = <span class="function">(<span class="params">func, wait</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func();</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖 debounce"></a>函数防抖 <code>debounce</code></h2><ul><li>事件触发后 <code>n秒</code> 内只执行一次，如果 <code>n秒</code> 内再次触发事件，则重新计算函数执行时间</li><li>一个动作连续触发，只执行最后一次</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>搜索</li><li>手机号、邮箱验证</li><li>窗口改变</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _.debounce = <span class="function">(<span class="params">func, wait</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(func, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="异同比较"><a href="#异同比较" class="headerlink" title="异同比较"></a>异同比较</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都可以通过 <code>setTimeout</code> 实现</li><li>都是降低回调执行频率，节省计算资源</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>函数防抖，在一段连续操作结束后，处理回调函数，利用 <code>clearTimeout</code> 和 <code>setTimeout</code> 实现。</li><li>函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能。</li><li>函数防抖，关注一段时间连续触发，只在最后一次执行</li><li>函数节流，侧重一段时间只执行一次</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/f9f6b637fd6c" target="_blank" rel="noopener">浅析函数防抖与函数节流</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>indexedDB</title>
      <link href="/2019/04/02/indexedDB/"/>
      <url>/2019/04/02/indexedDB/</url>
      
        <content type="html"><![CDATA[<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><h3 id="NoSQL-数据库"><a href="#NoSQL-数据库" class="headerlink" title="NoSQL 数据库"></a>NoSQL 数据库</h3><ul><li>不支持 SQL 查询语句</li><li>不属于 关系型数据库</li></ul><h3 id="键值对存储"><a href="#键值对存储" class="headerlink" title="键值对存储"></a>键值对存储</h3><ul><li>采用对象仓库（object store）存放数据</li><li>所有数据都可以直接存入，包括 JavaScript对象</li><li>每一条数据都有 独一无二的 主键对应，重复会报错</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>不会锁死浏览器</li></ul><h3 id="支持事务（transaction）"><a href="#支持事务（transaction）" class="headerlink" title="支持事务（transaction）"></a>支持事务（transaction）</h3><ul><li>只要一步失败，整个事务取消，数据库回滚到事务发生之前的状态</li></ul><h3 id="同源限制"><a href="#同源限制" class="headerlink" title="同源限制"></a>同源限制</h3><ul><li>每一个数据库都有一个与之对应的域名</li><li>不能跨域访问数据库</li></ul><h3 id="存储空间大"><a href="#存储空间大" class="headerlink" title="存储空间大"></a>存储空间大</h3><ul><li>一般 不小于250M</li></ul><h3 id="支持二进制存储"><a href="#支持二进制存储" class="headerlink" title="支持二进制存储"></a>支持二进制存储</h3><ul><li>可以存储 ArrayBuffer对象 和 Blob对象</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>数据库：IDBDatabase 对象</li><li>对象仓库：IDBObjectStore 对象</li><li>索引： IDBIndex 对象</li><li>事务： IDBTransaction 对象</li><li>操作请求：IDBRequest 对象</li><li>指针：IDBCursor 对象</li><li>主键集合：IDBKeyRange 对象</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>数据库是一些列相关数据的容器。</li><li>每个域名（协议+域名+端口）都可以创建任意多个数据库</li><li>IndexedDB 数据库有版本的概念,同一时间只能有一个版本的数据库存在。</li><li>修改数据库结构（新增或删除表、索引或者主键），只能通过升级数据库版本完成。</li></ul><h3 id="对象仓库"><a href="#对象仓库" class="headerlink" title="对象仓库"></a>对象仓库</h3><ul><li>每个数据库包涵若干个对象仓库，类似于关系数据库中的表格。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>为了加快数据检索，在对象仓库里，为不同属性建立索引。</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li>数据记录的读写和删除，倒要通过事务完成。</li><li>事务对象提供 error、abort、complete 三个事件，用来监听操作结果。</li></ul><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a>数据记录</h3><ul><li>对象仓库保存的是数据记录。</li><li>每条记录类似于关系型数据库的行，但是只有主键和数据体两个部分。</li><li>主键用来建立默认的索引，必须是不同的，否则会报错<ul><li>主键可以是数据记录里面的一个属性，也可以是一个递增的整数编号</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="打开数据库-indexedDB-open"><a href="#打开数据库-indexedDB-open" class="headerlink" title="打开数据库 indexedDB.open()"></a>打开数据库 <code>indexedDB.open()</code></h3><ul><li><p>参数1：数据库名字</p><ul><li>指定数据库不存在，新建数据库</li></ul></li><li><p>参数2：数据库版本</p><ul><li>新建数据库版本默认为 1</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">'databaseName'</span>, version);</span><br></pre></td></tr></table></figure><ul><li>返回一个 IDBRequest 对象<ul><li>该对象通过 error 、 success 、 upgradeneeded 三种事件处理打开数据库的操作结果<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开报错'</span>, event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="success"><a href="#success" class="headerlink" title="success"></a>success</h4><ul><li>通过request对象的result属性拿到数据库对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = request.result;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开成功'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="upgradeneeded"><a href="#upgradeneeded" class="headerlink" title="upgradeneeded"></a>upgradeneeded</h4><ul><li>当指定的版本号大于 实际操作的版本号，触发该事件。</li><li>通过事件对象的target.result属性，拿到数据库实例。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><ul><li>新建数据库和打开数据库是同一操作</li><li>打开数据库后的后续操作主要在 upgradeneeded 中操作</li></ul><h4 id="新建对象仓库-createObjectStore"><a href="#新建对象仓库-createObjectStore" class="headerlink" title="新建对象仓库 createObjectStore()"></a>新建对象仓库 createObjectStore()</h4><ul><li><p>参数1：表格名字</p></li><li><p>参数2：主键配置</p><ul><li>{ autoIncrement: true } // IndexedDB 自动生成主键。</li><li>{ keyPath: ‘id’ } // 自定义主键为 ‘id’</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db</span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result;</span><br><span class="line">  <span class="keyword">let</span> objectStore;</span><br><span class="line">  <span class="comment">// 检测表格是否 存在</span></span><br><span class="line">   <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">'person'</span>)) &#123;</span><br><span class="line">     <span class="comment">// 新建一张叫做 person 的表格 ，主键是 id</span></span><br><span class="line">     objectStore = db.createObjectStore(<span class="string">'person'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建索引-createIndex"><a href="#创建索引-createIndex" class="headerlink" title="创建索引 createIndex()"></a>创建索引 createIndex()</h4><ul><li><p>参数1：索引名称</p></li><li><p>参数2：索引所在属性</p></li><li><p>参数1：配置对象</p><ul><li>{ unique: false } // 该属性是否包涵重复的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> db = event.target.result;</span><br><span class="line">  <span class="keyword">let</span> objectStore = db.createObjectStore(<span class="string">'person'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">'id'</span> &#125;);</span><br><span class="line">  objectStore.createIndex(<span class="string">'name'</span>, <span class="string">'name'</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  objectStore.createIndex(<span class="string">'email'</span>, <span class="string">'email'</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><ul><li>向对象仓库写入数据记录</li><li>需要通过新建事务完成<ul><li>新建时必须指定 表格名城 和 操作模式（‘只读’、‘读写’）</li></ul></li><li>新建事务后 通过 IDBTransaction.objectStore(name) 方法，拿到 IDBObjectStore 对象</li><li>通过 add() 方法向表格 写入数据</li><li>写入操作是一个 异步操作，通过监听链接对象的 <code>success</code> 和 <code>error</code> 事件，判断是否写入成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">'zhangsan@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入成功'</span>, event);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入失败'</span>, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li>读取数据也通过事务完成<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> transaction = db.transaction([<span class="string">'person'</span>]);</span><br><span class="line">   <span class="keyword">let</span> objectStore = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line">   <span class="keyword">let</span> request = objectStore.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'事务失败'</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.result) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Name: '</span> + request.result.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Age: '</span> + request.result.age);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + request.result.email);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'未获得数据记录'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历数据-openCursor"><a href="#遍历数据-openCursor" class="headerlink" title="遍历数据 openCursor()"></a>遍历数据 openCursor()</h3><ul><li>遍历数据表格的所有记录，要使用指针对象 IDBCursor</li><li>openCursor() 方法是一个异步操作，需要监听 success 事件返回的结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objectStore = db.transaction(<span class="string">'person'</span>).objectStore(<span class="string">'person'</span>);</span><br><span class="line"></span><br><span class="line">   objectStore.openCursor().onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> cursor = event.target.result;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Id: '</span> + cursor.key);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Name: '</span> + cursor.value.name);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Age: '</span> + cursor.value.age);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + cursor.value.email);</span><br><span class="line">       cursor.continue();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'没有更多数据了！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新数据-IDBObject-put"><a href="#更新数据-IDBObject-put" class="headerlink" title="更新数据 IDBObject.put()"></a>更新数据 IDBObject.put()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">'lisi@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据-openCursor"><a href="#删除数据-openCursor" class="headerlink" title="删除数据 openCursor()"></a>删除数据 openCursor()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据删除成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h3><ul><li>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">objectStore.createIndex(<span class="string">'name'</span>, <span class="string">'name'</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transaction = db.transaction([<span class="string">'person'</span>], <span class="string">'readonly'</span>);</span><br><span class="line"><span class="keyword">let</span> store = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line"><span class="keyword">let</span> index = store.index(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">let</span> request = index.get(<span class="string">'李四'</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = e.target.result;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexedDB-对象"><a href="#indexedDB-对象" class="headerlink" title="indexedDB 对象"></a>indexedDB 对象</h2><ul><li>浏览器提供的原生对象</li></ul><h3 id="indexedDB-open"><a href="#indexedDB-open" class="headerlink" title="indexedDB.open()"></a>indexedDB.open()</h3><ul><li>打开数据库</li><li>异步操作</li><li>立即返回一个 IDBOpenDBRequest 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开一个名为 test 版本为 1 的数据库，如果数据库不存在则创建该数据库</span></span><br><span class="line"><span class="keyword">let</span> openRequest = <span class="built_in">window</span>.indexedDB.open(<span class="string">'test'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><p>参数1：数据库名称</p><ul><li>格式为字符串，不可省略</li></ul></li><li><p>参数2：数据库版本</p><ul><li>大于 0 的正整数 ，0 会报错</li><li>该参数大于当前版本，会触发数据库升级</li><li>该参数可以省略，如果数据库已存在，打开最新版本数据库；如果数据库不存在，创建该版本的数据库，默认版本为 1</li></ul></li></ul><h4 id="回调事件"><a href="#回调事件" class="headerlink" title="回调事件"></a>回调事件</h4><ul><li>success：打开成功</li><li>error：打开失败</li><li>upgradeneeded：第一次打开该数据库，或数据库版本发生变化</li><li>blocked：上一次的数据库连接还未关闭<blockquote><p>第一次打开数据库，会先触发 upgradeneeded 事件，然后触发 success 事件<br>success 事件发生后，从 openRequest.result 属性可以拿到已经打开的 IndexedDB 数据库对象 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> openRequest = indexedDB.open(<span class="string">'test'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> db;</span><br><span class="line"></span><br><span class="line">openRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Upgrading...'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">openRequest.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Success!'</span>);</span><br><span class="line">  db = openRequest.result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">openRequest.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="indexedDB-deleteDatabase"><a href="#indexedDB-deleteDatabase" class="headerlink" title="indexedDB.deleteDatabase()"></a>indexedDB.deleteDatabase()</h3><ul><li>用于删除一个数据库</li><li>立即返回一个 IDBOpenDBRequest 对象，然后对数据库执行异步删除</li><li>删除不存在的数据库时，不会报错</li><li>当调用该方法后，当前数据的其他已经打开的连接都会接收到 versionchange 事件</li></ul><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li>数据库名字</li></ul><h4 id="回调事件-1"><a href="#回调事件-1" class="headerlink" title="回调事件"></a>回调事件</h4><ul><li>success：删除成功</li><li>error：删除失败<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> DBDeleteRequest = <span class="built_in">window</span>.indexedDB.deleteDatabase(<span class="string">'demo'</span>);</span><br><span class="line"></span><br><span class="line">DBDeleteRequest.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DBDeleteRequest.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="indexedDB，cmp"><a href="#indexedDB，cmp" class="headerlink" title="indexedDB，cmp()"></a>indexedDB，cmp()</h3><ul><li>比较两个值是否为 indexedDB 的相同的主键。</li><li>返回一个整数，表示比较的结果<ul><li>0 ：相同 </li><li>1： 第一个主键大于第二个主键</li><li>-1： 第一个主键小于第二个主键<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.indexedDB.cmp(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="comment">// 注意，这个方法不能用来比较任意的 JavaScript 值。如果参数是布尔值或对象，它会报错。</span></span><br><span class="line"><span class="built_in">window</span>.indexedDB.cmp(<span class="number">1</span>, <span class="literal">true</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">window</span>.indexedDB.cmp(&#123;&#125;, &#123;&#125;) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="IDBRequest-对象"><a href="#IDBRequest-对象" class="headerlink" title="IDBRequest 对象"></a>IDBRequest 对象</h2><ul><li>表示打开的数据库连接</li><li>indexedDB.open() 和 indexedDB.deleteDatabase() 方法会返回这个对象</li><li>数据库的操作都是通过此对象完成</li><li>对象的所有操作都是 <code>异步</code> 完成<ul><li>通过 readyState 属性判断是否完成<ul><li>pending：正在进行</li><li>done：完成，有可能失败也有可成功</li></ul></li></ul></li><li>操作完成，触发 error 或 success 事件<ul><li>可以通过 result 属性 和 error 属性 拿到操作结果<ul><li>如果在 pending 状态去读取这两个属性的值会报错<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3></li></ul></li></ul></li><li>IDBRequest.readyState：等于pending表示操作正在进行，等于done表示操作正在完成。</li><li>IDBRequest.result：返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。</li><li>IDBRequest.error：请求失败时，返回错误对象。</li><li>IDBRequest.source：返回请求的来源（比如索引对象或 ObjectStore）。</li><li>IDBRequest.transaction：返回当前请求正在进行的事务，如果不包含事务，返回null。</li><li>IDBRequest.onsuccess：指定success事件的监听函数。</li><li>IDBRequest.onerror：指定error事件的监听函数。</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="level-js"><a href="#level-js" class="headerlink" title="level.js"></a>level.js</h3>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>browser-sync 安装与使用</title>
      <link href="/2019/04/02/browser-sync/"/>
      <url>/2019/04/02/browser-sync/</url>
      
        <content type="html"><![CDATA[<h1 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h1><blockquote><p>浏览器同步工具</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i browser-sync -g</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync init</span><br></pre></td></tr></table></figure><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync start --server --files <span class="string">"**"</span></span><br></pre></td></tr></table></figure><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; browser-sync start --proxy <span class="string">"localhost:8080"</span> --files <span class="string">"**"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>rc-queue-anim的使用</title>
      <link href="/2019/02/18/rc-queue-anim%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/02/18/rc-queue-anim%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -S rc-queue-anim</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QueueAnim <span class="keyword">from</span> <span class="string">'rc-queue-anim'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;QueueAnim delay=&#123;<span class="number">300</span>&#125; className=<span class="string">"queue-simple"</span>&gt;</span><br><span class="line">    &lt;div key=<span class="string">"a"</span>&gt;依次进场&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div key="b"&gt;依次进场&lt;/</span>div&gt;</span><br><span class="line">    &lt;div key=<span class="string">"c"</span>&gt;依次进场&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div key="d"&gt;依次进场&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/QueueAnim&gt;</span></span><br><span class="line"><span class="regexp">, mountNode);</span></span><br></pre></td></tr></table></figure><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://motion.ant.design/" target="_blank" rel="noopener">https://motion.ant.design/</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket.io</title>
      <link href="/2019/02/15/socket-io/"/>
      <url>/2019/02/15/socket-io/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install socket.io -S</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到与服务器的链接对象</span></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">'ws://localhost:9000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line">socket.on(<span class="string">'receiveMsg'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'浏览器接收消息'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">socket.emit(<span class="string">'sendMsg'</span>, &#123;<span class="attr">name</span>: <span class="string">'12'</span>, <span class="attr">data</span>: <span class="built_in">Date</span>.now()&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'发送消息'</span>);</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">server</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"><span class="comment">// 监视客户端与服务器端的链接</span></span><br><span class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'链接成功'</span>);</span><br><span class="line">socket.on(<span class="string">'sendMsg'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器接受到浏览器消息'</span>);</span><br><span class="line"><span class="comment">// 全局发数据</span></span><br><span class="line">io.emit(<span class="string">'receiveMsg'</span>,data.name+<span class="string">'_'</span>+data.data)</span><br><span class="line"><span class="comment">// 单一发数据</span></span><br><span class="line">socket.emit(<span class="string">'receiveMsg'</span>,data.name+<span class="string">'_'</span>+data.data)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器向浏览器发消息'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// www</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../socketIO/test'</span>)(server);</span><br></pre></td></tr></table></figure><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="https://socket.io/get-started/chat/" target="_blank" rel="noopener">https://socket.io/get-started/chat/</a></li><li><a href="https://blog.csdn.net/neuq_zxy/article/details/77531126" target="_blank" rel="noopener">https://blog.csdn.net/neuq_zxy/article/details/77531126</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-cookie</title>
      <link href="/2019/02/14/js-cookie/"/>
      <url>/2019/02/14/js-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn add js-cookie -S</span><br></pre></td></tr></table></figure><h3 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br></pre></td></tr></table></figure><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="Cookies-set"><a href="#Cookies-set" class="headerlink" title="Cookies.set"></a>Cookies.set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>);</span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">''</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Cookies-get"><a href="#Cookies-get" class="headerlink" title="Cookies.get"></a>Cookies.get</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(<span class="string">'name'</span>); <span class="comment">// =&gt; 'value'</span></span><br><span class="line">Cookies.get(<span class="string">'nothing'</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line">Cookies.get(); <span class="comment">// =&gt; &#123; name: 'value' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Cookies-remove"><a href="#Cookies-remove" class="headerlink" title="Cookies.remove"></a>Cookies.remove</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.remove(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><p><a href="https://www.npmjs.com/package/js-cookie" target="_blank" rel="noopener">https://www.npmjs.com/package/js-cookie</a></p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux的使用</title>
      <link href="/2019/02/13/redux%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/02/13/redux%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><blockquote><p><a href="https://www.redux.org.cn/" target="_blank" rel="noopener">https://www.redux.org.cn/</a></p></blockquote><h2 id="redux-模块"><a href="#redux-模块" class="headerlink" title="redux 模块"></a>redux 模块</h2><ul><li><code>redux</code>模块整体是一个对象模块</li><li>内部包含的函数：<ul><li>createStore(reducers) // reducers:fucntion(state,action)(return newState)</li><li>combineReducers(reducers) // reducers:{reducer1,reducer2} 返回：function(state,action){rteturn newState}</li><li>applyMiddleware()</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="基本包"><a href="#基本包" class="headerlink" title="基本包"></a>基本包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install --save  redux react-redux redux-thunk redux-devtools-extension</span><br></pre></td></tr></table></figure><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev redux-devtools</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><h5 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h5><p>redux 最核心的管理模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">"redux-devtools-extension"</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露 store 对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducers,composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure></p><h5 id="reducers-js"><a href="#reducers-js" class="headerlink" title="reducers.js"></a>reducers.js</h5><p>包含 n 个 reducer 函数 根据老的 <code>state</code> 和 指定的 <code>action</code> 返回一个 新的 <code>state</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并状态</span></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">"redux"</span>; </span><br><span class="line"><span class="keyword">import</span> &#123;AUTH_SUCCESS, ERROR_MSG&#125; <span class="keyword">from</span> <span class="string">"./action-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> register = <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">        <span class="comment">// 发送注册的异步 ajax 请求</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> reqRegister(user)</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        <span class="keyword">if</span> (result.code === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 分发成功的同步action</span></span><br><span class="line">            dispatch(authSuccess(result.data))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dispatch(errprMsg(result.msg))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="actioncs-js"><a href="#actioncs-js" class="headerlink" title="actioncs.js"></a>actioncs.js</h5><p>包含 n 个 action creator</p><ul><li>异步 action</li><li>同步 action</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AUTH_SUCCESS,</span><br><span class="line">    ERROR_MSG</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./action-types"</span>;</span><br></pre></td></tr></table></figure><h5 id="action-types-js"><a href="#action-types-js" class="headerlink" title="action-types.js"></a>action-types.js</h5><p>包含 n 个 action-type 常量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AUTH_SUCCESS=<span class="string">'auth_success'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ERROR_MSG=<span class="string">'error_msg'</span></span><br></pre></td></tr></table></figure></p><h5 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h5><p>引入<code>Provider</code>、<code>store</code><br><figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./redux/store'</span></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">          &lt;HashRouter&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">              &lt;Route exact path=<span class="string">'/register'</span> component=&#123;Register&#125;/&gt;</span><br><span class="line">              &lt;Route exact path=<span class="string">'/login'</span> component=&#123;Login&#125;/&gt;</span><br><span class="line">              &lt;Route component=&#123;Main&#125;/&gt; &#123;<span class="comment">/* 默认组件*/</span>&#125;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>HashRouter&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">Redux 入门教程</a></p><ul><li><a href="https://cn.vuejs.org/v2/guide/state-management.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/state-management.html</a></li><li><a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">https://vuex.vuejs.org/</a></li><li><a href="https://cn.redux.js.org/docs/react-redux/" target="_blank" rel="noopener">https://cn.redux.js.org/docs/react-redux/</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a></li><li><a href="https://redux-saga-in-chinese.js.org" target="_blank" rel="noopener">https://redux-saga-in-chinese.js.org</a></li><li><a href="https://juejin.im/post/59e6cd68f265da43163c2821" target="_blank" rel="noopener">https://juejin.im/post/59e6cd68f265da43163c2821</a></li><li><a href="https://react-redux.js.org/introduction/why-use-react-redux" target="_blank" rel="noopener">https://react-redux.js.org/introduction/why-use-react-redux</a></li><li><a href="https://segmentfault.com/a/1190000007248878" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007248878</a></li><li><a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/generator</a></li><li><a href="https://juejin.im/post/5ac1cb9d6fb9a028cf32a046" target="_blank" rel="noopener">https://juejin.im/post/5ac1cb9d6fb9a028cf32a046</a></li><li><a href="https://zhuanlan.zhihu.com/p/35437092" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35437092</a></li><li><a href="https://github.com/dvajs/dva/issues/1" target="_blank" rel="noopener">https://github.com/dvajs/dva/issues/1</a></li><li><a href="https://cn.mobx.js.org" target="_blank" rel="noopener">https://cn.mobx.js.org</a></li><li><a href="https://zhuanlan.zhihu.com/p/25585910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25585910</a></li><li><a href="http://imweb.io/topic/59f4833db72024f03c7f49b4" target="_blank" rel="noopener">http://imweb.io/topic/59f4833db72024f03c7f49b4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react技术选型</title>
      <link href="/2019/02/13/react%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
      <url>/2019/02/13/react%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="前台数据展示-交互-组件化"><a href="#前台数据展示-交互-组件化" class="headerlink" title="前台数据展示/交互/组件化"></a>前台数据展示/交互/组件化</h3><h4 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a><a href="../react-router-dom的使用">react-router-dom</a></h4><blockquote><p>npm i react-router-dom -S</p></blockquote><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><blockquote><p>npm i redux react-redux redux-thunk redux-devtools-extension -S</p></blockquote><h4 id="antd-mobile"><a href="#antd-mobile" class="headerlink" title="antd-mobile"></a>antd-mobile</h4><blockquote><p>npm i -D babel-plugin-import react-app-rewired</p></blockquote><ul><li>引入 看文档</li><li>按需打包</li></ul><h3 id="后台项目"><a href="#后台项目" class="headerlink" title="后台项目"></a>后台项目</h3><ul><li>node</li><li>express</li><li>mongodb</li><li>mongoose</li><li>socket.io</li></ul><h3 id="前后台交互"><a href="#前后台交互" class="headerlink" title="前后台交互"></a>前后台交互</h3><ul><li>ajax 请求</li><li>axios</li><li>async / await<h3 id="测试-API-接口"><a href="#测试-API-接口" class="headerlink" title="测试 API 接口"></a>测试 API 接口</h3></li><li>postman<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3></li><li>ES6</li><li>babel</li></ul><h3 id="项目构建-工程化"><a href="#项目构建-工程化" class="headerlink" title="项目构建/工程化"></a>项目构建/工程化</h3><ul><li>webpack</li><li>react-create-app</li><li>eslint</li></ul><h3 id="其他相关库"><a href="#其他相关库" class="headerlink" title="其他相关库"></a>其他相关库</h3><ul><li>blueimp-md5</li><li>js-cookie</li><li>rc-queue-anim</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-router-dom的简单使用</title>
      <link href="/2019/02/13/react-router-dom%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/02/13/react-router-dom%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn add react-router react-router-dom -S</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Swtich, Route, Router, HashHistory, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">'/'</span> <span class="attr">component</span>=<span class="string">&#123;home&#125;</span>&gt;</span>1212<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">'/a'</span> <span class="attr">component</span>=<span class="string">&#123;a&#125;</span>&gt;</span>12321312<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">component</span>=<span class="string">&#123;a&#125;</span>&gt;</span>12321312<span class="tag">&lt;/<span class="name">Route</span>&gt;</span> &#123;/* 默认组件*/&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p><a href="https://reacttraining.com/react-router/web/api/BrowserRouter" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/api/BrowserRouter</a></p></blockquote><h3 id="lt-Router"><a href="#lt-Router" class="headerlink" title="&lt;Router>"></a>&lt;Router></h3><h4 id="history-object"><a href="#history-object" class="headerlink" title="history: object"></a>history: object</h4><h4 id="children-node"><a href="#children-node" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-BrowserRouter"><a href="#lt-BrowserRouter" class="headerlink" title="&lt;BrowserRouter>"></a>&lt;BrowserRouter></h3><h4 id="basename-string"><a href="#basename-string" class="headerlink" title="basename: string"></a>basename: string</h4><p>所有位置的基准 URL。</p><ul><li>如果你的应用程序部署在服务器的子目录，则需要将其设置为子目录。</li><li><code>basename</code> 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠。</li></ul><h4 id="getUserConfirmation-func"><a href="#getUserConfirmation-func" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="forceRefresh-bool"><a href="#forceRefresh-bool" class="headerlink" title="forceRefresh: bool"></a>forceRefresh: bool</h4><p>强制刷新页面</p><h4 id="keyLength-number"><a href="#keyLength-number" class="headerlink" title="keyLength: number"></a>keyLength: number</h4><h4 id="children-node-1"><a href="#children-node-1" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-HashRouter"><a href="#lt-HashRouter" class="headerlink" title="&lt;HashRouter>"></a>&lt;HashRouter></h3><h4 id="basename-string-1"><a href="#basename-string-1" class="headerlink" title="basename: string"></a>basename: string</h4><h4 id="getUserConfirmation-func-1"><a href="#getUserConfirmation-func-1" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="hashtype-string"><a href="#hashtype-string" class="headerlink" title="hashtype: string"></a>hashtype: string</h4><ul><li>slash: #/</li><li>noslash: #</li><li>hashbang: #!<h4 id="children-node-2"><a href="#children-node-2" class="headerlink" title="children: node"></a>children: node</h4></li></ul><h3 id="lt-StaticRouter"><a href="#lt-StaticRouter" class="headerlink" title="&lt;StaticRouter>"></a>&lt;StaticRouter></h3><h4 id="basename-string-2"><a href="#basename-string-2" class="headerlink" title="basename: string"></a>basename: string</h4><h4 id="location-string"><a href="#location-string" class="headerlink" title="location: string"></a>location: string</h4><h4 id="location-object"><a href="#location-object" class="headerlink" title="location: object"></a>location: object</h4><h4 id="context-object"><a href="#context-object" class="headerlink" title="context: object"></a>context: object</h4><h4 id="children-node-3"><a href="#children-node-3" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-MemoruRouter"><a href="#lt-MemoruRouter" class="headerlink" title="&lt;MemoruRouter>"></a>&lt;MemoruRouter></h3><h4 id="initialEntries-array"><a href="#initialEntries-array" class="headerlink" title="initialEntries: array"></a>initialEntries: array</h4><h4 id="initialIndex-number"><a href="#initialIndex-number" class="headerlink" title="initialIndex: number"></a>initialIndex: number</h4><h4 id="getUserConfirmation-func-2"><a href="#getUserConfirmation-func-2" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><h4 id="keylength-number"><a href="#keylength-number" class="headerlink" title="keylength: number"></a>keylength: number</h4><h4 id="children-node-4"><a href="#children-node-4" class="headerlink" title="children: node"></a>children: node</h4><h3 id="lt-Link"><a href="#lt-Link" class="headerlink" title="&lt;Link>"></a>&lt;Link></h3><h4 id="to-string"><a href="#to-string" class="headerlink" title="to: string"></a>to: string</h4><h4 id="to-object"><a href="#to-object" class="headerlink" title="to: object"></a>to: object</h4><ul><li>pathname: url</li><li>search: query</li><li>hash: #</li><li>state: {} <h4 id="replace-func"><a href="#replace-func" class="headerlink" title="replace: func"></a>replace: func</h4><h4 id="innerRef-func"><a href="#innerRef-func" class="headerlink" title="innerRef: func"></a>innerRef: func</h4><h4 id="others"><a href="#others" class="headerlink" title="others"></a>others</h4></li></ul><h3 id="lt-NavLink"><a href="#lt-NavLink" class="headerlink" title="&lt;NavLink>"></a>&lt;NavLink></h3><h4 id="activeClassName-string"><a href="#activeClassName-string" class="headerlink" title="activeClassName: string"></a>activeClassName: string</h4><h4 id="activeStyle-object"><a href="#activeStyle-object" class="headerlink" title="activeStyle: object"></a>activeStyle: object</h4><h4 id="exact-bool"><a href="#exact-bool" class="headerlink" title="exact: bool"></a>exact: bool</h4><h4 id="strict-bool"><a href="#strict-bool" class="headerlink" title="strict: bool"></a>strict: bool</h4><h4 id="isActive-func"><a href="#isActive-func" class="headerlink" title="isActive: func"></a>isActive: func</h4><h4 id="location-object-1"><a href="#location-object-1" class="headerlink" title="location: object"></a>location: object</h4><h3 id="lt-Prompt"><a href="#lt-Prompt" class="headerlink" title="&lt;Prompt>"></a>&lt;Prompt></h3><p>用于在位置跳转之前给予用户一些确认信息。当你的应用程序进入一个应该阻止用户导航的状态时（比如表单只填写了一半），弹出一个提示。</p><h4 id="message-string"><a href="#message-string" class="headerlink" title="message: string"></a>message: string</h4><h4 id="message-func"><a href="#message-func" class="headerlink" title="message: func"></a>message: func</h4><h4 id="when-bool"><a href="#when-bool" class="headerlink" title="when: bool"></a>when: bool</h4><h3 id="lt-Redirect"><a href="#lt-Redirect" class="headerlink" title="&lt;Redirect>"></a>&lt;Redirect></h3><h4 id="to-string-1"><a href="#to-string-1" class="headerlink" title="to: string"></a>to: string</h4><h4 id="to-object-1"><a href="#to-object-1" class="headerlink" title="to: object"></a>to: object</h4><h4 id="push-bool"><a href="#push-bool" class="headerlink" title="push: bool"></a>push: bool</h4><h4 id="from-string"><a href="#from-string" class="headerlink" title="from: string"></a>from: string</h4><h4 id="exact-bool-1"><a href="#exact-bool-1" class="headerlink" title="exact: bool"></a>exact: bool</h4><h4 id="strict-bool-1"><a href="#strict-bool-1" class="headerlink" title="strict: bool"></a>strict: bool</h4><h3 id="lt-Switch"><a href="#lt-Switch" class="headerlink" title="&lt;Switch>"></a>&lt;Switch></h3><h4 id="location-object-2"><a href="#location-object-2" class="headerlink" title="location: object"></a>location: object</h4><h4 id="children-node-5"><a href="#children-node-5" class="headerlink" title="children: node"></a>children: node</h4><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>将非路由组件变成路由组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(<span class="string">`组件名`</span>)</span><br></pre></td></tr></table></figure></p><h3 id="编程式导航history"><a href="#编程式导航history" class="headerlink" title="编程式导航history"></a>编程式导航<code>history</code></h3><p>在<code>props</code>上有<code>history</code>对象，这个对象上存在多个个方法</p><ul><li>push</li><li></li><li>replace</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue查漏补缺</title>
      <link href="/2019/02/11/vue%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2019/02/11/vue%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-不支持-IE8-及以下版本"><a href="#Vue-不支持-IE8-及以下版本" class="headerlink" title="Vue 不支持 IE8 及以下版本"></a>Vue <strong>不支持</strong> IE8 及以下版本</h2><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.22/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>确保相同的元素被切换时会重新渲染</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>可以对对象的属性进行迭代</li><li>提供了 <code>value</code>、 <code>key</code>、 <code>index</code> 三个参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#v-for-object'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: <span class="string">'John'</span>,</span><br><span class="line">      lastName: <span class="string">'Doe'</span>,</span><br><span class="line">      age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数组的更新检测"><a href="#数组的更新检测" class="headerlink" title="数组的更新检测"></a>数组的更新检测</h2><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li><p>当你利用索引直接设置一个项时，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vm.items[indexOfItem] = newValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过一下方法替代</span></span><br><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure></li><li><p>当你修改数组的长度时，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.length = newLength</span><br></pre></td></tr></table></figure></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li><li>.once</li><li>.passive</li></ul><h3 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h3><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><ul><li>.left</li><li>.right</li><li>.middle</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li>.lazy</li><li>.trim</li><li>.number</li></ul><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><h3 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h3><blockquote><p>模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// template 可以是任意元素</span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="过渡类名"><a href="#过渡类名" class="headerlink" title="过渡类名"></a>过渡类名</h3><ul><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。<br><img src="transition.png" alt="png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 修饰符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue微信支付授权的坑（当前页面的URL未注册）</title>
      <link href="/2019/02/11/vue%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%88%E6%9D%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/02/11/vue%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%88%E6%9D%83%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="获取微信授权的URL"><a href="#获取微信授权的URL" class="headerlink" title="获取微信授权的URL"></a>获取微信授权的URL</h2><p>微信支付之前都要获取微信授权，由于微信对 IOS 和 Android 的 URL 的处理不同，所以这里统一使用这个方法获取授权时使用的 URL<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">window</span>.location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><h2 id="的作用"><a href="#的作用" class="headerlink" title="? 的作用"></a><code>?</code> 的作用</h2><p>尽管你向后台发送了被<code>#</code>截取过的授权URL，但是在真正支付的时候，你或许还是会看到 URL未注册的情况。<br><img src="url.png" alt="支付失败"></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><blockquote><p>这个时候请大胆的在当前的页面的<code>#</code>前面拼接<code>?</code></p><ul><li>微信在检验<code>URL</code>的时候，如果<code>URL</code>字符串内有<code>?</code>,会将<code>?</code>前的所有内容全部截取</li><li>如果<code>?</code>出现在<code>#</code>后，会导致<code>#</code>前的内容也被截取，从而导致认证失败</li><li>所以这里通过提前加<code>?</code>的方式避开了认证地址截取过多的问题</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> Vue </tag>
            
            <tag> 授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vue-property-decorator</title>
      <link href="/2019/02/01/%E4%BD%BF%E7%94%A8vue-property-decorator/"/>
      <url>/2019/02/01/%E4%BD%BF%E7%94%A8vue-property-decorator/</url>
      
        <content type="html"><![CDATA[<h2 id="Emit"><a href="#Emit" class="headerlink" title="@Emit"></a>@Emit</h2><p>@Emit(event?: string) decorator<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Emit &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> YourComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Emit</span>()</span><br><span class="line">  addToCount(n: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.count += n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Emit</span>(<span class="string">'reset'</span>)</span><br><span class="line">  resetCount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Emit</span>()</span><br><span class="line">  returnValue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Emit</span>()</span><br><span class="line">  promise() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">20</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addToCount(n) &#123;</span><br><span class="line">      <span class="keyword">this</span>.count += n</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'add-to-count'</span>, n)</span><br><span class="line">    &#125;,</span><br><span class="line">    resetCount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'reset'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    returnValue() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'return-value'</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    promise() &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="number">20</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'promise'</span>, value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><h2 id="Model"><a href="#Model" class="headerlink" title="@Model"></a>@Model</h2><p>@Model(event?: string, options: (PropOptions | Constructor[] | Constructor) = {}) decorator<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Model &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> YourComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Model</span>(<span class="string">'change'</span>, &#123; <span class="keyword">type</span>: <span class="built_in">Boolean</span> &#125;) checked!: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Prop"><a href="#Prop" class="headerlink" title="@Prop"></a>@Prop</h2><p>@Prop(options: (PropOptions | Constructor[] | Constructor) = {}) decorator<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Prop &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> YourComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Prop</span>(<span class="built_in">Number</span>) propA!: <span class="built_in">number</span></span><br><span class="line">  <span class="meta">@Prop</span>(&#123; <span class="keyword">default</span>: <span class="string">'default value'</span> &#125;) propB!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@Prop</span>([<span class="built_in">String</span>, <span class="built_in">Boolean</span>]) propC!: <span class="built_in">string</span> | <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    propA: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propB: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'default value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Boolean</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Provide"><a href="#Provide" class="headerlink" title="@Provide"></a>@Provide</h2><p>@Provide(key?: string | symbol) / @Inject(options?: { from?: InjectKey, default?: any } | InjectKey) decorator<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject, Provide, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> symbol = Symbol(<span class="string">'baz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Inject</span>() foo!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@Inject</span>(<span class="string">'bar'</span>) bar!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@Inject</span>(&#123; <span class="keyword">from</span>: <span class="string">'optional'</span>, <span class="keyword">default</span>: <span class="string">'default'</span> &#125;) optional!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@Inject</span>(symbol) baz!: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Provide</span>() foo = <span class="string">'foo'</span></span><br><span class="line">  <span class="meta">@Provide</span>(<span class="string">'bar'</span>) baz = <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = Symbol(<span class="string">'baz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyComponent = Vue.extend(&#123;</span><br><span class="line"></span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: <span class="string">'foo'</span>,</span><br><span class="line">    bar: <span class="string">'bar'</span>,</span><br><span class="line">    <span class="string">'optional'</span>: &#123; <span class="keyword">from</span>: <span class="string">'optional'</span>, <span class="keyword">default</span>: <span class="string">'default'</span> &#125;,</span><br><span class="line">    [symbol]: symbol</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="string">'foo'</span>,</span><br><span class="line">      baz: <span class="string">'bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo: <span class="keyword">this</span>.foo,</span><br><span class="line">      bar: <span class="keyword">this</span>.baz</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Watch"><a href="#Watch" class="headerlink" title="@Watch"></a>@Watch</h2><p>@Watch(path: string, options: WatchOptions = {}) decorator<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Watch &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> YourComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Watch</span>(<span class="string">'child'</span>)</span><br><span class="line">  onChildChanged(val: <span class="built_in">string</span>, oldVal: <span class="built_in">string</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Watch</span>(<span class="string">'person'</span>, &#123; immediate: <span class="literal">true</span>, deep: <span class="literal">true</span> &#125;)</span><br><span class="line">  onPersonChanged1(val: Person, oldVal: Person) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Watch</span>(<span class="string">'person'</span>)</span><br><span class="line">  onChildChanged2(val: Person, oldVal: Person) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'child'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="string">'onChildChanged'</span>,</span><br><span class="line">        immediate: <span class="literal">false</span>,</span><br><span class="line">        deep: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'person'</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="string">'onPersonChanged1'</span>,</span><br><span class="line">        immediate: <span class="literal">true</span>,</span><br><span class="line">        deep: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="string">'onPersonChanged2'</span>,</span><br><span class="line">        immediate: <span class="literal">false</span>,</span><br><span class="line">        deep: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onChildChanged(val, oldVal) &#123; &#125;,</span><br><span class="line">    onPersonChanged1(val, oldVal) &#123; &#125;</span><br><span class="line">    onPersonChanged2(val, oldVal) &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>父组件的函数的参数问题</li></ul><h2 id="Component-provided-by-vue-class-component"><a href="#Component-provided-by-vue-class-component" class="headerlink" title="@Component (provided by vue-class-component)"></a>@Component (provided by vue-class-component)</h2><p>@Component({<br>  components: {<br>    HelloWorld,<br>  },<br>})</p><h2 id="Mixins-the-helper-function-named-mixins-provided-by-vue-class-component"><a href="#Mixins-the-helper-function-named-mixins-provided-by-vue-class-component" class="headerlink" title="Mixins (the helper function named mixins provided by vue-class-component)"></a>Mixins (the helper function named mixins provided by vue-class-component)</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">https://github.com/kaorun343/vue-property-decorator</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli搭建基于typeScript的Vue项目</title>
      <link href="/2019/02/01/Vue-cli%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EtypeScript%E7%9A%84Vue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/02/01/Vue-cli%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EtypeScript%E7%9A%84Vue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Vue-cli"><a href="#安装-Vue-cli" class="headerlink" title="安装 Vue-cli"></a>安装 Vue-cli</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h2><p>选一个文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vue create &lt;项目名称&gt;</span><br></pre></td></tr></table></figure></p><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><h3 id="选择-Manually-select-features"><a href="#选择-Manually-select-features" class="headerlink" title="选择 Manually select features"></a>选择 <code>Manually select features</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: </span><br><span class="line">  default (babel, eslint) </span><br><span class="line">❯ Manually select features  // 选这个</span><br></pre></td></tr></table></figure><h3 id="配置具体选项"><a href="#配置具体选项" class="headerlink" title="配置具体选项"></a>配置具体选项</h3><p>这里根据具体情况选择,因为要使用 <code>TypeScript</code>,所以务必选上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: </span><br><span class="line"> ◉ Babel</span><br><span class="line"> ◉ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◯ Router</span><br><span class="line"> ◯ Vuex</span><br><span class="line">❯◯ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://juejin.im/post/5ba75b355188255c5e66e4d3" target="_blank" rel="noopener">教你搭建基于typescript的vue项目</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基本操作</title>
      <link href="/2019/01/30/React%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/01/30/React%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g create-react-app</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; create-react-app</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn init</span><br><span class="line">&gt; yarn add react react-dom</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"start"</span>: <span class="string">"PORT=9000 react-scripts start"</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 18.04 安装配置Nginx</title>
      <link href="/2019/01/29/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx%EF%BC%88ubuntu%EF%BC%89/"/>
      <url>/2019/01/29/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx%EF%BC%88ubuntu%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; apt install nginx</span><br></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo ufw app list</span><br></pre></td></tr></table></figure><p>输入命令后，你会看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Available applications:</span><br><span class="line">  Nginx Full 这个配置打开 80端口和443端口</span><br><span class="line">  Nginx HTTP 这个配置只打开80 (普通, 未加密通信)</span><br><span class="line">  Nginx HTTPS  这个配置只打开 443 (TLS/SSL 加密通信)</span><br><span class="line">  OpenSSH</span><br></pre></td></tr></table></figure></p><h2 id="打开服务"><a href="#打开服务" class="headerlink" title="打开服务"></a>打开服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo ufw allow <span class="string">'Nginx Full'</span></span><br></pre></td></tr></table></figure><h2 id="查看服务是否打开"><a href="#查看服务是否打开" class="headerlink" title="查看服务是否打开"></a>查看服务是否打开</h2><h3 id="验证服务状态"><a href="#验证服务状态" class="headerlink" title="验证服务状态"></a>验证服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo ufw status</span><br></pre></td></tr></table></figure><h3 id="检查-web-server"><a href="#检查-web-server" class="headerlink" title="检查 web server"></a>检查 web server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="通过-IP-访问"><a href="#通过-IP-访问" class="headerlink" title="通过 IP 访问"></a>通过 IP 访问</h3><p>输入你的网站IP即可<br><img src="nginx.png" alt="nginx"></p><h2 id="管理-Nginx进程"><a href="#管理-Nginx进程" class="headerlink" title="管理 Nginx进程"></a>管理 Nginx进程</h2><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl stop nginx</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl start nginx</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sduo systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h3 id="禁止开机启动"><a href="#禁止开机启动" class="headerlink" title="禁止开机启动"></a>禁止开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl <span class="built_in">disable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="网站文件位置"><a href="#网站文件位置" class="headerlink" title="网站文件位置"></a>网站文件位置</h3><blockquote><p>/var/www/html</p></blockquote><h4 id="修改网站根目录"><a href="#修改网站根目录" class="headerlink" title="修改网站根目录"></a>修改网站根目录</h4><ul><li><p>进入Nginx配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure></li><li><p>将 <code>root</code> 所对应网站根目录进行修改 成你的目录<br><img src="root.jpeg" alt="root"></p></li><li>重启<code>nginx</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ul><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><h4 id="配置文件目录"><a href="#配置文件目录" class="headerlink" title="配置文件目录"></a>配置文件目录</h4><ul><li>/etc/nginx: nginx<h4 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h4></li><li>/etc/nginx/nginx.conf</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.nginx.cn/4723.html" target="_blank" rel="noopener">http://www.nginx.cn/4723.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>documentElement 与 body</title>
      <link href="/2019/01/23/documentElement%E4%B8%8Ebody/"/>
      <url>/2019/01/23/documentElement%E4%B8%8Ebody/</url>
      
        <content type="html"><![CDATA[<h1 id="documentElement-与-body"><a href="#documentElement-与-body" class="headerlink" title="documentElement 与 body"></a>documentElement 与 body</h1><h2 id="document-documentElement"><a href="#document-documentElement" class="headerlink" title="document.documentElement"></a>document.documentElement</h2><blockquote><p>返回 html<br>dom 中的 root 节点</p></blockquote><h2 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h2><blockquote><p>返回 html<br>dom 中的 body 节点</p></blockquote><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><h3 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h3><ul><li>iso 上两者都可以获取 scrollTop，但是只有<code>body</code>可以设置该值<h4 id="兼容解决方案"><a href="#兼容解决方案" class="headerlink" title="兼容解决方案"></a>兼容解决方案</h4><blockquote><p>对两则同时赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> top = <span class="number">100</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop = top</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = top</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号授权</title>
      <link href="/2019/01/22/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83/"/>
      <url>/2019/01/22/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h1><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="微信公众平台开发者文档："><a href="#微信公众平台开发者文档：" class="headerlink" title="微信公众平台开发者文档："></a>微信公众平台开发者文档：</h3><blockquote><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p></blockquote><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="网页授权回调域名"><a href="#网页授权回调域名" class="headerlink" title="网页授权回调域名"></a>网页授权回调域名</h3><ul><li>在 “开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息” 的配置选项中，修改授权回调域名</li><li>这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；</li><li>授权回调域名不允许跨域</li></ul><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><h4 id="用户同意授权，获取code"><a href="#用户同意授权，获取code" class="headerlink" title="用户同意授权，获取code"></a>用户同意授权，获取code</h4><blockquote><p><strong>前端只要处理这一步就可以了</strong></p></blockquote><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><blockquote><p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p></blockquote><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>appid</td><td>是</td><td>公众号唯一标识</td></tr><tr><td>redirect_uri</td><td>是</td><td>授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理</td></tr><tr><td>response_type</td><td>是</td><td>返回类型，请填写code</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td>state</td><td>否</td><td>重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td></tr><tr><td>#wechat_redirect</td><td>are neat</td><td>无论直接打开还是做页面302重定向时候，必须带此参数</td></tr></tbody></table><h5 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h5><ul><li>授权成功后，微信会在新的回调页面的<code>url</code>上拼接<code>code</code><br><img src="code.png" alt="code"></li><li>通过<code>query</code>再<code>url</code>中拿到<code>code</code>,传递给后端即可 </li></ul><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><h4 id="通过code换取网页授权access-token"><a href="#通过code换取网页授权access-token" class="headerlink" title="通过code换取网页授权access_token"></a>通过code换取网页授权access_token</h4><h4 id="刷新access-token（如果需要）"><a href="#刷新access-token（如果需要）" class="headerlink" title="刷新access_token（如果需要）"></a>刷新access_token（如果需要）</h4><h4 id="拉取用户信息-需scope为-snsapi-userinfo"><a href="#拉取用户信息-需scope为-snsapi-userinfo" class="headerlink" title="拉取用户信息(需scope为 snsapi_userinfo)"></a>拉取用户信息(需scope为 snsapi_userinfo)</h4><h4 id="检验授权凭证（access-token）是否有效"><a href="#检验授权凭证（access-token）是否有效" class="headerlink" title="检验授权凭证（access_token）是否有效"></a>检验授权凭证（access_token）是否有效</h4>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp 学习</title>
      <link href="/2019/01/21/gulp/"/>
      <url>/2019/01/21/gulp/</url>
      
        <content type="html"><![CDATA[<h1 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h1><blockquote><ul><li>任务化<br>Gulp.js 是一个自动化构建工具，开发者可以使用它在项目开发过程中自动执行常见任务。</li><li>基于流<br>Gulp.js 是基于 Node.js 构建的，利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。<br>Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。</li></ul></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g gulp</span><br></pre></td></tr></table></figure><h3 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -S gulp</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p></blockquote><h3 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'something'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(</span><br><span class="line"> <span class="comment">// 任务</span></span><br><span class="line">),</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><blockquote><p>都需要 npm 安装到依赖中 -S</p></blockquote><h3 id="gulp-connect"><a href="#gulp-connect" class="headerlink" title="gulp-connect"></a>gulp-connect</h3><blockquote><p>自动打开浏览器</p></blockquote><h3 id="gulp-concat"><a href="#gulp-concat" class="headerlink" title="gulp-concat"></a>gulp-concat</h3><blockquote><p>合并 <code>js/css</code> 文件</p></blockquote><h3 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a>gulp-uglify</h3><blockquote><p>压缩 <code>js</code> 文件</p></blockquote><h3 id="gulp-babel"><a href="#gulp-babel" class="headerlink" title="gulp-babel"></a>gulp-babel</h3><blockquote><p>将es6转换为es5</p></blockquote><h3 id="gulp-rename"><a href="#gulp-rename" class="headerlink" title="gulp-rename"></a>gulp-rename</h3><blockquote><p>文件重命名 </p></blockquote><h3 id="gulp-less"><a href="#gulp-less" class="headerlink" title="gulp-less"></a>gulp-less</h3><blockquote><p> 编译 <code>less</code></p></blockquote><h3 id="gulp-clean-css"><a href="#gulp-clean-css" class="headerlink" title="gulp-clean-css"></a>gulp-clean-css</h3><blockquote><p>压缩 css</p></blockquote><h3 id="gulp-rev-amp-gulp-rev-collector"><a href="#gulp-rev-amp-gulp-rev-collector" class="headerlink" title="gulp-rev &amp; gulp-rev-collector"></a>gulp-rev &amp; gulp-rev-collector</h3><blockquote><p>为文件加上版本号，并且自动修改<code>html</code>中关于压缩文件的引用路径</p></blockquote><h3 id="gulp-livereload"><a href="#gulp-livereload" class="headerlink" title="gulp-livereload"></a>gulp-livereload</h3><blockquote><p>实时自动编译刷新</p></blockquote><h3 id="gulp-htmlmin"><a href="#gulp-htmlmin" class="headerlink" title="gulp-htmlmin"></a>gulp-htmlmin</h3><blockquote><p>压缩 HTML</p></blockquote><h3 id="gulp-load-plugins"><a href="#gulp-load-plugins" class="headerlink" title="gulp-load-plugins"></a>gulp-load-plugins</h3><blockquote><p>万用插件<br>gulp-load-plugins 是依赖 package.json 文件来加载插件的，所以请确保你需要的插件已经加入 package.json 文件并已经安装完毕。</p></blockquote><h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><h3 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task"></a>gulp.task</h3><blockquote><p>注册任务 </p></blockquote><h4 id="3-0-gulp-task-name-deps-fn"><a href="#3-0-gulp-task-name-deps-fn" class="headerlink" title="3.0 gulp.task(name[, deps], fn)"></a>3.0 gulp.task(name[, deps], fn)</h4><ul><li>name : 任务名<code>不要带空格</code></li><li>deps ：<ul><li>type ：Array</li><li>一个包含任务列表的<code>数组</code>，这些任务会在你当前任务运行之前完成。</li></ul></li><li>fn : 回调函数<h4 id="4-0-gulp-task-parallel-and-series-fn"><a href="#4-0-gulp-task-parallel-and-series-fn" class="headerlink" title="4.0 gulp.task(parallel and series, fn)"></a>4.0 gulp.task(parallel and series, fn)</h4><blockquote><p>gulp4不再能够通过数组形式传入任务，你需要使用gulp.series()和gulp.parallel()来执行他们</p></blockquote></li><li>parallel <ul><li>异步任务</li></ul></li><li>series<ul><li>同步任务<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>,gulp.parallel(<span class="string">'taskA'</span>,<span class="string">'taskB'</span>));<span class="comment">//并行执行</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,gulp.series(<span class="string">'taskA'</span>,<span class="string">'taskB'</span>));<span class="comment">//按顺序执行</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch"></a>gulp.watch</h3><blockquote><p>监视任务</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>所需组件请自行引入</p></blockquote><h3 id="合并-压缩-JS-任务"><a href="#合并-压缩-JS-任务" class="headerlink" title="合并 压缩 JS 任务"></a>合并 压缩 JS 任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>)</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'concatJs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 有 return 是异步，无 return 是同步</span></span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'路径'</span>) <span class="comment">// 将数据读取到内存中</span></span><br><span class="line">    .pipe(concat(<span class="string">'临时合并文件名'</span>))  <span class="comment">// 临时合并文件</span></span><br><span class="line">    .pipe(uglify()) <span class="comment">// 压缩文件</span></span><br><span class="line">    .pipe(rename(&#123;<span class="attr">suffix</span>:<span class="string">'.min'</span>&#125;)) <span class="comment">// 改名</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'输出文件目录'</span>)) <span class="comment">// 输出文件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="合并-压缩-CSS-任务"><a href="#合并-压缩-CSS-任务" class="headerlink" title="合并 压缩 CSS 任务"></a>合并 压缩 CSS 任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cssClean = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译less为css</span></span><br><span class="line">gulp.task(<span class="string">'less'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'路径'</span>) <span class="comment">// 将数据读取到内存中</span></span><br><span class="line">    .pipe(less())  <span class="comment">// 编译less为css</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 合并并压缩 css文件</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>,[<span class="string">'less'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'路径'</span>) <span class="comment">// 将数据读取到内存中</span></span><br><span class="line">    .pipe(concat(<span class="string">'临时合并文件名'</span>)) <span class="comment">// 合并文件</span></span><br><span class="line">    .pipe(rename(&#123;<span class="attr">suffix</span>:<span class="string">'.min'</span>&#125;)) <span class="comment">// 改名</span></span><br><span class="line">    .pipe(cssClean(&#123;<span class="attr">compatibility</span>:<span class="string">'ie8'</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'输出文件目录'</span>)) <span class="comment">// 输出文件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="压缩-HTML"><a href="#压缩-HTML" class="headerlink" title="压缩 HTML"></a>压缩 HTML</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlMin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'路径'</span>) <span class="comment">// 将数据读取到内存中</span></span><br><span class="line">    .pipe(htmlMin(&#123;<span class="attr">collaspeWhitespace</span>:<span class="literal">true</span>&#125;))  <span class="comment">// 压缩 HTML</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'输出文件目录'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h2><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><h4 id="任务注册时有return"><a href="#任务注册时有return" class="headerlink" title="任务注册时有return"></a>任务注册时有return</h4><ul><li>任务异步</li><li>任务结束后释放内存</li></ul><h4 id="任务中无return"><a href="#任务中无return" class="headerlink" title="任务中无return"></a>任务中无return</h4><ul><li>任务同步</li><li>任务结束后，不会释放内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2019/01/21/typeScript/"/>
      <url>/2019/01/21/typeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">TypeScript</a></h1><ul><li>JavaScript 的超集</li><li>微软开发的开源编程语言</li><li>遵循最新的 ES6、ES5规范</li><li>提供了类型校验</li></ul><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>为日后维护带来方便</li><li>增加代码可读性</li><li>提高安全性</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install -g typescript</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tsc &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="生成-tsconfig-json"><a href="#生成-tsconfig-json" class="headerlink" title="生成 tsconfig.json"></a>生成 tsconfig.json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tsc --init</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>TypeScript 中为了使编写的代码更规范，更利于维护，增加了类型校验</li></ul><h4 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值 boolean"></a>布尔值 <code>boolean</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="数值-number"><a href="#数值-number" class="headerlink" title="数值 number"></a>数值 <code>number</code></h4><ul><li>和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 <code>string</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"bob"</span>;</span><br><span class="line">name = <span class="string">"smith"</span>;</span><br></pre></td></tr></table></figure><h5 id="可以使用模板字符串"><a href="#可以使用模板字符串" class="headerlink" title="可以使用模板字符串"></a>可以使用<code>模板字符串</code></h5><h4 id="数组类型-list"><a href="#数组类型-list" class="headerlink" title="数组类型 list"></a>数组类型 <code>list</code></h4><h5 id="「类型-方括号」来表示数组"><a href="#「类型-方括号」来表示数组" class="headerlink" title="「类型 + 方括号」来表示数组"></a>「类型 + 方括号」来表示数组</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中的所有元素都是同一类型</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h5 id="使用数组Array-Generic泛型表示"><a href="#使用数组Array-Generic泛型表示" class="headerlink" title="使用数组Array Generic泛型表示"></a>使用数组<code>Array Generic</code>泛型表示</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组 泛型</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h5 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">number</span>; <span class="comment">// 只要 index 的类型是 number ，那么 值得类型 必须是 number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h5 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事实上常见的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="any-在数组中的应用"><a href="#any-在数组中的应用" class="headerlink" title="any 在数组中的应用"></a><code>any</code> 在数组中的应用</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [&#123;a:<span class="string">'b'</span>&#125;, <span class="number">25</span>, <span class="string">'a'</span>];</span><br></pre></td></tr></table></figure><h4 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举 enum"></a>枚举 <code>enum</code></h4><ul><li>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</li><li>用于取值被限定在一定范围内的场景，比如一周只能有七天</li><li>最好不要使用手动赋值</li></ul><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举名 &#123;</span><br><span class="line">  标识符[=整形常数]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure><h5 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h5><ul><li>默认情况下，从0开始为元素编号。</li><li><p>你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1开始编号：</p><ul><li>手动赋值后，未手动赋值的枚举项会接着上一个枚举项递增</li><li>如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 不会察觉到这一点</li><li>当手动赋值的枚举项不是<code>数字</code>时，需要使用类型断言来让<code>tsc</code>无视类型检查</li><li>手动赋值的枚举项也可以是<code>小数</code>或<code>负数</code>，此时未手动赋值的项递增步仍为<code>1</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue=&lt;<span class="built_in">any</span>&gt;<span class="string">"A"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>也可以全部都采取手动赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure></li><li><p>可以由枚举的值得到他的名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colorName);  <span class="comment">// 显示'Green'因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="枚举项"><a href="#枚举项" class="headerlink" title="枚举项"></a>枚举项</h5><p>枚举项分为<code>常数项（constant member）</code>和<code>计算所得项（computed member）</code></p><ul><li>常数项<ul><li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 1。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 0。</li><li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：<ul><li>数字字面量</li><li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li><li>带括号的常数枚举表达式</li><li>+, -, ~ 一元运算符应用于常数枚举表达式</li><li>+, -, *, /, %, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;, &amp;, |, ^ 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li></ul></li></ul></li><li>计算所得项<ul><li>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue = <span class="string">"blue"</span>.length&#125; <span class="comment">// '"blue".length 就是一个计算所得项。</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">##### 常数枚举 `</span><span class="keyword">const</span> <span class="keyword">enum</span><span class="string">`</span></span><br><span class="line"><span class="string">常数枚举是使用 `</span><span class="keyword">const</span> <span class="keyword">enum</span><span class="string">` 定义的枚举类型</span></span><br><span class="line"><span class="string">- 常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>typescript</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>编译结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure></p><h5 id="外部枚举-declare-enum"><a href="#外部枚举-declare-enum" class="headerlink" title="外部枚举 declare enum"></a>外部枚举 <code>declare enum</code></h5><ul><li>外部枚举用来描述已经存在的枚举类型的形状。</li><li><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> Directions &#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure></li></ul><p>编译结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span><br></pre></td></tr></table></figure></p><h4 id="任意类型-any"><a href="#任意类型-any" class="headerlink" title="任意类型 any"></a>任意类型 <code>any</code></h4><ul><li>为不清楚类型的变量指定一个类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="空值-void"><a href="#空值-void" class="headerlink" title="空值 void"></a>空值 void</h4><ul><li>表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Num</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="联合类型-Union-Types"><a href="#联合类型-Union-Types" class="headerlink" title="联合类型 Union Types"></a>联合类型 <code>Union Types</code></h4><ul><li>表示取值可为多种类型中的一种</li><li>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法</li><li>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><ul><li>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。</li><li>指定了–strictNullChecks标记，null和undefined只能赋值给void和它们各自。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num:<span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 <code>Tuple</code></h4><ul><li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。</li><li>元祖合并了不同类型的对象</li><li>数组合并了相同类型的对象</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><ul><li><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].substr(<span class="number">1</span>)); <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">1</span>].substr(<span class="number">1</span>)); <span class="comment">// Error, 'number' does not have 'substr'</span></span><br></pre></td></tr></table></figure></li><li><p>当访问一个越界的元素，会使用联合类型替代：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">'world'</span>; <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()); <span class="comment">// OK, 'string' 和 'number' 都有 toString</span></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><ul><li>never类型表示的是那些永不存在的值的类型</li><li>声明<code>never</code>的变量只能赋予<code>never</code>类型的值</li></ul><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ul><li>object表示非原始类型<ul><li>除number，string，boolean，symbol，null或undefined之外的类型</li></ul></li></ul><h4 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h4><ul><li>TypeScirpt 在没有明确的指定类型的时候会推测出一个类型</li><li>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>; <span class="comment">// // index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><ul><li>手动指定一个值得<code>类型</code></li><li>类型断言有两种形式<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尖括号 语法</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as 语法 =&gt; jsx 中 必须用这个</span></span><br><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数是 JavaScript 中一等功民</p></blockquote><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><ul><li>一个函数有<code>输入</code>和<code>输出</code>，要在 TypeScript 中对其进行约束，需要把<code>输入</code>和<code>输出</code>都考虑在内</li><li>在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。<h5 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段代码只对登号右侧的匿名函数进行了类型定义，等号左边的 f 是通过赋值操作进行类型推论而推断出来的，如果要对 f 添加类型，则：</span></span><br><span class="line"><span class="keyword">let</span> f :<span class="function">(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用-接口-定义函数"><a href="#用-接口-定义函数" class="headerlink" title="用 接口 定义函数"></a>用 接口 定义函数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> F &#123;</span><br><span class="line">  (x:<span class="built_in">number</span>,y:<span class="built_in">number</span>):<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f:F;</span><br><span class="line">f=<span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>函数调用时，输入多余或少于要求的参数，是不被允许的<h5 id="定义参数类型"><a href="#定义参数类型" class="headerlink" title="定义参数类型"></a>定义参数类型</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数?"></a>可选参数<code>?</code></h5><ul><li>可选参数必须写在最后<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x:<span class="built_in">number</span>,y?:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x:<span class="built_in">number</span>=20,y?:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a:<span class="built_in">number</span>,...rest:<span class="built_in">number</span>[]</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">213</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><ul><li>重载允许一个<code>函数</code>接收<code>不同数量</code>或<code>类型</code>的参数时，做出不同的处理<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">number</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">str:<span class="built_in">any</span></span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> str === '<span class="built_in">string</span>'</span>)</span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> `<span class="title">str$</span></span>&#123;str&#125;<span class="string">`</span></span><br><span class="line"><span class="string">  &#125; else &#123;</span></span><br><span class="line"><span class="string">    return `</span>str$&#123;str&#125;<span class="string">`</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>传统方法中，JavaScript 通过构造函数实现类的概念，通过原型链实现继承</li><li>ES6中 <code>class</code> 实现<h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h4></li><li>类（Class）：定义一个事物的抽象特点，包涵他的属性和方法</li><li>对象（Object）：类的实例。通过<code>new</code>实现</li><li>面向对象（OOP）的三大特性：封装、继承、多态</li><li>封装（Encapsulation）：将数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li><li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li><li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如：<code>Cat</code>和<code>Dog</code>都继承自<code>Animal</code>，但是分别实现了自己的<code>eat</code>方法。此时针对某一实例，我们无需了解它是<code>Cat</code>还是<code>Dog</code>，就可以直接调用<code>eat</code>方法，程序会自动判断出应如何执行<code>eat</code></li><li>存取器（getter&amp;setter）：用以改变属性的读取和赋值行为</li><li>修饰符（Modified）：修饰符是一些关键字，用于限定成员或类型的性质，比如<code>public</code>表示公有属性或方法</li><li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中实现</li><li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li></ul><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><ul><li>class：定义类</li><li>constructor：定义构造函数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name:<span class="built_in">string</span>; <span class="comment">// 属性 省略了 public 关键词</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123; <span class="comment">// 构造函数 实例化类时触发的方法</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125; </span><br><span class="line">  run():<span class="built_in">void</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>extend：实现继承</li><li>super：调用父类的构造函数和方法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Web <span class="keyword">extends</span> Person&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><p>使用 getter 和 setter 可以改变属性的赋值和读取行为：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">get</span> name()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">set</span> name(value)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>属性不加修饰符默认是公有属性</p><h5 id="公有修饰符-public"><a href="#公有修饰符-public" class="headerlink" title="公有修饰符 public"></a>公有修饰符 <code>public</code></h5><ul><li><code>public</code> 修饰的属性或方法都是公有的，可以在任何地方被访问到</li></ul><h5 id="保护类型-protected"><a href="#保护类型-protected" class="headerlink" title="保护类型 protected"></a>保护类型 <code>protected</code></h5><ul><li><code>protected</code> 修饰的属性或方法是受保护的，它和<code>private</code>类似，区别是他在子类中也是被允许访问的</li><li>在当前类里、子类里可以访问</li></ul><h5 id="私有类型-private"><a href="#私有类型-private" class="headerlink" title="私有类型 private"></a>私有类型 <code>private</code></h5><ul><li><code>private</code>修饰的属性或方法是私有的，不能在声明他的类的外部访问</li><li>只有在当前类里可以访问</li></ul><h5 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 <code>readonly</code></h5><h5 id="静态类型-static"><a href="#静态类型-static" class="headerlink" title="静态类型 static"></a>静态类型 <code>static</code></h5><ul><li>静态方法：使用<code>static</code>修饰的方法称为静态方法，他们不需要实例化，而是直接通过类来调用</li><li>静态属性：使用<code>static</code>修饰的属性称为静态属性，他们不需要实例化，而是直接通过类来调用<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> isAnimal(a)&#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'a'</span>);</span><br><span class="line">Animal.isAnimal(a); <span class="comment">//true</span></span><br><span class="line">a.(aisAnimal); <span class="comment">// TypeError: a.isAnimal is not a function</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类定义一个方法不去实现，让继承他的子类去实现，每一个类有不同的表现<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name:<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name</span><br><span class="line">  &#125;</span><br><span class="line"> eat():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  eat(name:<span class="built_in">string</span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>吃`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>提供其他类继承的基类，不能直接被实例化</p><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p><code>abstract</code>定义抽象类和抽象方法</p><ul><li><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>); <span class="comment">// index.ts(9,11): error TS2511: Cannot create an instance of the abstract class 'Animal'.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    sayHi()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> say hi.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> is eating.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,7): error TS2515: Non-abstract class 'Cat' does not implement inherited abstract member 'sayHi' from class 'Animal'.</span></span><br></pre></td></tr></table></figure></li><li><p>抽象方法只能放在抽象类里</p></li><li>抽象类的派生类必须必须实现抽象类里的抽象方法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'roaming the earch...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接口-Interfaces"><a href="#接口-Interfaces" class="headerlink" title="接口 Interfaces"></a>接口 <code>Interfaces</code></h3><p>TypeScript 中，使用 接口 来定义对象的类型</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>在面向对象的编程中，接口是一种规范的定义，他定义了行为和动作的规范，在程序设计里，接口起到了限制和规范的作用。</li><li>接口定义了某一批类所需遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，他只规定这批类里必须提供默写方法，提供这些方法的类就可以满足实际需求。</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="普通接口"><a href="#普通接口" class="headerlink" title="普通接口"></a>普通接口</h5><h6 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName:<span class="built_in">string</span>,</span><br><span class="line">  secondName:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><ul><li>赋值的时候，变量的形状和接口的形状必须保持一致<code>不可以多，不可以少</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName:<span class="built_in">string</span>,</span><br><span class="line">  secondName:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name:FullName= &#123;</span><br><span class="line">   firstName:<span class="string">'a'</span>,</span><br><span class="line">   secondName:<span class="string">'bc'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="函数类接口-混合类型"><a href="#函数类接口-混合类型" class="headerlink" title="函数类接口(混合类型)"></a>函数类接口(混合类型)</h5><ul><li><p>使用接口定义一个函数需要符合的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  (value:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> setData:Config=<span class="function"><span class="keyword">function</span>(<span class="params">value:<span class="built_in">string</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当函数有自己的属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  (start:<span class="built_in">number</span>):<span class="built_in">string</span>;</span><br><span class="line">  interval:<span class="built_in">number</span>;</span><br><span class="line">  reset():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>):<span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span>(<span class="params">start:<span class="built_in">number</span></span>) </span>&#123;&#125;</span><br><span class="line">  counter.interval=<span class="number">123</span>;</span><br><span class="line">  counter.reset=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h5><p>对数值、对象的约束<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserArr&#123;</span><br><span class="line">  [index:<span class="built_in">number</span>]:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr:UserArr=[<span class="number">123</span>,<span class="number">13</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserObj &#123;</span><br><span class="line">  [index:<span class="built_in">string</span>]:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user:UserObj=&#123;w:<span class="string">'qw'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h5><ul><li>实现<code>implements</code>是面向对象的一个重要概念。</li><li>一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候可以把特性提取成接口<code>interfaces</code>，用<code>implements</code>关键字来实现，这个特性大大提高了面向对象的灵活性</li><li><p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Door &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SecurityDoor <span class="keyword">extends</span> Door <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个类也可以实现多个接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm, Light &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上例中，Car 实现了 Alarm 和 Light 接口，既能报警，也能开关车灯。</p><h5 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  a():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A&#123;</span><br><span class="line">  b():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> C <span class="keyword">implements</span> B&#123;</span><br><span class="line">  a():<span class="built_in">void</span> &#123;&#125;</span><br><span class="line">  b():<span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><ul><li>可选属性的含义是 该属性 可以不存在，但是 <code>仍然不允许添加未定义的属性</code></li><li>当不需要完全匹配一个形状时，可以用可选属性<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name:<span class="built_in">string</span>,</span><br><span class="line">  age?:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ton:Person = &#123;</span><br><span class="line">  name:<span class="string">'Tom'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 未定义属性 报错</span></span><br><span class="line"><span class="keyword">let</span> jone:Person = &#123;</span><br><span class="line">   name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><ul><li><p>希望一个<code>接口</code>允许有任意的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>一旦定义<code>任意属性</code>，那么<code>确定属性</code> 和<code>可选属性</code>的类型都必须是他的类型的子集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span></span><br><span class="line"><span class="comment">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Index signatures are incompatible.</span></span><br><span class="line"><span class="comment">//     Type 'string | number' is not assignable to type 'string'.</span></span><br><span class="line"><span class="comment">//       Type 'number' is not assignable to type 'string'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外，在报错信息中可以看出，此时 &#123; name: 'Tom', age: 25, gender: 'male' &#125; 的类型被推断成了 &#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;，这是联合类型和接口的结合。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="只读属性-readonly-1"><a href="#只读属性-readonly-1" class="headerlink" title="只读属性 readonly"></a>只读属性 <code>readonly</code></h4><p>当希望对象中的一些字段只能在<code>创建</code>的时候被赋值，可以用<code>只读</code>属性<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></p><h3 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 <code>Generics</code></h3><ul><li>泛型是指在定义函数、接口或类的时候，不预先指定具体类型，而在使用的时候在指定类型的一种特性</li><li>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</li><li>无法创建 泛型枚举 和 泛型命名空间<h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们给<code>identity</code>添加了类型变量<code>T</code>。<code>T</code>帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。<br>之后我们再次使用了<code>T</code>当做返回值类型。现在我们可以知道参数与返回值类型是相同的。<br>这允许我们跟踪函数里使用的类型的信息</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><ul><li>传入所有的参数，包括类型参数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'myString'</span>); <span class="comment">// type of output will be 'string'</span></span><br></pre></td></tr></table></figure></li></ul><p>这里我们明确的指定了<code>T</code>是 <code>string</code>类型，并做为一个参数传递给了函数</p><ul><li>利用类型推论 – 编译器会根据传入的参数自动地帮助我们确定<code>T</code>的类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'myString'</span>); <span class="comment">// type of output will be 'string'</span></span><br></pre></td></tr></table></figure></li></ul><p>这里并没有明确的使用<code>&lt;&gt;</code> 来明确地传入类型；编译器可以查看<code>myString</code>的值，然后把<code>T</code>设置为他的类型。<br>类型推论帮助我们保持代码精简和可读性。</p><h4 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h4><ul><li><p>泛型函数的类型 与 非泛型函数的类型 没什么不同，只是有一个类型参数在最前面，想函数声明一样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  myIdentity:&lt;T&gt;<span class="function">(<span class="params">arg:T</span>)=&gt;</span>T=identity;</span><br></pre></td></tr></table></figure></li><li><p>也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg:U</span>)=&gt;</span>U=identity;</span><br></pre></td></tr></table></figure></li><li><p>还可以使用带有调用签名的对象字面量来定义泛型函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity:&#123;&lt;T&gt;(arg:T):T&#125;=identity;</span><br></pre></td></tr></table></figure></li><li><p>把上面例子里的对象字面量拿出来作为一个接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn &#123;</span><br><span class="line">  &lt;T&gt;(arg:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdntity:GenericIdentityFn=identity;</span><br></pre></td></tr></table></figure></li><li><p>我们可以把泛型参数当作整个接口的一个参数。这样我们就能清楚的知道使用的具体是哪个泛型类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg:T):T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure></li></ul><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Min&lt;T&gt;&#123;</span><br><span class="line">  <span class="keyword">public</span> list:T[]=[]</span><br><span class="line">  add(value:T):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(value)</span><br><span class="line">  &#125;</span><br><span class="line">  min():T&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (min &gt; item)&#123;</span><br><span class="line">        min = item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> Min&lt;<span class="built_in">number</span>&gt;()</span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config&lt;T&gt; &#123;</span><br><span class="line">  &lt;T&gt;(value:T):T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = f&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> b:Config&lt;<span class="built_in">number</span>&gt; = f</span><br><span class="line">b(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><ul><li>当使用第三方库时，需要引用他的声明文件，才能获得对应的代码补全，接口提示功能</li><li>通常会吧 <code>声明语句</code> 放到一个单独的文件 （*.d.ts）中</li><li><code>声明文件</code> 必须以 <code>.d.ts</code> 结尾</li></ul><h4 id="声明语句-declare-var"><a href="#声明语句-declare-var" class="headerlink" title="声明语句 declare var"></a>声明语句 <code>declare var</code></h4><ul><li>declare var 没有定义一个变量，只是定义了全局变量的类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuert:<span class="function">(<span class="params">selector:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">any</span></span><br><span class="line">jQuert(<span class="string">'#foo'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="第三方声明文件"><a href="#第三方声明文件" class="headerlink" title="第三方声明文件"></a>第三方声明文件</h4><p><a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">搜索地址</a></p><h4 id="书写声明文件"><a href="#书写声明文件" class="headerlink" title="书写声明文件"></a>书写声明文件</h4><p>在不同场景下，声明文件的内容和使用方式有所区别</p><ul><li>全局变量：通过 <code>script</code> 标签引入的第三方库，注入全局变量</li><li>npm包：通过 import foo from ‘foo’ 导入，符合 ES6模块规范</li><li>UMD库：即可以通过 <code>script</code> 标签引入，也可以通过 ES6 模块规范</li><li>模块插件：通过 <code>import</code> 导入后，可以改变另一模块的结构</li><li>直接扩展全局变量：通过 <code>script</code> 引入后， 改变一个全局变量的结构。比如 ：为 Array.prototype 新增一个方法</li><li>通过导入扩展全局变量：通过 import 导入后，可以改变一个全局变量的结构</li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 中的很多<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">内置对象</a>,可以直接在 TypeScript 中当做定义好了的类型</p><h4 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error occurred'</span>);</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br></pre></td></tr></table></figure><h4 id="DOM-和-BOM-的-内置对象"><a href="#DOM-和-BOM-的-内置对象" class="headerlink" title="DOM 和 BOM 的 内置对象"></a>DOM 和 BOM 的 内置对象</h4><p>Document、HTMLElement、Event、NodeList 等<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="TypeScript-核心库的定义文件"><a href="#TypeScript-核心库的定义文件" class="headerlink" title="TypeScript 核心库的定义文件"></a>TypeScript 核心库的定义文件</h4><ul><li>TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</li><li>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了</li></ul><h4 id="用-TypeScript-写-Node-js"><a href="#用-TypeScript-写-Node-js" class="headerlink" title="用 TypeScript 写 Node.js"></a>用 TypeScript 写 Node.js</h4><p>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm install @types/node --save-dev</span><br></pre></td></tr></table></figure></p><h3 id="类型别名-type"><a href="#类型别名-type" class="headerlink" title="类型别名 type"></a>类型别名 <code>type</code></h3><ul><li>给一个类型取一个新名字</li><li>类型别名适用于 <code>联合类型</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n:NameOrResolver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h3><ul><li>约束取值只能是<code>某几个</code>字符串中的一个<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span>| <span class="string">'scroll'</span>|<span class="string">'mouseOver'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele:Element,event:EventNames</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://ts.xcatliu.com/basics/type-of-function.html" target="_blank" rel="noopener">TypeScript 入门教程</a></li><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/" target="_blank" rel="noopener">TypeScript Handbook（中文版）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
